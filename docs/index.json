{
  "ALANG.html": {
    "href": "ALANG.html",
    "title": "Alang (Automata Language) | Automata Docs",
    "keywords": "Alang (Automata Language) Alang is a formal language for defining finite-state automata using human-readable regular expressions. It supports many operations, such as union, intersection, complement and set difference, enabling expressions like \"(a? (b | c)* - (b b))+\". Alang's syntax is defined by the Alang Grammar which is an LL(1) context-free grammar. The Alang parser is optimized for fast parsing of very large inputs. The parser validates syntactic correctness and generates detailed error messages for invalid inputs. Alang Grammar Specification Grammar Rule Expansion AlangRegex (root) Union \uD83D\uDD39Union Difference (| Difference)* \uD83D\uDD39Difference Intersection (- Intersection)* \uD83D\uDD39Intersection Concatenation (& Concatenation)* \uD83D\uDD39Concatenation UnaryRegex+ UnaryRegex PrimaryRegex (Option ┃ KleeneStar ┃ KleenePlus ┃ Complement)* \uD83D\uDD39Option PrimaryRegex ? \uD83D\uDD39KleeneStar PrimaryRegex * \uD83D\uDD39KleenePlus PrimaryRegex + \uD83D\uDD39Complement PrimaryRegex ~ PrimaryRegex ( AlangRegex ) ┃ Symbol ┃ Wildcard ┃ EmptyLang \uD83D\uDD39Symbol SymbolChar+ \uD83D\uDD39Wildcard . \uD83D\uDD39EmptyLang () SymbolChar any character except operator characters and whitespace \uD83D\uDD39 Denotes an actual node type in the resulting AST (abstract syntax tree) outputed by the parser. Note to developers: All types marked with a \uD83D\uDD39 have corresponding classes with the exact same names in the namespace Automata.Core.Alang. For an input to be valid, the root rule AlangRegex must cover the entire input, with no residue. Operators Operators with higher precedence levels bind more tightly than those with lower levels. Operators of the same precedence level are left-associative (left-to-right). All unary operators are postfix operators and all binary operators are infix operators. Precedence Operation/Unit Operator Character Position & Arity 1 Union L₁ | L₂ Infix Binary 2 Difference L₁ - L₂ Infix Binary 3 Intersection L₁ & L₂ Infix Binary 4 Concatenation L₁ L₂ Infix Implicit 5 Option L ? Postfix Unary 5 Kleene Star L* Postfix Unary 5 Kleene Plus L+ Postfix Unary 5 Complement L~ Postfix Unary 6 Group ( L ) Enclosing Unary 7 EmptyLang () Empty parentheses 7 Wildcard . Terminal 7 Symbol string literal Terminal Whitespace Multiple Whitespace is allowed anywhere in the grammar, except within Symbols. Whitespace is never required anywhere - except for separating directly adjacent Symbols or operators. Thus, the parser resolves all reserved tokens as delimiters: The following are correcly delimited: hello+world or hello(world). Whitespace denotes any whitespace character (i.e. space, tab, newline, etc.). The formal whitespace definition is equivalent to .NET's char.IsWhiteSpace(char c). Symbols Symbols have a specific meaning - as formally defined by automata theory: User-defined string literals that constitute the atoms of Alang expressions. It is equivalent to symbols in finite-state automata. Can contain any characters except reserved operator characters or whitespace. They can never be empty. Symbols are strings and are not to be confused with characters, Wildcard A Wildcard is a special token denoted by a . (dot). It represents any symbol in the alphabet. For example: . - hello represents the language of all symbols except 'hello'. (. - hello).* represents the language of all sequences, except those containing 'hello'. The Empty Language ∅ and The Language containing only epsilon {ε} The Empty Language ∅ is the language that does not cotain anything. It is written in Alang using empty parentheses (). Its corresponding grammar rule is EmptyLang and the parse tree type is EmptyLang. Its automata equivalence is an automaton that does not accept anything (not even the empty string). In most scenarios, () is not required when writing a Alang expressions. However, many operations can result in the empty language. For example a - (a | b) is equivalent to (). The language containing only the empty string {ε} It is written in Alang as ()?, since the Option operator ? unites the operand with {ε}: L? = L ∪ { ε } Its automata equivalence is an automaton that only accepts ε. Note that () ≠ {ε}. For instance: Concatenating any language L with () => (). Concatenating any language L with {ε} => L. Alang expression examples (a? (b | c) )+ : All sequences from the set {a, b, c} where any 'a' must be followed by 'b' or 'c'. a+~ b : Complement of 'a+' - all sequences that are not 1 or more 'a's, followed by a 'b' (x1 | x2 | x3)* - (x1 x2 x3)+ : All sequences constaining {x1, x2, x3}, except repetitions of \"x1 x2 x3\". () : The empty language that does not accept anything. For example, it is the result from hello - hello and from hello & world. Operation Definitions Union: L₁ ∪ L₂ = { w | w ∈ L₁ or w ∈ L₂ } Difference: L₁ - L₂ = { w | w ∈ L₁ and w ∉ L₂ } Intersection: L₁ ∩ L₂ = { w | w ∈ L₁ and w ∈ L₂ } Concatenation: L₁ ⋅ L₂ = { w | w = uv, u ∈ L₁, v ∈ L₂ } Option: L? = L ∪ { ε } Kleene Star: L* = ⋃ₙ₌₀^∞ Lⁿ, where L⁰ = { ε }, Lⁿ = L ⋅ Lⁿ⁻¹ for n ≥ 1 Kleene Plus: L⁺ = ⋃ₙ₌₁^∞ Lⁿ, where Lⁿ = L ⋅ Lⁿ⁻¹ for n ≥ 1 Complement: ᒾL = Σ* \\ L C# API The Alang parser and FSA compiler is provided by the namespace Automata.Core.Alang. Key class: AlangRegex Example usage: AlangRegex regex = AlangRegex.Parse(\"(a? (b | c) )+\"); // Create an Alang regex Mfa fsa = regex.Compile(); // Compile the regex to a minimal finite-state automaton For more information, see the Automata documentation"
  },
  "Automata.Core.Alang.AlangCursor.html": {
    "href": "Automata.Core.Alang.AlangCursor.html",
    "title": "Struct AlangCursor | Automata Docs",
    "keywords": "Struct AlangCursor Represents a cursor for parsing Alang regex strings. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public ref struct AlangCursor Remarks A cursor is a lightweight struct that consumes characters from the left of the input regexString as it is parsed. For performance, regexString is never split, copied or modified. Instead, the cursor maintains a lightweight span of the remaining regex string. Also, the parser in the Automata.Core.Alang namespace only needs to maintain a single cursor instance through the entire parse process. The contract of the AlangCursor is that it always points to a non-white-space character or EOI if the regex string is empty. Consequently: - All methods in AlangCursor that move the cursor must ensure on exit that leadingwhitespace is skipped. - All methods in AlangCursor can assume on entry that the cursor points to a non-whitespace character. This struct is also the sole point for throwing all types of parsing exceptions. These are handled by the methods prefixed by Should. Constructors | Edit this page View Source AlangCursor(string) Represents a cursor for parsing Alang regex strings. Declaration public AlangCursor(string regexString) Parameters Type Name Description string regexString The regex string to parse. Remarks A cursor is a lightweight struct that consumes characters from the left of the input regexString as it is parsed. For performance, regexString is never split, copied or modified. Instead, the cursor maintains a lightweight span of the remaining regex string. Also, the parser in the Automata.Core.Alang namespace only needs to maintain a single cursor instance through the entire parse process. The contract of the AlangCursor is that it always points to a non-white-space character or EOI if the regex string is empty. Consequently: - All methods in AlangCursor that move the cursor must ensure on exit that leadingwhitespace is skipped. - All methods in AlangCursor can assume on entry that the cursor points to a non-whitespace character. This struct is also the sole point for throwing all types of parsing exceptions. These are handled by the methods prefixed by Should. Properties | Edit this page View Source CursorIndex Current position of the cursor in the original input string. Declaration public readonly int CursorIndex { get; } Property Value Type Description int | Edit this page View Source IsEmpty Indicates whether the cursor has reached the end of the input. Declaration public readonly bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsExpressionStart Indicates whether the current character indicates the start of an expression. false if the input is empty. Declaration public readonly bool IsExpressionStart { get; } Property Value Type Description bool | Edit this page View Source NextAsString String representation of the next character in the input, or \"End-Of-Input\" if at the end of the input. Declaration public readonly string NextAsString { get; } Property Value Type Description string Methods | Edit this page View Source ConsumeSymbol() Consumes an Symbol from the input. Declaration public Symbol ConsumeSymbol() Returns Type Description Symbol The consumed Symbol. Remarks This method will return an empty (invalid) Symbol if no characters could be consumed. It is up to the calling code to handle this. | Edit this page View Source Is(char) Indicates whether the first character in the remaining input is the specified character. Declaration public readonly bool Is(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool true iff the first character is the specified character. | Edit this page View Source IsNot(char) Indicates whether the first character in the remaining input is not the specified character. Declaration public readonly bool IsNot(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool true iff the first character is NOT the specified character. | Edit this page View Source ShouldBeRightOperand(char) Validates that there is right operand after a binary operator. Declaration public readonly void ShouldBeRightOperand(char binaryOperator) Parameters Type Name Description char binaryOperator The preceding binary operator character. (Only used for better informed error messages if validation fails). Exceptions Type Condition AlangFormatException Thrown when the current character is not a right parenthesis ')'. | Edit this page View Source ShouldBeRightParen() Validates that the current character is a right parenthesis. Declaration public readonly void ShouldBeRightParen() Exceptions Type Condition AlangFormatException Thrown when the current character is not a right parenthesis ')'. | Edit this page View Source ShouldNotBeEmpty() Validates that the cursor is not at the end of input. Declaration public readonly void ShouldNotBeEmpty() Remarks This method enforces the rule that empty input is not valid in Alang expressions. To represent an empty set, use parentheses '()' instead. Exceptions Type Condition AlangFormatException Thrown when the cursor is at the end of input. | Edit this page View Source ShouldNotBeOperator() Validates that the current character is not an operator. Declaration public readonly void ShouldNotBeOperator() Remarks This method ensures expressions do not start with an operator. Exceptions Type Condition AlangFormatException Thrown when the current character is an operator. | Edit this page View Source ShouldNotBeRightParen() Validates that the current character is not a right parenthesis. Declaration public readonly void ShouldNotBeRightParen() Exceptions Type Condition AlangFormatException Thrown when the current character is a right parenthesis ')'. | Edit this page View Source ToString() String representation of the remaining input. Declaration public override readonly string ToString() Returns Type Description string A string that represents the remaining input. Overrides ValueType.ToString() | Edit this page View Source TryConsume(char) Tries to consume the specified character from the input and advances the cursor if successful. Declaration public bool TryConsume(char c) Parameters Type Name Description char c The character to attempt to consume. Returns Type Description bool true iff the character was successfully consumed. | Edit this page View Source TryConsumeAny(params char[]) Tries to consume one of the specified characters from the input and advances the cursor if successful. Declaration public char TryConsumeAny(params char[] chars) Parameters Type Name Description char[] chars An array of characters to attempt to consume. Returns Type Description char The character that was consumed if successful; otherwise, Invalid. Remarks This method supports inclusion of EOI to also match against End-Of-Input. | Edit this page View Source TryConsumeBinaryOperator(char) Tries to consume a binary operator from the input and advances the cursor if successful. Declaration public bool TryConsumeBinaryOperator(char binaryOperator) Parameters Type Name Description char binaryOperator The binary operator character to attempt to consume. Returns Type Description bool true iff the binary operator was successfully consumed and the next character is a valid expression start. Exceptions Type Condition AlangFormatException Thrown when the binary operator was consumed but the next character was not IsExpressionStart ."
  },
  "Automata.Core.Alang.AlangFormatException.html": {
    "href": "Automata.Core.Alang.AlangFormatException.html",
    "title": "Class AlangFormatException | Automata Docs",
    "keywords": "Class AlangFormatException Represents an exception thrown when an error occurs during parsing of Alang expressions. Inheritance object Exception AlangFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax [Serializable] public class AlangFormatException : Exception, ISerializable Remarks Provides detailed information about the parsing error, including the index in the input where the error occurred and the specific type of error. All throwing of this exception is done in the AlangCursor class. Fields | Edit this page View Source ErrorReason Type of parsing error that occurred. Declaration public readonly ParseErrorReason ErrorReason Field Value Type Description ParseErrorReason | Edit this page View Source Index Index in the input string where the parsing error occurred. Declaration public readonly int Index Field Value Type Description int Methods | Edit this page View Source Assert(bool, ParseErrorReason, int, string) Conditionally throws an AlangFormatExceptioniffcondition is false. Declaration public static bool Assert(bool condition, ParseErrorReason errorReason, int index, string message) Parameters Type Name Description bool condition iff false an exception is thrown. ParseErrorReason errorReason Reason for the parsing error. int index Index in the input string where the parsing error occurred. string message Error message with details about the exception. Returns Type Description bool true or throws exception. Implements ISerializable See Also AlangCursor"
  },
  "Automata.Core.Alang.AlangRegex.html": {
    "href": "Automata.Core.Alang.AlangRegex.html",
    "title": "Class AlangRegex | Automata Docs",
    "keywords": "Class AlangRegex Represents an expression in the Alang (Automata language) used for defining finite-state automata. AlangRegex has a one-to-one correspondence with Finite State Automata. Inheritance object AlangRegex BinaryRegex EmptyLang Symbol UnaryRegex Wildcard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class AlangRegex Remarks The Alang language is a domain-specific language designed for defining and working with finite-state automata. This class serves as the starting point for parsing Alang expressions with Parse(string). For more information about the Alang language, see the Alang Grammar Specification. Constructors | Edit this page View Source AlangRegex() Initializes a new instance of the AlangRegex class. Declaration protected AlangRegex() Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public abstract string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. | Edit this page View Source IsEmptyString Indicates whether this expression is an empty string. An empty string is not a valid expression in Alang. Used internally by the Parser to handle empty strings. Declaration public bool IsEmptyString { get; } Property Value Type Description bool true iff this expression is an empty string; otherwise, false. | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public abstract int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Methods | Edit this page View Source Compile() Compiles this AlangRegex into an automaton. A new Alphabet for the automaton is created containing all referenced symbols. Declaration public Mfa Compile() Returns Type Description Mfa An Mfa representing the compiled finite state automaton. Remarks This method creates a new Alphabet. When possible, consider using a shared single alphabet for multiple automata, for added performance. | Edit this page View Source Compile(Alphabet) Compiles this AlangRegex into an automaton using the specified alphabet. Declaration public Mfa Compile(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet The alphabet to use for compilation. Returns Type Description Mfa An Mfa representing the compiled finite state automaton. Remarks The alphabet is extended with any symbols not currently in it. | Edit this page View Source Compile(string) Compiles the specified regex string directly into a finite-state automaton. A new Alphabet for the automaton is created, containing all symbols in the regex string. Declaration public static Mfa Compile(string regexString) Parameters Type Name Description string regexString A regex string on Alang format. Returns Type Description Mfa An Mfa representing the compiled automaton. Remarks When possible, consider using a shared single alphabet for multiple automata, for added performance. Exceptions Type Condition AlangFormatException Thrown when the regex string is in invalid format. | Edit this page View Source Compile(string, params string[]) Compiles the specified regex string directly into a finite-state automaton. A new Alphabet for the automaton is created, containing all symbols in the regex string and the specified additional symbols. Declaration public static Mfa Compile(string regexString, params string[] addSymbols) Parameters Type Name Description string regexString A regex string on Alang format. string[] addSymbols Additional symbols to include in the alphabet. Returns Type Description Mfa An Mfa representing the compiled automaton. Remarks All alphabet symbols will be included in generic constructs, such as '.' (Wildcard) and '~' (Complement) When possible, consider using a shared single alphabet for multiple automata, for added performance. Exceptions Type Condition AlangFormatException Thrown when the regex string is in invalid format. | Edit this page View Source Compile(params string[]) Compiles this AlangRegex into an automaton. A new Alphabet for the automaton is created, containing all referenced symbols and the specified additional symbols. Declaration public Mfa Compile(params string[] addSymbols) Parameters Type Name Description string[] addSymbols Additional symbols to include in the alphabet. Returns Type Description Mfa An Mfa representing the compiled finite state automaton. Remarks All alphabet symbols will be included in generic constructs, such as '.' (Wildcard) and '~' (Complement) When possible, consider using a shared single alphabet for multiple automata, for added performance. | Edit this page View Source DescendantsAndSelf() Returns this expression and all its descendant expressions in a depth-first order. Declaration public IEnumerable<AlangRegex> DescendantsAndSelf() Returns Type Description IEnumerable<AlangRegex> An IEnumerable<T> of AlangRegex representing this expression and all its descendants. | Edit this page View Source Param(AlangRegex, AlangRegex) Returns the string of the given expression, enclosed in parentheses only if necessary based on operator precedence. Declaration protected static string Param(AlangRegex expr, AlangRegex parent) Parameters Type Name Description AlangRegex expr The expression to get the string representation of. AlangRegex parent The parent expression of expr. Returns Type Description string The expression string, potentially enclosed in parentheses. Remarks Parentheses are added if the precedence of the given expression is lower than the precedence of the parent. | Edit this page View Source Parse(string) Parses the specified regex string into an AlangRegex. Declaration public static AlangRegex Parse(string regexString) Parameters Type Name Description string regexString A regex string on Alang format. Returns Type Description AlangRegex An AlangRegex representing the parsed expression. Exceptions Type Condition AlangFormatException Thrown when the regex string is in invalid format. | Edit this page View Source ToString() String that represents the current expression in Alang format. Declaration public override string ToString() Returns Type Description string The expression string of this expression in Alang format. Overrides object.ToString()"
  },
  "Automata.Core.Alang.BinaryRegex.html": {
    "href": "Automata.Core.Alang.BinaryRegex.html",
    "title": "Class BinaryRegex | Automata Docs",
    "keywords": "Class BinaryRegex Represents a binary infix expression in the Alang language. Inheritance object AlangRegex BinaryRegex Concatenation Difference Intersection Union Inherited Members AlangRegex.Precedence AlangRegex.AlangExpressionString AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class BinaryRegex : AlangRegex Remarks This is an abstract class that serves as a base for specific binary infix expressions. Constructors | Edit this page View Source BinaryRegex(AlangRegex, AlangRegex) Initializes a new instance of the BinaryRegex class with the specified left and right operands. Declaration public BinaryRegex(AlangRegex left, AlangRegex right) Parameters Type Name Description AlangRegex left The left operand of the binary infix expression. AlangRegex right The right operand of the binary infix expression. Properties | Edit this page View Source Left Left operand of the binary infix expression. Declaration public AlangRegex Left { get; } Property Value Type Description AlangRegex | Edit this page View Source Right Right operand of the binary infix expression. Declaration public AlangRegex Right { get; } Property Value Type Description AlangRegex"
  },
  "Automata.Core.Alang.Chars.html": {
    "href": "Automata.Core.Alang.Chars.html",
    "title": "Class Chars | Automata Docs",
    "keywords": "Class Chars Character definitions and utility methods for Alang. Inheritance object Chars Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public static class Chars Fields | Edit this page View Source Complement Complement operator character. Declaration public const char Complement = '~' Field Value Type Description char | Edit this page View Source Difference Difference operator character. Declaration public const char Difference = '-' Field Value Type Description char | Edit this page View Source EOI End of input character. Declaration public const char EOI = '\\0' Field Value Type Description char | Edit this page View Source Intersection Intersection operator character. Declaration public const char Intersection = '&' Field Value Type Description char | Edit this page View Source Invalid Invalid character. Declaration public const char Invalid = '\\uffff' Field Value Type Description char | Edit this page View Source KleenePlus Kleene plus operator character. Declaration public const char KleenePlus = '+' Field Value Type Description char | Edit this page View Source KleeneStar Kleene star operator character. Declaration public const char KleeneStar = '*' Field Value Type Description char | Edit this page View Source LeftParen Left parenthesis character. Declaration public const char LeftParen = '(' Field Value Type Description char | Edit this page View Source Option Option operator character. Declaration public const char Option = '?' Field Value Type Description char | Edit this page View Source RightParen Right parenthesis character. Declaration public const char RightParen = ')' Field Value Type Description char | Edit this page View Source Union Union operator character. Declaration public const char Union = '|' Field Value Type Description char | Edit this page View Source Wildcard Wildcard token denoting any string in the alphabet. Declaration public const char Wildcard = '.' Field Value Type Description char Methods | Edit this page View Source IsExpressionStart(char) Indicates if a character can be the start of an expression. Declaration public static bool IsExpressionStart(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character can start an expression. | Edit this page View Source IsOperator(char) Indicates if a character is an operator. Declaration public static bool IsOperator(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character is an operator. | Edit this page View Source IsSymbolChar(char) Indicates if a character can be part of Symbol. Declaration public static bool IsSymbolChar(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character can be part of a Symbol."
  },
  "Automata.Core.Alang.Complement.html": {
    "href": "Automata.Core.Alang.Complement.html",
    "title": "Class Complement | Automata Docs",
    "keywords": "Class Complement Represents a complement expression in the Alang language. Inheritance object AlangRegex UnaryRegex Complement Inherited Members UnaryRegex.Operand AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Complement : UnaryRegex Constructors | Edit this page View Source Complement(AlangRegex) Represents a complement expression in the Alang language. Declaration public Complement(AlangRegex operand) Parameters Type Name Description AlangRegex operand The operand of the complement expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.Concatenation.html": {
    "href": "Automata.Core.Alang.Concatenation.html",
    "title": "Class Concatenation | Automata Docs",
    "keywords": "Class Concatenation Represents a concatenation operation in the Alang grammar. Inheritance object AlangRegex BinaryRegex Concatenation Inherited Members BinaryRegex.Left BinaryRegex.Right AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Concatenation : BinaryRegex Constructors | Edit this page View Source Concatenation(AlangRegex, AlangRegex) Represents a concatenation operation in the Alang grammar. Declaration public Concatenation(AlangRegex left, AlangRegex right) Parameters Type Name Description AlangRegex left The left operand of the concatenation. AlangRegex right The right operand of the concatenation. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Parses the rule Concatenation in the Alang grammar specification. Declaration public static AlangRegex Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor The cursor from which to parse the expression. Returns Type Description AlangRegex An AlangRegex representing the parsed expression. Exceptions Type Condition AlangFormatException Thrown when the input is invalid."
  },
  "Automata.Core.Alang.Difference.html": {
    "href": "Automata.Core.Alang.Difference.html",
    "title": "Class Difference | Automata Docs",
    "keywords": "Class Difference Represents a difference expression in the Alang grammar. Inheritance object AlangRegex BinaryRegex Difference Inherited Members BinaryRegex.Left BinaryRegex.Right AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Difference : BinaryRegex Constructors | Edit this page View Source Difference(AlangRegex, AlangRegex) Represents a difference expression in the Alang grammar. Declaration public Difference(AlangRegex left, AlangRegex right) Parameters Type Name Description AlangRegex left The left-hand side expression of the difference. AlangRegex right The right-hand side expression of the difference. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.EmptyLang.html": {
    "href": "Automata.Core.Alang.EmptyLang.html",
    "title": "Class EmptyLang | Automata Docs",
    "keywords": "Class EmptyLang Represents the empty language (∅) in Alang (Automata language). Inheritance object AlangRegex EmptyLang Inherited Members AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class EmptyLang : AlangRegex Remarks It is a valid expression in the Alang language, denoted by the empty parentheses (). Constructors | Edit this page View Source EmptyLang() Initializes a new instance of the EmptyLang class. Declaration public EmptyLang() Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.Intersection.html": {
    "href": "Automata.Core.Alang.Intersection.html",
    "title": "Class Intersection | Automata Docs",
    "keywords": "Class Intersection Represents an intersection expression in the Alang grammar specification. Inheritance object AlangRegex BinaryRegex Intersection Inherited Members BinaryRegex.Left BinaryRegex.Right AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Intersection : BinaryRegex Constructors | Edit this page View Source Intersection(AlangRegex, AlangRegex) Represents an intersection expression in the Alang grammar specification. Declaration public Intersection(AlangRegex left, AlangRegex right) Parameters Type Name Description AlangRegex left The left operand of the intersection expression. AlangRegex right The right operand of the intersection expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.KleenePlus.html": {
    "href": "Automata.Core.Alang.KleenePlus.html",
    "title": "Class KleenePlus | Automata Docs",
    "keywords": "Class KleenePlus Represents a Kleene plus unary expression in the Alang language. Inheritance object AlangRegex UnaryRegex KleenePlus Inherited Members UnaryRegex.Operand AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleenePlus : UnaryRegex Remarks The Kleene plus operation is a postfix unary operation that denotes one or more repetitions of the operand expression. Constructors | Edit this page View Source KleenePlus(AlangRegex) Represents a Kleene plus unary expression in the Alang language. Declaration public KleenePlus(AlangRegex operand) Parameters Type Name Description AlangRegex operand The operand of the Kleene plus expression. Remarks The Kleene plus operation is a postfix unary operation that denotes one or more repetitions of the operand expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.KleeneStar.html": {
    "href": "Automata.Core.Alang.KleeneStar.html",
    "title": "Class KleeneStar | Automata Docs",
    "keywords": "Class KleeneStar Represents a Kleene star operation in the Alang language. Inheritance object AlangRegex UnaryRegex KleeneStar Inherited Members UnaryRegex.Operand AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleeneStar : UnaryRegex Remarks The Kleene star operation is a unary postfix operator that denotes zero or more repetitions of the operand expression. Constructors | Edit this page View Source KleeneStar(AlangRegex) Represents a Kleene star operation in the Alang language. Declaration public KleeneStar(AlangRegex operand) Parameters Type Name Description AlangRegex operand The operand expression to which the Kleene star operation is applied. Remarks The Kleene star operation is a unary postfix operator that denotes zero or more repetitions of the operand expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.Option.html": {
    "href": "Automata.Core.Alang.Option.html",
    "title": "Class Option | Automata Docs",
    "keywords": "Class Option Represents an option expression in the Alang language. Inheritance object AlangRegex UnaryRegex Option Inherited Members UnaryRegex.Operand AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Option : UnaryRegex Remarks An option expression matches zero or one occurrence of its operand. Constructors | Edit this page View Source Option(AlangRegex) Represents an option expression in the Alang language. Declaration public Option(AlangRegex operand) Parameters Type Name Description AlangRegex operand The operand of the option expression. Remarks An option expression matches zero or one occurrence of its operand. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.ParseErrorReason.html": {
    "href": "Automata.Core.Alang.ParseErrorReason.html",
    "title": "Enum ParseErrorReason | Automata Docs",
    "keywords": "Enum ParseErrorReason Reason for parsing errors in Alang expressions. Specifies the reason for a AlangFormatException. Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public enum ParseErrorReason Fields Name Description EmptyInput Indicates that the input was empty or white-space only. MissingClosingParenthesis Indicates that a closing parenthesis was expected but not found. MissingRightOperand Indicates that a right operand was expected after a binary operator but was not found. UnexpectedClosingParenthesis Indicates that an unexpected closing parenthesis was encountered. UnexpectedOperator Indicates that an unexpected operator was encountered. See Also AlangFormatException"
  },
  "Automata.Core.Alang.Symbol.html": {
    "href": "Automata.Core.Alang.Symbol.html",
    "title": "Class Symbol | Automata Docs",
    "keywords": "Class Symbol Symbol in the Alang language used for defining finite-state automata. Inheritance object AlangRegex Symbol Inherited Members AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Symbol : AlangRegex Remarks A Symbol is a atomic unit in the Alang language, consisting of one or more characters that are not operators or whitespace. They are present as leaf nodes in the resulting AST (abstract syntax tree). Constructors | Edit this page View Source Symbol(string) Initializes a new instance of the Symbol class with the specified symbol. Declaration public Symbol(string symbol) Parameters Type Name Description string symbol String representing this Symbol. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence | Edit this page View Source Value String value for this Symbol. Declaration public string Value { get; } Property Value Type Description string"
  },
  "Automata.Core.Alang.UnaryRegex.html": {
    "href": "Automata.Core.Alang.UnaryRegex.html",
    "title": "Class UnaryRegex | Automata Docs",
    "keywords": "Class UnaryRegex Unary expression in the Alang language. Inheritance object AlangRegex UnaryRegex Complement KleenePlus KleeneStar Option Inherited Members AlangRegex.Precedence AlangRegex.AlangExpressionString AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class UnaryRegex : AlangRegex Remarks Base class for all postfix unary operations in Alang expressions, such as option (?), Kleene star (*), Kleene plus (+), and complement (~). Constructors | Edit this page View Source UnaryRegex(AlangRegex) Unary expression in the Alang language. Declaration protected UnaryRegex(AlangRegex operand) Parameters Type Name Description AlangRegex operand Operand of the postfix unary expression. Remarks Base class for all postfix unary operations in Alang expressions, such as option (?), Kleene star (*), Kleene plus (+), and complement (~). Properties | Edit this page View Source Operand Operand of the postfix unary expression. Declaration public AlangRegex Operand { get; } Property Value Type Description AlangRegex"
  },
  "Automata.Core.Alang.Union.html": {
    "href": "Automata.Core.Alang.Union.html",
    "title": "Class Union | Automata Docs",
    "keywords": "Class Union Inheritance object AlangRegex BinaryRegex Union Inherited Members BinaryRegex.Left BinaryRegex.Right AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Union : BinaryRegex Constructors | Edit this page View Source Union(AlangRegex, AlangRegex) Declaration public Union(AlangRegex left, AlangRegex right) Parameters Type Name Description AlangRegex left AlangRegex right Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.Wildcard.html": {
    "href": "Automata.Core.Alang.Wildcard.html",
    "title": "Class Wildcard | Automata Docs",
    "keywords": "Class Wildcard Represents a wildcard expression in the Alang (Automata language). Inheritance object AlangRegex Wildcard Inherited Members AlangRegex.IsEmptyString AlangRegex.Parse(string) AlangRegex.Compile(string) AlangRegex.Compile(string, params string[]) AlangRegex.Compile(Alphabet) AlangRegex.Compile() AlangRegex.Compile(params string[]) AlangRegex.Param(AlangRegex, AlangRegex) AlangRegex.ToString() AlangRegex.DescendantsAndSelf() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Wildcard : AlangRegex Remarks A wildcard that matches any Symbol. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string A string representing the expression in Alang syntax. Overrides AlangRegex.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to the Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int An integer representing the precedence level of the expression. Overrides AlangRegex.Precedence"
  },
  "Automata.Core.Alang.html": {
    "href": "Automata.Core.Alang.html",
    "title": "Namespace Automata.Core.Alang | Automata Docs",
    "keywords": "Namespace Automata.Core.Alang Classes AlangFormatException Represents an exception thrown when an error occurs during parsing of Alang expressions. AlangRegex Represents an expression in the Alang (Automata language) used for defining finite-state automata. AlangRegex has a one-to-one correspondence with Finite State Automata. BinaryRegex Represents a binary infix expression in the Alang language. Chars Character definitions and utility methods for Alang. Complement Represents a complement expression in the Alang language. Concatenation Represents a concatenation operation in the Alang grammar. Difference Represents a difference expression in the Alang grammar. EmptyLang Represents the empty language (∅) in Alang (Automata language). Intersection Represents an intersection expression in the Alang grammar specification. KleenePlus Represents a Kleene plus unary expression in the Alang language. KleeneStar Represents a Kleene star operation in the Alang language. Option Represents an option expression in the Alang language. Symbol Symbol in the Alang language used for defining finite-state automata. UnaryRegex Unary expression in the Alang language. Union Wildcard Represents a wildcard expression in the Alang (Automata language). Structs AlangCursor Represents a cursor for parsing Alang regex strings. Enums ParseErrorReason Reason for parsing errors in Alang expressions. Specifies the reason for a AlangFormatException."
  },
  "Automata.Core.Alphabet.html": {
    "href": "Automata.Core.Alphabet.html",
    "title": "Class Alphabet | Automata Docs",
    "keywords": "Class Alphabet An alphabet associated with a finite state automaton. Inheritance object Alphabet Implements IEquatable<Alphabet> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Alphabet : IEquatable<Alphabet> Remarks An Alphabet is a collection of symbols used by a finite state automaton. It can be extended with new symbols, but symbols cannot be removed. This enables multiple automata to share the same alphabet. Furthermore, automata never needs to deals with strings, but can use integer indices instead for all operations. Default behavior for operations that create new automata is to use the existing alphabet of the input automata. If a new alphabet is needed, an explicit creation of a new alphabet is typically required. Constructors | Edit this page View Source Alphabet() Initializes a new empty instance of the Alphabet class. Declaration public Alphabet() | Edit this page View Source Alphabet(Alphabet) Initializes a new cloned instance of the Alphabet class from the specified alphabet. Declaration public Alphabet(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet to initialize the alphabet with. | Edit this page View Source Alphabet(IEnumerable<string>) Initializes a new instance of the Alphabet class with the specified symbols. Declaration public Alphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols Symbols to initialize the alphabet with. | Edit this page View Source Alphabet(params string[]) Initializes a new instance of the Alphabet class with the specified symbols. Symbols to initialize the alphabet with. Declaration public Alphabet(params string[] symbols) Parameters Type Name Description string[] symbols Properties | Edit this page View Source Count Number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index Index of the symbol to get. Property Value Type Description string Symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol Symbol whose index to get. Property Value Type Description int Index of the specified symbol, or InvalidSymbolIndex if not found. | Edit this page View Source SymbolIndices Returns an enumerable collection of indices of the symbols in the alphabet. This is effectively the integers in range [0 .. Count). Declaration public IEnumerable<int> SymbolIndices { get; } Property Value Type Description IEnumerable<int> | Edit this page View Source Symbols Readonly collection of symbols in the alphabet. Declaration public IReadOnlyCollection<string> Symbols { get; } Property Value Type Description IReadOnlyCollection<string> Methods | Edit this page View Source AddAll(IEnumerable<string>) Adds all the specified symbols to the alphabet that are not already present. Declaration public void AddAll(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols Symbols to add. | Edit this page View Source Contains(string) Indicates whether the alphabet contains the specified symbol. Declaration public bool Contains(string symbol) Parameters Type Name Description string symbol Symbol to locate in the alphabet. Returns Type Description bool true iff the symbol is found; otherwise, false. | Edit this page View Source Equals(Alphabet?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Alphabet? other) Parameters Type Name Description Alphabet other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source GetOrAdd(string) Index of the specified symbol or adds it if it does not exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol Symbol to get or add. Returns Type Description int Index of the specified symbol. | Edit this page View Source ToString() String that represents the current alphabet, including its size. Declaration public override string ToString() Returns Type Description string A string representation of the alphabet. Overrides object.ToString() | Edit this page View Source ToStringExpanded() String with each symbol and its index, separated by a newline. Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. | Edit this page View Source TryGetIndex(string, out int) Tries to get the index of the specified symbol. Declaration public bool TryGetIndex(string symbol, out int index) Parameters Type Name Description string symbol Symbol whose index to get. int index When this method returns, contains the index of the specified symbol, if the symbol is found; otherwise, -1. Returns Type Description bool true iff the symbol is found; otherwise, false. | Edit this page View Source UnionWith(Alphabet) Add another alphabet to the current alphabet. Declaration public Dictionary<int, int> UnionWith(Alphabet other) Parameters Type Name Description Alphabet other The other alphabet to merge into this. Returns Type Description Dictionary<int, int> A dictionary mapping indices from the other alphabet to the current alphabet. Operators | Edit this page View Source operator ==(Alphabet, Alphabet) Declaration public static bool operator ==(Alphabet left, Alphabet right) Parameters Type Name Description Alphabet left Alphabet right Returns Type Description bool | Edit this page View Source operator !=(Alphabet, Alphabet) Declaration public static bool operator !=(Alphabet left, Alphabet right) Parameters Type Name Description Alphabet left Alphabet right Returns Type Description bool Implements IEquatable<T>"
  },
  "Automata.Core.Constants.html": {
    "href": "Automata.Core.Constants.html",
    "title": "Class Constants | Automata Docs",
    "keywords": "Class Constants Class representing automata related constants. Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public static class Constants Fields | Edit this page View Source InvalidState Denotes an invalid state. Declaration public const int InvalidState = -1 Field Value Type Description int -1 indicating an invalid state. | Edit this page View Source InvalidSymbolIndex Denotes an invalid symbol. Declaration public const int InvalidSymbolIndex = -1 Field Value Type Description int -1 indicating an invalid symbol index."
  },
  "Automata.Core.Converter.html": {
    "href": "Automata.Core.Converter.html",
    "title": "Class Converter | Automata Docs",
    "keywords": "Class Converter Static class for conversion between different types of finite state automata. Inheritance object Converter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public static class Converter Methods | Edit this page View Source AsDeterministic(Fsa) Returns fsa as a deterministic automaton (FsaDet). Return the same instance if it already is of the desired type. Otherwise, a new object of the desired type is created. Declaration public static FsaDet AsDeterministic(this Fsa fsa) Parameters Type Name Description Fsa fsa Finite state automaton to convert. Returns Type Description FsaDet fsa as a FsaDet. Remarks Effective conversion: NFA → DFA, DFA → DFA, MFA → MFA. | Edit this page View Source AsMfa(Fsa) Returns fsa as a Mfa. Return the same instance if it already is of the desired type. Otherwise, a new object of the desired type is created. Declaration public static Mfa AsMfa(this Fsa fsa) Parameters Type Name Description Fsa fsa Finite state automaton to convert. Returns Type Description Mfa fsa as a Mfa. | Edit this page View Source AsNfa(Fsa) Returns fsa as a Nfa. Return the same instance if it already is of the desired type. Otherwise, a new object of the desired type is created. Declaration public static Nfa AsNfa(this Fsa fsa) Parameters Type Name Description Fsa fsa Finite state automaton to convert. Returns Type Description Nfa fsa as a Nfa."
  },
  "Automata.Core.Dfa.html": {
    "href": "Automata.Core.Dfa.html",
    "title": "Class Dfa | Automata Docs",
    "keywords": "Class Dfa Deterministic finite automaton (DFA). Inheritance object Fsa FsaDet Dfa Inherited Members FsaDet.IsEpsilonFree FsaDet.AcceptsEpsilon FsaDet.HasInitialState FsaDet.IsInitial(int) FsaDet.TryTransition(int, int, out int) FsaDet.EpsilonTransitions() FsaDet.Accepts(IEnumerable<string>) Fsa.Alphabet object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Dfa : FsaDet Remarks A DFA is a finite state machine that accepts or rejects finite sequences of symbols. · A DFA cannot contain epsilon transitions · Any mutation of a DFA is guaranteed to preserve its deterministic property. · Mutation can make certain states unreachable (contain Dead states). Constructors | Edit this page View Source Dfa(Alphabet) Initializes a new instance of the Dfa class with the specified alphabet. Declaration public Dfa(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet used by the DFA. Properties | Edit this page View Source FinalStates Final states of the DFA. Declaration public override IReadOnlyCollection<int> FinalStates { get; } Property Value Type Description IReadOnlyCollection<int> Overrides Fsa.FinalStates | Edit this page View Source InitialState Initial state of the DFA. Declaration public override int InitialState { get; } Property Value Type Description int Overrides FsaDet.InitialState Remarks Returns InvalidState if the DFA has no initial state. | Edit this page View Source MaxState Upper limit for the maximum state number in the DFA. A value (MaxState + 1) is guaranteed to be an unused state number. Declaration public override int MaxState { get; } Property Value Type Description int Overrides FsaDet.MaxState Remarks This value represents an upper limit for state numbers in the DFA. The actual maximum state number may be lower, as removed states are not tracked for performance reasons. | Edit this page View Source TransitionCount Number of transitions in the automaton. Declaration public override int TransitionCount { get; } Property Value Type Description int Overrides FsaDet.TransitionCount Methods | Edit this page View Source Add(Transition) Adds a transition to the DFA, ensuring it remains deterministic. Declaration public bool Add(Transition transition) Parameters Type Name Description Transition transition Transition to add. Returns Type Description bool true iff the transition was added. Remarks If adding the transition would introduce nondeterminism (i.e., a transition with the same from-state and symbol already exists), the new transition will not be added. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public override bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. Overrides Fsa.IsFinal(int) | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state State to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(int) Sets the initial state of the DFA, updating the maximum state number if necessary. Declaration public void SetInitial(int state) Parameters Type Name Description int state State to set as the initial state. | Edit this page View Source State(int) Returns a view of the specified state. Declaration public override StateView State(int fromState) Parameters Type Name Description int fromState The state origin. Returns Type Description StateView A StateView for the given state. Overrides FsaDet.State(int) | Edit this page View Source ToCanonicalString() Returns a canonical string representation of the DFA's data. Used by unit tests and for debugging. Declaration public override string ToCanonicalString() Returns Type Description string Overrides Fsa.ToCanonicalString() | Edit this page View Source Transition(int, int) Returns the state reachable from the given state on the given symbol. Declaration public override int Transition(int fromState, int symbol) Parameters Type Name Description int fromState The state origin of the transition. int symbol Symbol for the transition. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. Overrides FsaDet.Transition(int, int) See Also TryTransition(int, int, out int) | Edit this page View Source Transitions() Gets the transitions of the DFA. Declaration public override IReadOnlyCollection<Transition> Transitions() Returns Type Description IReadOnlyCollection<Transition> An collection of transitions. Overrides Fsa.Transitions() | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds all provided transitions that are currently not present in the set. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions Transitions to add. Extension Methods Converter.AsDeterministic(Fsa) Converter.AsMfa(Fsa) Converter.AsNfa(Fsa) Ops.Difference(FsaDet, Mfa) Ops.Intersection(FsaDet, FsaDet) Ops.Overlaps(FsaDet, FsaDet) Ops.Reversal(FsaDet)"
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | Automata Docs",
    "keywords": "Struct EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. Implements IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct EpsilonTransition : IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Remarks An epsilon transition is a transition that lacks a symbol. Epsilon transitions can only exist in non-deterministic finite automata (NFA). Constructors | Edit this page View Source EpsilonTransition(int, int) Initializes a new instance of the EpsilonTransition struct. Declaration public EpsilonTransition(int fromState, int toState) Parameters Type Name Description int fromState The state origin of the transition. int toState The destination state of the transition. Exceptions Type Condition ArgumentException Thrown if any of arguments has a negative value. Fields | Edit this page View Source Epsilon String representation for ε - the empty epsilon string. Epsilon is not part of any alphabet; the symbol is used solely for output purposes, never for computation. Declaration public const string Epsilon = \"ε\" Field Value Type Description string Properties | Edit this page View Source FromState The state origin of the transition. Declaration public int FromState { get; } Property Value Type Description int | Edit this page View Source ToState The destination state of the transition. Declaration public int ToState { get; } Property Value Type Description int Methods | Edit this page View Source CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. Declaration public int CompareTo(EpsilonTransition other) Parameters Type Name Description EpsilonTransition other Other epsilon transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the epsilon transition. Declaration public EpsilonTransition Reverse() Returns Type Description EpsilonTransition A new EpsilonTransition with the from and to states swapped. | Edit this page View Source ToString() String that represents the current transition. Declaration public override string ToString() Returns Type Description string A string that represents the current transition. Overrides ValueType.ToString() Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.Fsa.html": {
    "href": "Automata.Core.Fsa.html",
    "title": "Class Fsa | Automata Docs",
    "keywords": "Class Fsa Finite state automaton (FSA) interface. Inheritance object Fsa FsaDet Nfa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public abstract class Fsa Constructors | Edit this page View Source Fsa(Alphabet) Initializes a new instance with the specified alphabet. Declaration public Fsa(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet used by the automaton. Properties | Edit this page View Source AcceptsEpsilon Indicates whether the FSA accepts ϵ - the empty sting . Declaration public abstract bool AcceptsEpsilon { get; } Property Value Type Description bool | Edit this page View Source Alphabet Alphabet used by the FSA. Declaration public Alphabet Alphabet { get; } Property Value Type Description Alphabet | Edit this page View Source FinalStates Final states of the FSA. Declaration public abstract IReadOnlyCollection<int> FinalStates { get; } Property Value Type Description IReadOnlyCollection<int> | Edit this page View Source HasInitialState Indicates whether the FSA has an initial state. Declaration public abstract bool HasInitialState { get; } Property Value Type Description bool true iff the FSA has at least one initial state. | Edit this page View Source IsEpsilonFree Indicates whether the FSA is epsilon-free (lacks epsilon transitions). Declaration public abstract bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source EpsilonTransitions() Epsilon transitions of the FSA. Declaration public abstract IReadOnlyCollection<EpsilonTransition> EpsilonTransitions() Returns Type Description IReadOnlyCollection<EpsilonTransition> An enumerable collection of EpsilonTransition. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public abstract bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public abstract bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is an initial state. | Edit this page View Source ToCanonicalString() Declaration public abstract string ToCanonicalString() Returns Type Description string | Edit this page View Source Transitions() Transitions of the FSA. Declaration public abstract IReadOnlyCollection<Transition> Transitions() Returns Type Description IReadOnlyCollection<Transition> An enumerable collection of Transition. Extension Methods Converter.AsDeterministic(Fsa) Converter.AsMfa(Fsa) Converter.AsNfa(Fsa)"
  },
  "Automata.Core.FsaDet.html": {
    "href": "Automata.Core.FsaDet.html",
    "title": "Class FsaDet | Automata Docs",
    "keywords": "Class FsaDet Common interface for deterministic automata, such as Dfa and Mfa. Inheritance object Fsa FsaDet Dfa Mfa Inherited Members Fsa.Alphabet Fsa.FinalStates Fsa.IsFinal(int) Fsa.Transitions() Fsa.ToCanonicalString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public abstract class FsaDet : Fsa Constructors | Edit this page View Source FsaDet(Alphabet) Initializes a new instance with the specified alphabet. Declaration public FsaDet(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet used by the automaton. Properties | Edit this page View Source AcceptsEpsilon Indicates whether the automaton accepts ϵ - the empty sting. Returns trueiff an InitialState exists and it is also a final state. Declaration public override bool AcceptsEpsilon { get; } Property Value Type Description bool Overrides Fsa.AcceptsEpsilon | Edit this page View Source HasInitialState Indicates whether the automaton has an initial state. Declaration public override bool HasInitialState { get; } Property Value Type Description bool true iff MFA has an initial state. Overrides Fsa.HasInitialState | Edit this page View Source InitialState Initial state of the deterministic automaton. Declaration public abstract int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEpsilonFree Indicates whether the MFA is epsilon-free. Always returns true. Declaration public override bool IsEpsilonFree { get; } Property Value Type Description bool Overrides Fsa.IsEpsilonFree | Edit this page View Source MaxState Upper limit for the maximum state number in the DFA. A value (MaxState + 1) is guaranteed to be an unused state number. Declaration public abstract int MaxState { get; } Property Value Type Description int | Edit this page View Source TransitionCount Number of transitions in the automaton. Declaration public abstract int TransitionCount { get; } Property Value Type Description int Methods | Edit this page View Source Accepts(IEnumerable<string>) Indicates whether the DFA accepts the given sequence of symbols. Declaration public bool Accepts(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence Sequence of symbols to check. Returns Type Description bool true iff the DFA accepts the sequence. Remarks The DFA processes each symbol in the sequence, transitioning between states according to its transition function. If the DFA reaches a final state after processing all symbols, the sequence is accepted. | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the MFA, which is always empty. Declaration public override IReadOnlyCollection<EpsilonTransition> EpsilonTransitions() Returns Type Description IReadOnlyCollection<EpsilonTransition> An empty collection of EpsilonTransition. Overrides Fsa.EpsilonTransitions() | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public override bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is the initial state. Overrides Fsa.IsInitial(int) | Edit this page View Source State(int) Returns a readonly view of the specified state. Declaration public abstract StateView State(int fromState) Parameters Type Name Description int fromState State from which to get the state view. Returns Type Description StateView A StateView representing the state view from the specified state. | Edit this page View Source Transition(int, int) Returns the state reachable from the given state on the given symbol. Declaration public abstract int Transition(int fromState, int symbol) Parameters Type Name Description int fromState The state origin of the transition. int symbol Symbol for the transition. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. See Also TryTransition(int, int, out int) | Edit this page View Source TryTransition(int, int, out int) Tries to get the state reachable from the given state on the given symbol. Declaration public bool TryTransition(int fromState, int symbol, out int toState) Parameters Type Name Description int fromState The state origin of the transition. int symbol Symbol for the transition. int toState The reachable state, or InvalidState if no state is reachable. Returns Type Description bool true iff a reachable state exists. See Also Transition(int, int) Extension Methods Converter.AsDeterministic(Fsa) Converter.AsMfa(Fsa) Converter.AsNfa(Fsa) Ops.Difference(FsaDet, Mfa) Ops.Intersection(FsaDet, FsaDet) Ops.Overlaps(FsaDet, FsaDet) Ops.Reversal(FsaDet)"
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | Automata Docs",
    "keywords": "Class IntSet Immutable set of integers. Inheritance object IntSet Implements IEquatable<IntSet> IReadOnlySet<int> IReadOnlyCollection<int> IEnumerable<int> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class IntSet : IEquatable<IntSet>, IReadOnlySet<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable Constructors | Edit this page View Source IntSet(HashSet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(HashSet<int> elements) Parameters Type Name Description HashSet<int> elements Elements to include in the set. | Edit this page View Source IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(IEnumerable<int> elements) Parameters Type Name Description IEnumerable<int> elements Elements to include in the set. | Edit this page View Source IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(ISet<int> elements) Parameters Type Name Description ISet<int> elements Elements to include in the set. Properties | Edit this page View Source Count Number of elements in the set. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Contains(int) Determines if the set contains a specific item. Declaration public bool Contains(int item) Parameters Type Name Description int item The item to check if the set contains. Returns Type Description bool true if found; otherwise false. | Edit this page View Source Equals(IntSet?) Indicates whether the current set is equal to another set. Declaration public bool Equals(IntSet? other) Parameters Type Name Description IntSet other Other set to compare to. Returns Type Description bool true iff the sets are equal. | Edit this page View Source Equals(object?) Indicates whether the current set is equal to another object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Object to compare to. Returns Type Description bool true iff the object is an IntSet and the sets are equal. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator<int> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Hash code for the current set. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current set. Overrides object.GetHashCode() | Edit this page View Source IsProperSubsetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsProperSupersetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the collection is a proper superset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSubsetOf(IEnumerable<int>) Determine whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSupersetOf(IEnumerable<int>) Determine whether the current set is a super set of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source Overlaps(IEnumerable<int>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool trueif the current set and other share at least one common element; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source SetEquals(IEnumerable<int>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source ToString() String that represents the current set. Declaration public override string ToString() Returns Type Description string A string that represents the current set. Overrides object.ToString() Implements IEquatable<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.Mfa.html": {
    "href": "Automata.Core.Mfa.html",
    "title": "Class Mfa | Automata Docs",
    "keywords": "Class Mfa Minimal Finite-state Automaton (MFA). Inheritance object Fsa FsaDet Mfa Implements IEquatable<Mfa> Inherited Members FsaDet.IsEpsilonFree FsaDet.AcceptsEpsilon FsaDet.HasInitialState FsaDet.IsInitial(int) FsaDet.TryTransition(int, int, out int) FsaDet.EpsilonTransitions() FsaDet.Accepts(IEnumerable<string>) Fsa.Alphabet object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Mfa : FsaDet, IEquatable<Mfa> Remarks Mfa is the most optimized automaton representation, characterized by: Deterministic and Minimal: The least possible states and transitions. Minimal memory footprint: Uses a contiguous memory block for data, with minimal overhead. Performance-optimized for efficient readonly operations. Immutable: Guarantees structural and behavioral invariance. Contiguous states: States are in range [0..MaxState]. Initial state is always 0 for a non-empty Mfa. Canonical topology: States and transitions are canonically ordered. Two Mfas recognizing the same language are guaranteed to be identical. Constructors | Edit this page View Source Mfa(Dfa) Initializes a new instance of the Mfa class from an existing Dfa. Declaration public Mfa(Dfa dfa) Parameters Type Name Description Dfa dfa A DFA to create from. | Edit this page View Source Mfa(string, Alphabet) Creates a singleton Mfa that accepts only the single symbol once. Declaration public Mfa(string singleSymbol, Alphabet alphabet) Parameters Type Name Description string singleSymbol Symbol to be accepted by the MFA. Alphabet alphabet Alphabet used by the MFA. Properties | Edit this page View Source FinalStates Final states of the MFA. Declaration public override IReadOnlyCollection<int> FinalStates { get; } Property Value Type Description IReadOnlyCollection<int> Overrides Fsa.FinalStates | Edit this page View Source InitialState Initial state. Always 0 for a non-empty Mfa. For an empty Mfa, the initial state is InvalidState. Declaration public override int InitialState { get; } Property Value Type Description int Overrides FsaDet.InitialState Remarks An MFA without an initial state is completely empty (= IsEmptyLanguage). | Edit this page View Source IsEmptyLanguage Indicates whether the language of the MFA is the empty language (∅). This means the MFA does not accept anything, including the empty string (ϵ). Declaration public bool IsEmptyLanguage { get; } Property Value Type Description bool Remarks Returns true only if either; the MFA has no states, or the initial state is not a final state. | Edit this page View Source MaxState The state number with the highest value. Declaration public override int MaxState { get; } Property Value Type Description int The maximum state number, or InvalidState (= -1) if the MFA is empty (has no states). Overrides FsaDet.MaxState | Edit this page View Source StateCount Number of states in the MFA. Declaration public int StateCount { get; } Property Value Type Description int | Edit this page View Source TransitionCount Number of transitions in the automaton. Declaration public override int TransitionCount { get; } Property Value Type Description int Overrides FsaDet.TransitionCount Methods | Edit this page View Source CreateEmpty(Alphabet) Creates a Mfa that represents the empty language (∅), with a specified alphabet. The MFA has zero states and zero transitions. Declaration public static Mfa CreateEmpty(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet used by the MFA. Returns Type Description Mfa | Edit this page View Source CreateWildcard(Alphabet) Returns an automaton that accepts one occurrence of any symbol in the specified alphabet. It corresponds directly to the \".\" in Alang expressions. Declaration public static Mfa CreateWildcard(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Returns Type Description Mfa An automaton representing any symbol accepted exactly once. | Edit this page View Source Equals(Mfa?) Indicates whether this MFA is equal to the specified MFA. Declaration public bool Equals(Mfa? other) Parameters Type Name Description Mfa other MFA to compare with. Returns Type Description bool true iff the current Mfa is equal to other. Remarks This method is similar to LanguageEquals(Mfa) but is stricter: It also requires the alphabets of both MFAs to be equal (not just the referenced symbols). See Also LanguageEquals(Mfa) | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Hash code for the current MFA. Declaration public override int GetHashCode() Returns Type Description int A hash code for the MFA. Overrides object.GetHashCode() | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public override bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. Overrides Fsa.IsFinal(int) | Edit this page View Source LanguageEquals(Mfa) Indicates whether this MFA represent the exact same language as the specified MFA: Language Equality. Declaration public bool LanguageEquals(Mfa other) Parameters Type Name Description Mfa other MFA to check language equality against. Returns Type Description bool true iff the current Mfa represents the same language asother. Remarks Language Equality means both MFAs represent the same language. Due to the canonical property, Language Equality also means the MFAs are completely identical (identical states, and identical transition arrays). The alphabets need however not need to be equal, but every referenced symbol must have the same index in both alphabets. | Edit this page View Source State(int) Returns a view of the specified state. Declaration public override StateView State(int state) Parameters Type Name Description int state Returns Type Description StateView A StateView for the given state. Overrides FsaDet.State(int) | Edit this page View Source ToCanonicalString() Returns a canonical string representation of the MFA's data. Used by unit tests and for debugging. Declaration public override string ToCanonicalString() Returns Type Description string Overrides Fsa.ToCanonicalString() Examples Canonical string for a 2-state MFA, with 2 states, 2 transitions and 1 final state, that accepts the language {a | b}: S#=2, F#=1: [1]: T#=2: [0->1 a, 0->1 b] | Edit this page View Source Transition(int, int) Returns the state reachable from the given state on the given symbol. Declaration public override int Transition(int fromState, int symbol) Parameters Type Name Description int fromState The state origin of the transition. int symbol Symbol for the transition. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. Overrides FsaDet.Transition(int, int) See Also TryTransition(int, int, out int) | Edit this page View Source Transitions() Gets the transitions of the MFA. Declaration public override IReadOnlyCollection<Transition> Transitions() Returns Type Description IReadOnlyCollection<Transition> An collection of transitions. Overrides Fsa.Transitions() Operators | Edit this page View Source operator ==(Mfa, Mfa) Indicates whether two specified instances of Mfa are equal. Declaration public static bool operator ==(Mfa left, Mfa right) Parameters Type Name Description Mfa left First Mfa to compare. Mfa right Second Mfa to compare. Returns Type Description bool true iff the two Mfa instances are equal. | Edit this page View Source operator !=(Mfa, Mfa) Indicates whether two specified instances of Mfa are not equal. Declaration public static bool operator !=(Mfa left, Mfa right) Parameters Type Name Description Mfa left First Mfa to compare. Mfa right Second Mfa to compare. Returns Type Description bool false iff the two Mfa instances are not equal. Implements IEquatable<T> Extension Methods Converter.AsDeterministic(Fsa) Converter.AsMfa(Fsa) Converter.AsNfa(Fsa) Ops.Difference(FsaDet, Mfa) Ops.Intersection(FsaDet, FsaDet) Ops.Overlaps(FsaDet, FsaDet) Ops.Reversal(FsaDet) Ops.Complement(Mfa)"
  },
  "Automata.Core.Nfa.html": {
    "href": "Automata.Core.Nfa.html",
    "title": "Class Nfa | Automata Docs",
    "keywords": "Class Nfa Nondeterministic finite automaton (NFA). Inheritance object Fsa Nfa Inherited Members Fsa.Alphabet object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Nfa : Fsa Remarks States are represented simply as integers (int), which essentially are just unique IDs. NFAs are defined mainly by two sets of transitions (symbolic and epsilon), which are kept separate for performance. In addition, there are two sets defining the initial states and final states respectively. NFAs (in contrast to DFAs) can have multiple initial states. Constructors | Edit this page View Source Nfa(Alphabet) Initializes a new empty instance of the Nfa. Declaration public Nfa(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet Alphabet to use for the NFA. | Edit this page View Source Nfa(Nfa) Initializes a new clone of given Nfa with a new cloned alphabet. Declaration public Nfa(Nfa nfa) Parameters Type Name Description Nfa nfa NFA to clone. | Edit this page View Source Nfa(IEnumerable<IEnumerable<string>>) Initializes a new instance of a Nfa class to accept a set of sequences. Declaration public Nfa(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Sequences to add to the NFA. Properties | Edit this page View Source AcceptsEpsilon Indicates whether the NFA accepts ϵ - the empty sting. Declaration public override bool AcceptsEpsilon { get; } Property Value Type Description bool Overrides Fsa.AcceptsEpsilon Remarks Returns trueiff the NFA has a final state that is either an initial state or can be reached from an initial state on only epsilon transitions. | Edit this page View Source FinalStates Final states of the NFA. Declaration public override IReadOnlyCollection<int> FinalStates { get; } Property Value Type Description IReadOnlyCollection<int> Overrides Fsa.FinalStates | Edit this page View Source HasInitialState Indicates whether the NFA has any initial states. Declaration public override bool HasInitialState { get; } Property Value Type Description bool true iff the NFA has at least one initial state. Overrides Fsa.HasInitialState | Edit this page View Source InitialStates Initial states of the NFA. Declaration public IReadOnlySet<int> InitialStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source IsEpsilonFree Indicates whether the NFA is epsilon-free. Declaration public override bool IsEpsilonFree { get; } Property Value Type Description bool Overrides Fsa.IsEpsilonFree | Edit this page View Source MaxState Upper bound for the maximum state number in the NFA. Declaration public int MaxState { get; } Property Value Type Description int Remarks This values denotes an upper bound for the state numbers in the NFA. The actual maximum state number may be lower (but not higher), since we do not keep track of removed states for performance reasons. Methods | Edit this page View Source Add(EpsilonTransition) Adds an epsilon transition to the NFA. Declaration public void Add(EpsilonTransition transition) Parameters Type Name Description EpsilonTransition transition Transition to add. | Edit this page View Source Add(Transition) Adds a symbolic (non-epsilon) transition to the NFA. Declaration public void Add(Transition transition) Parameters Type Name Description Transition transition Transition to add. | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns the set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates States from which to start. Returns Type Description IntSet Set of symbols that can be used to transition directly from the given states. | Edit this page View Source ClearAll() Clears all states and transitions. The resulting NFA will be equivalent to the empty language (∅). Declaration public void ClearAll() Remarks The alphabet is not cleared. | Edit this page View Source ClearFinalStates() Clears all final states. Declaration public void ClearFinalStates() | Edit this page View Source ClearInitialStates() Clears all initial states. Declaration public void ClearInitialStates() | Edit this page View Source EpsilonTransitions() Epsilon transitions of the DFA, which is always empty. Declaration public override IReadOnlyCollection<EpsilonTransition> EpsilonTransitions() Returns Type Description IReadOnlyCollection<EpsilonTransition> A collection of EpsilonTransition. Overrides Fsa.EpsilonTransitions() | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public override bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state; otherwise, false. Overrides Fsa.IsFinal(int) | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public override bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is an initial state; otherwise, false. Overrides Fsa.IsInitial(int) | Edit this page View Source ReachableStates(IEnumerable<int>, int) Returns the states reachable from the given states on the given symbol, including epsilon closures. Declaration public IntSet ReachableStates(IEnumerable<int> fromStates, int symbol) Parameters Type Name Description IEnumerable<int> fromStates States from which to start. int symbol Symbol to transition on. Returns Type Description IntSet States reachable from the given states on the given symbol, including epsilon closures. | Edit this page View Source ReachableStatesOnEpsilonInPlace(HashSet<int>) Extends the provided set of states with their epsilon closure in place. Declaration public void ReachableStatesOnEpsilonInPlace(HashSet<int> fromStates) Parameters Type Name Description HashSet<int> fromStates Set of states to extend. Remarks Epsilon closure is all reachable states on epsilon transitions. | Edit this page View Source ReachableStatesOnSingleEpsilon(int) Returns the states reachable from the given state on a single epsilon transition. If the input state has an epsilon loop on itself, it will be included in the result. Declaration public IEnumerable<int> ReachableStatesOnSingleEpsilon(int fromState) Parameters Type Name Description int fromState State from which to start. Returns Type Description IEnumerable<int> States reachable from the given state on a single epsilon transition. | Edit this page View Source ReachableStatesOnSingleSymbol(int, int) Returns the states reachable from the given state with the given symbol. Declaration public IEnumerable<int> ReachableStatesOnSingleSymbol(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description IEnumerable<int> States reachable from the given state on the given symbol. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state State to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. Declaration public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as initial states. bool initial If true, the states are added to the initial states; otherwise, they are removed. | Edit this page View Source SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. Declaration public void SetInitial(int state, bool initial = true) Parameters Type Name Description int state State to set or remove as an initial state. bool initial If true, the state is added to the initial states; otherwise, it is removed. | Edit this page View Source ToCanonicalString() Returns a canonical string representation of the DFA's data. Used by unit tests and for debugging. Declaration public override string ToCanonicalString() Returns Type Description string Overrides Fsa.ToCanonicalString() | Edit this page View Source Transitions() Transitions of the DFA. Declaration public override IReadOnlyCollection<Transition> Transitions() Returns Type Description IReadOnlyCollection<Transition> A collection of transitions. Overrides Fsa.Transitions() | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState State from which to start. Returns Type Description SortedSet<Transition> Set of transitions from the given state. | Edit this page View Source Transitions(int, int) Returns the transitions from the given state with the given symbol. Declaration public SortedSet<Transition> Transitions(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description SortedSet<Transition> Transitions from the given state on the given symbol. | Edit this page View Source UnionWith(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. Declaration public void UnionWith(IEnumerable<EpsilonTransition> transitions) Parameters Type Name Description IEnumerable<EpsilonTransition> transitions Transitions to add. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds multiple symbolic transitions to the NFA. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions Transitions to add. | Edit this page View Source UnionWith(IEnumerable<IEnumerable<string>>) Adds a set of sequences to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source UnionWith(IEnumerable<string>) Adds a sequence of symbols to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence Sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. Extension Methods Converter.AsDeterministic(Fsa) Converter.AsMfa(Fsa) Converter.AsNfa(Fsa) Ops.Append(Nfa, FsaDet) Ops.KleenePlusWith(Nfa) Ops.KleeneStarWith(Nfa) Ops.OptionWith(Nfa) Ops.UnionWith(Nfa, FsaDet)"
  },
  "Automata.Core.Operations.Ops.html": {
    "href": "Automata.Core.Operations.Ops.html",
    "title": "Class Ops | Automata Docs",
    "keywords": "Class Ops Provides operations for finite automata. Inheritance object Ops Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Operations Assembly: Automata.Core.dll Syntax public static class Ops Methods | Edit this page View Source Append(Nfa, FsaDet) Appends another automaton to the source automaton (in-place concatenation). Declaration public static Nfa Append(this Nfa source, FsaDet right) Parameters Type Name Description Nfa source Source automaton to append to. FsaDet right Automaton to append. Returns Type Description Nfa Source automaton source Remarks This operation mutates source. Resulting alphabet of source will be the union of both alphabets, irrespective of whether all symbols were referenced by right. | Edit this page View Source Complement(Mfa) Complement of a given MFA. Declaration public static Dfa Complement(this Mfa mfa) Parameters Type Name Description Mfa mfa A Mfa to complement. Returns Type Description Dfa A new deterministic finite automaton (DFA) representing the complement of the input MFA. | Edit this page View Source Concatenation(Fsa, FsaDet) Concatenates two finite state automata. Declaration public static FsaDet Concatenation(Fsa left, FsaDet right) Parameters Type Name Description Fsa left The left finite state automaton. FsaDet right The right finite automaton. Returns Type Description FsaDet A new deterministic finite automaton representing a concatenation of the two automata. Remarks Creates a new automaton. For optimal performance, use Append(Nfa, FsaDet) when possible to reduce overhead. Resulting alphabet of source will be the union of both alphabets, irrespective of whether all symbols were referenced by right. | Edit this page View Source Difference(FsaDet, Mfa) Computes the difference between two deterministic finite automata. Declaration public static FsaDet Difference(this FsaDet minuend, Mfa subtrahend) Parameters Type Name Description FsaDet minuend The automaton from which to subtract. Mfa subtrahend The automaton whose language will be subtracted from the minuend. Returns Type Description FsaDet A new FsaDet representing the language of the minuend except the language of the subtrahend. | Edit this page View Source Intersection(FsaDet, FsaDet) Intersection of two deterministic finite automata. The resulting automaton accepts only the strings that are accepted by both input automata. Declaration public static Mfa Intersection(this FsaDet a, FsaDet b) Parameters Type Name Description FsaDet a The first finite automaton. FsaDet b The second finite automaton. Returns Type Description Mfa An new Mfa representing the intersection of the two input automata. | Edit this page View Source KleenePlusWith(Nfa) Adds a Kleene plus closure (one or many) to the specified automaton. Declaration public static Nfa KleenePlusWith(this Nfa source) Parameters Type Name Description Nfa source Automaton to modify Returns Type Description Nfa Modified source with Kleene Plus | Edit this page View Source KleeneStarWith(Nfa) Adds a Kleene star closure to the specified automaton. Declaration public static Nfa KleeneStarWith(this Nfa source) Parameters Type Name Description Nfa source Automaton to modify Returns Type Description Nfa Modified source with Kleene Star | Edit this page View Source OptionWith(Nfa) Applying Optional closure (?). Ensures the NFA accepts the empty string (ε), modifying it to represent L? = L ∪ {ε}. If the NFA already accepts ε, it is returned unmodified. Declaration public static Nfa OptionWith(this Nfa source) Parameters Type Name Description Nfa source The source NFA to modify in place. Returns Type Description Nfa The same automaton, with potential modification. | Edit this page View Source Overlaps(FsaDet, FsaDet) Indicates whether the languages of two deterministic finite automata overlap. The resulting value is trueiff there exists at least one string accepted by both input automata. Declaration public static bool Overlaps(this FsaDet fsa, FsaDet other) Parameters Type Name Description FsaDet fsa The first finite automaton. FsaDet other The second finite automaton. Returns Type Description bool true iff there exists at least one string accepted by both input automata. | Edit this page View Source Reversal(FsaDet) Creates a new NFA that recognizes the reversal of the language accepted by the given automaton. Declaration public static Nfa Reversal(this FsaDet source) Parameters Type Name Description FsaDet source Returns Type Description Nfa A new NFA representing the reversed automaton. | Edit this page View Source Union(Fsa, FsaDet) Creates union of two finite state automata. Declaration public static FsaDet Union(Fsa left, FsaDet other) Parameters Type Name Description Fsa left First automaton. FsaDet other Second automaton. Returns Type Description FsaDet A new deterministic finite automaton representing a union of the two automata. Remarks Creates a new automaton. For optimal performance, use UnionWith(Nfa, FsaDet) when possible to reduce overhead. Resulting alphabet of source will be the union of both alphabets, irrespective of whether all symbols were referenced by right. | Edit this page View Source UnionWith(Nfa, FsaDet) Unites the source automaton with another automaton (in-place union). Declaration public static Nfa UnionWith(this Nfa source, FsaDet other) Parameters Type Name Description Nfa source Source automaton to mutate. FsaDet other Automaton to union with. Returns Type Description Nfa Source automaton source Remarks This operation mutates source to represent the union of the two automata. Resulting alphabet of source will be the union of both alphabets, irrespective of whether all symbols were referenced by right."
  },
  "Automata.Core.Operations.html": {
    "href": "Automata.Core.Operations.html",
    "title": "Namespace Automata.Core.Operations | Automata Docs",
    "keywords": "Namespace Automata.Core.Operations Classes Ops Provides operations for finite automata."
  },
  "Automata.Core.StateView.html": {
    "href": "Automata.Core.StateView.html",
    "title": "Struct StateView | Automata Docs",
    "keywords": "Struct StateView A fast readonly view of a state in a deterministic automaton, providing access to transitions from this specific state. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly ref struct StateView Remarks This struct uses a ReadOnlySpan as a view on a contiguous memory sequence of Transition(int). Constructors | Edit this page View Source StateView(int, Transition[]) Initializes a new instance of the StateView struct with a specified state and unfiltered transitions. Declaration public StateView(int fromState, Transition[] transitions) Parameters Type Name Description int fromState State from which the transitions originate. Transition[] transitions Filtered transitions from the specified state. | Edit this page View Source StateView(int, ReadOnlySpan<Transition>) Initializes a new instance of the StateView struct with a specified state and unfiltered transitions. Declaration public StateView(int fromState, ReadOnlySpan<Transition> transitions) Parameters Type Name Description int fromState State from which the transitions originate. ReadOnlySpan<Transition> transitions Filtered transitions from the specified state. Fields | Edit this page View Source Transitions Transitions from the current state. Declaration public readonly ReadOnlySpan<Transition> Transitions Field Value Type Description ReadOnlySpan<Transition> Properties | Edit this page View Source State State from which the transitions originate. Declaration public int State { get; } Property Value Type Description int Methods | Edit this page View Source Transition(int) Returns the state reachable from the current state on the specified symbol. Declaration public int Transition(int symbol) Parameters Type Name Description int symbol Symbol for the transition. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. See Also TryTransition(int, out int) | Edit this page View Source TryTransition(int, out int) Tries to get the state reachable from the current state on the specified symbol. Declaration public bool TryTransition(int symbol, out int toState) Parameters Type Name Description int symbol Symbol for the transition. int toState The reachable state, or InvalidState if the method returns false. Returns Type Description bool true iff a reachable state exists. See Also Transition(int)"
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | Automata Docs",
    "keywords": "Struct Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Implements IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct Transition : IComparable<Transition>, IEquatable<Transition> Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Constructors | Edit this page View Source Transition(int, int, int) Initializes a new instance of the Transition struct. Declaration public Transition(int fromState, int symbol, int toState) Parameters Type Name Description int fromState int symbol int toState Exceptions Type Condition ArgumentException Thrown if any of arguments has a negative value. Properties | Edit this page View Source FromState The state origin of the transition. Declaration public int FromState { get; } Property Value Type Description int | Edit this page View Source Invalid Invalid transition. Declaration public static Transition Invalid { get; } Property Value Type Description Transition | Edit this page View Source IsInvalid Indicates whether the transition is invalid. Declaration public bool IsInvalid { get; } Property Value Type Description bool | Edit this page View Source Symbol Symbol for the transition. Declaration public int Symbol { get; } Property Value Type Description int | Edit this page View Source ToState The destination state of the transition. Declaration public int ToState { get; } Property Value Type Description int Methods | Edit this page View Source CompareTo(Transition) Compares the current transition to another transition. Declaration public int CompareTo(Transition other) Parameters Type Name Description Transition other Other transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the transition. Declaration public Transition Reverse() Returns Type Description Transition A new Transition with the from and to states swapped. | Edit this page View Source ToString() String that represents the current transition. Declaration public override string ToString() Returns Type Description string A string that represents the current transition. Overrides ValueType.ToString() Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | Automata Docs",
    "keywords": "Namespace Automata.Core Classes Alphabet An alphabet associated with a finite state automaton. Constants Class representing automata related constants. Converter Static class for conversion between different types of finite state automata. Dfa Deterministic finite automaton (DFA). Fsa Finite state automaton (FSA) interface. FsaDet Common interface for deterministic automata, such as Dfa and Mfa. IntSet Immutable set of integers. Mfa Minimal Finite-state Automaton (MFA). Nfa Nondeterministic finite automaton (NFA). Structs EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. StateView A fast readonly view of a state in a deterministic automaton, providing access to transitions from this specific state. Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state."
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | Automata Docs",
    "keywords": "Class GraphFactory Static class for creating displayable graphs from finite state automata. Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public static class GraphFactory Methods | Edit this page View Source CreateGraph(Fsa, bool, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). Declaration public static Graph CreateGraph(this Fsa fsa, bool displayStateIDs = false, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters Type Name Description Fsa fsa Finite state automaton to represent as a graph. bool displayStateIDs Indicates whether to display state IDs. LayerDirection layerDirection Layout direction of the graph (default: left-to-right). bool directed Indicates whether the graph is directed (default: true). Returns Type Description Graph A graph representing the finite state automaton. | Edit this page View Source CreateGraph(IEnumerable<IEnumerable<string>>, bool) Creates a displayable graph from a collection of sequences. Declaration public static Graph CreateGraph(this IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Collection of sequences to create the graph from. bool minimize Indicates whether to minimize the DFA. Returns Type Description Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.GraphView.html": {
    "href": "Automata.Visualization.GraphView.html",
    "title": "Class GraphView | Automata Docs",
    "keywords": "Class GraphView Class for displaying finite-state automata as graphs in a separate window (and its own separate thread). Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GraphView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public class GraphView : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Remarks You do not need to involve any GUI boilerplate code to display a graph in a separate window, like calling the blocking Application.Run(), setting STA thread environment or bother about the GUI messes with your threads. Simply just create and open a graph view by calling either OpenNew() or OpenNew(Graph). This class uses the MSAGL library for layout and rendering of graphs. Methods | Edit this page View Source Dispose(bool) Disposes of the resources (other than memory) used by the Form. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Form.Dispose(bool) | Edit this page View Source Invoke(Action) Invokes the specified action on the UI thread. Declaration public void Invoke(Action action) Parameters Type Name Description Action action Action to invoke. | Edit this page View Source OpenNew() Opens a new instance of the GraphView class in a new thread. Declaration public static GraphView OpenNew() Returns Type Description GraphView A new instance of the GraphView class. | Edit this page View Source OpenNew(Graph) Opens a new instance of the GraphView class in a new thread and sets the specified graph. Declaration public static GraphView OpenNew(Graph graph) Parameters Type Name Description Graph graph Graph to display. Returns Type Description GraphView A new instance of the GraphView class with the specified graph set. | Edit this page View Source SetGraph(Graph) Displays the specified graph in the graph view. Declaration public void SetGraph(Graph graph) Parameters Type Name Description Graph graph Graph to display. Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | Automata Docs",
    "keywords": "Namespace Automata.Visualization Classes GraphFactory Static class for creating displayable graphs from finite state automata. GraphView Class for displaying finite-state automata as graphs in a separate window (and its own separate thread)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | Automata Docs",
    "keywords": "Automata documentation Welcome to the documentation for Automata. API Documentation Automata.Core Automata.Core.Alang Automata.Core.Operations Automata.Visualization Automata source code repo at GitHub ALANG - A language for definining finite-state automata. Alang is a formal language for defining finite-state automata using human-readable regular expressions. It supports many operations, such as union, intersection, complement and set difference, enabling expressions like (a? (b | c)* - (b b))+. Alang documentation"
  }
}