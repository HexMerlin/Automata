{
  "Automata.App.Program.html": {
    "href": "Automata.App.Program.html",
    "title": "Class Program | AutomataDocs",
    "keywords": "Class Program Namespace Automata.App Assembly Automata.App.dll A sample program that demonstrates how to create a graph from a collection of sequences and display it in a separate window. public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main() public static void Main()"
  },
  "Automata.App.html": {
    "href": "Automata.App.html",
    "title": "Namespace Automata.App | AutomataDocs",
    "keywords": "Namespace Automata.App Classes Program A sample program that demonstrates how to create a graph from a collection of sequences and display it in a separate window."
  },
  "Automata.Core.Alphabet.html": {
    "href": "Automata.Core.Alphabet.html",
    "title": "Class Alphabet | AutomataDocs",
    "keywords": "Class Alphabet Namespace Automata.Core Assembly Automata.Core.dll Represents an alphabet used in a finite state automaton. public class Alphabet Inheritance object Alphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Alphabet() Initializes a new instance of the Alphabet class. public Alphabet() Properties Count Gets the number of symbols in the alphabet. public int Count { get; } Property Value int this[int] Gets the symbol at the specified index. public string this[int index] { get; } Parameters index int The index of the symbol. Property Value string The symbol at the specified index. Exceptions ArgumentOutOfRangeException Thrown when the index is out of range. this[string] Gets the index of the specified symbol. public int this[string symbol] { get; } Parameters symbol string The symbol to get the index of. Property Value int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods GetOrAdd(string) Gets the index of the specified symbol, adding it to the alphabet if it does not already exist. public int GetOrAdd(string symbol) Parameters symbol string The symbol to get or add. Returns int The index of the specified symbol."
  },
  "Automata.Core.Constants.html": {
    "href": "Automata.Core.Constants.html",
    "title": "Class Constants | AutomataDocs",
    "keywords": "Class Constants Namespace Automata.Core Assembly Automata.Core.dll Class representing automata related constants public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields InvalidState Denotes an invalid state. public const int InvalidState = -1 Field Value int InvalidSymbolIndex Denotes an invalid symbol. public const int InvalidSymbolIndex = -1 Field Value int"
  },
  "Automata.Core.DFA.html": {
    "href": "Automata.Core.DFA.html",
    "title": "Class DFA | AutomataDocs",
    "keywords": "Class DFA Namespace Automata.Core Assembly Automata.Core.dll Represents a deterministic finite automaton (DFA). public class DFA : IFsa Inheritance object DFA Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks A DFA is always deterministic and epsilon free. Constructors DFA() Initializes a new instance of the DFA class with an empty alphabet. public DFA() DFA(Alphabet) Initializes a new instance of the DFA class with the specified alphabet. public DFA(Alphabet alphabet) Parameters alphabet Alphabet The alphabet used by the DFA. DFA(Alphabet, IEnumerable<SymbolicTransition>, int, IEnumerable<int>) Initializes a new instance of the DFA class with the specified alphabet, transitions, initial state, and final states. public DFA(Alphabet alphabet, IEnumerable<SymbolicTransition> transitions, int initialState, IEnumerable<int> finalStates) Parameters alphabet Alphabet The alphabet used by the DFA. transitions IEnumerable<SymbolicTransition> The transitions of the DFA. initialState int The initial state of the DFA. finalStates IEnumerable<int> The final states of the DFA. Properties Alphabet Gets the alphabet used by the DFA. public Alphabet Alphabet { get; } Property Value Alphabet EpsilonFree Gets a value indicating whether the DFA is epsilon-free. public bool EpsilonFree { get; } Property Value bool EpsilonTransitions Gets the epsilon transitions of the DFA, which is always empty. public IEnumerable<EpsilonTransition> EpsilonTransitions { get; } Property Value IEnumerable<EpsilonTransition> FinalStates Gets the final states of the DFA. public IReadOnlySet<int> FinalStates { get; } Property Value IReadOnlySet<int> InitialState Gets or sets the initial state of the DFA. public int InitialState { get; } Property Value int Transitions Gets the transitions of the DFA. public IEnumerable<SymbolicTransition> Transitions { get; } Property Value IEnumerable<SymbolicTransition> Methods AddTransition(SymbolicTransition) Adds a transition to the DFA. public void AddTransition(SymbolicTransition transition) Parameters transition SymbolicTransition The transition to add. IsFinal(int) Indicates whether the specified state is a final state. public bool IsFinal(int state) Parameters state int The state to check. Returns bool true if the specified state is a final state; otherwise, false. IsInitial(int) Indicates whether the specified state is the initial state. public bool IsInitial(int state) Parameters state int The state to check. Returns bool true if the specified state is the initial state; otherwise, false. Minimized() Minimizes the DFA. public DFA Minimized() Returns DFA A minimized DFA. Remarks Uses Brzozowski's algorithm Reversed() Reverses the DFA. public NFA Reversed() Returns NFA An NFA representing the reversed DFA. ToNFA() Converts the DFA to an NFA. public NFA ToNFA() Returns NFA An NFA representing the DFA."
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | AutomataDocs",
    "keywords": "Struct EpsilonTransition Namespace Automata.Core Assembly Automata.Core.dll Represents an epsilon transition in an automaton, defined by a starting state and an ending state. public readonly record struct EpsilonTransition : ITransition<EpsilonTransition>, IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Implements ITransition<EpsilonTransition> IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks An epsilon transition is a transition that lacks a symbol Constructors EpsilonTransition(int, int) Represents an epsilon transition in an automaton, defined by a starting state and an ending state. public EpsilonTransition(int FromState, int ToState) Parameters FromState int The state from which the transition starts. ToState int The state to which the transition goes. Remarks An epsilon transition is a transition that lacks a symbol Fields Epsilon Denotes the string representation for ε - the empty epsilon string. Epsilon is not part of any alphabet, the symbol is used solely for output purposes, never for computation. public const string Epsilon = \"ε\" Field Value string Properties FromState The state from which the transition starts. public int FromState { get; init; } Property Value int ToState The state to which the transition goes. public int ToState { get; init; } Property Value int Methods CompareByToState() Gets a comparer that compares epsilon transitions by their to states. public static Comparer<EpsilonTransition> CompareByToState() Returns Comparer<EpsilonTransition> A comparer that compares epsilon transitions by their to states. CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. public int CompareTo(EpsilonTransition other) Parameters other EpsilonTransition The other epsilon transition to compare to. Returns int An integer that indicates the relative order of the objects being compared. Reverse() Reverses the epsilon transition. public EpsilonTransition Reverse() Returns EpsilonTransition A new EpsilonTransition with the from and to states swapped."
  },
  "Automata.Core.EpsilonTransitionSet.html": {
    "href": "Automata.Core.EpsilonTransitionSet.html",
    "title": "Class EpsilonTransitionSet | AutomataDocs",
    "keywords": "Class EpsilonTransitionSet Namespace Automata.Core Assembly Automata.Core.dll Represents a set of epsilon transitions. public class EpsilonTransitionSet : TransitionSet<EpsilonTransition> Inheritance object TransitionSet<EpsilonTransition> EpsilonTransitionSet Inherited Members TransitionSet<EpsilonTransition>.orderDefault TransitionSet<EpsilonTransition>.orderByToState TransitionSet<EpsilonTransition>.Count TransitionSet<EpsilonTransition>.Add(EpsilonTransition) TransitionSet<EpsilonTransition>.AddAll(IEnumerable<EpsilonTransition>) TransitionSet<EpsilonTransition>.Remove(EpsilonTransition) TransitionSet<EpsilonTransition>.MinState TransitionSet<EpsilonTransition>.MaxState TransitionSet<EpsilonTransition>.Transitions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors EpsilonTransitionSet(IEnumerable<EpsilonTransition>) public EpsilonTransitionSet(IEnumerable<EpsilonTransition> initialTransitions) Parameters initialTransitions IEnumerable<EpsilonTransition> Methods ReachableStatesOnEpsilonInPlace(HashSet<int>) Extends the set of states with their epsilon closure in place. public void ReachableStatesOnEpsilonInPlace(HashSet<int> fromStates) Parameters fromStates HashSet<int> The set of states to extend. Remarks Epsilon closure is all reachable states on epsilon transitions ReachableStatesOnSingleEpsilon(int) Returns the states reachable from the given state on a single epsilon transition. If the input state has an epsilon loop on itself, it will be included in the result. public IEnumerable<int> ReachableStatesOnSingleEpsilon(int fromState) Parameters fromState int The state from which to start. Returns IEnumerable<int> The states reachable from the given state on a single epsilon transition."
  },
  "Automata.Core.IFsa.html": {
    "href": "Automata.Core.IFsa.html",
    "title": "Interface IFsa | AutomataDocs",
    "keywords": "Interface IFsa Namespace Automata.Core Assembly Automata.Core.dll Represents a finite state automaton (FSA) interface. public interface IFsa Properties Alphabet Gets the alphabet used by the FSA. Alphabet Alphabet { get; } Property Value Alphabet EpsilonFree Gets a value indicating whether the FSA is epsilon-free. bool EpsilonFree { get; } Property Value bool EpsilonTransitions Gets the epsilon transitions of the FSA. IEnumerable<EpsilonTransition> EpsilonTransitions { get; } Property Value IEnumerable<EpsilonTransition> Transitions Gets the transitions of the FSA. IEnumerable<SymbolicTransition> Transitions { get; } Property Value IEnumerable<SymbolicTransition> Methods IsFinal(int) Indicates whether the specified state is a final state. bool IsFinal(int state) Parameters state int The state to check. Returns bool true if the specified state is a final state; otherwise, false. IsInitial(int) Indicates whether the specified state is an initial state. bool IsInitial(int state) Parameters state int The state to check. Returns bool true if the specified state is an initial state; otherwise, false."
  },
  "Automata.Core.ITransition-1.html": {
    "href": "Automata.Core.ITransition-1.html",
    "title": "Interface ITransition<T> | AutomataDocs",
    "keywords": "Interface ITransition<T> Namespace Automata.Core Assembly Automata.Core.dll Represents a generic transition with static support for obtaining a comparer. public interface ITransition<T> where T : struct Type Parameters T The type of transition. Properties FromState The state from which the transition starts. int FromState { get; } Property Value int ToState The state to which the transition goes. int ToState { get; } Property Value int Methods CompareByToState() Gets the comparer for ordering by \"to state\". public static abstract Comparer<T> CompareByToState() Returns Comparer<T>"
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | AutomataDocs",
    "keywords": "Class IntSet Namespace Automata.Core Assembly Automata.Core.dll Represents an immutable set of integers. public class IntSet : IEquatable<IntSet>, IReadOnlySet<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable Inheritance object IntSet Implements IEquatable<IntSet> IReadOnlySet<int> IReadOnlyCollection<int> IEnumerable<int> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. public IntSet(IEnumerable<int> elements) Parameters elements IEnumerable<int> The elements to include in the set. IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. public IntSet(ISet<int> elements) Parameters elements ISet<int> The elements to include in the set. Properties Count Gets the number of elements in the set. public int Count { get; } Property Value int Methods Contains(int) Determines if the set contains a specific item. public bool Contains(int item) Parameters item int The item to check if the set contains. Returns bool true if found; otherwise false. Equals(IntSet?) Indicates whether the current set is equal to another set. public bool Equals(IntSet? other) Parameters other IntSet The other set to compare to. Returns bool true if the sets are equal; otherwise, false. Equals(object?) Indicates whether the current set is equal to another object. public override bool Equals(object? obj) Parameters obj object The object to compare to. Returns bool true if the object is an IntSet and the sets are equal; otherwise, false. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<int> GetEnumerator() Returns IEnumerator<int> An enumerator that can be used to iterate through the collection. GetHashCode() Gets the hash code for the current set. public override int GetHashCode() Returns int The hash code for the current set. IsProperSubsetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) subset of a specified collection. public bool IsProperSubsetOf(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool true if the current set is a proper subset of other; otherwise false. Exceptions ArgumentNullException other is null. IsProperSupersetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) superset of a specified collection. public bool IsProperSupersetOf(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool true if the collection is a proper superset of other; otherwise false. Exceptions ArgumentNullException other is null. IsSubsetOf(IEnumerable<int>) Determine whether the current set is a subset of a specified collection. public bool IsSubsetOf(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool true if the current set is a subset of other; otherwise false. Exceptions ArgumentNullException other is null. IsSupersetOf(IEnumerable<int>) Determine whether the current set is a super set of a specified collection. public bool IsSupersetOf(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool true if the current set is a subset of other; otherwise false. Exceptions ArgumentNullException other is null. Overlaps(IEnumerable<int>) Determines whether the current set overlaps with the specified collection. public bool Overlaps(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool trueif the current set and other share at least one common element; otherwise, false. Exceptions ArgumentNullException other is null. SetEquals(IEnumerable<int>) Determines whether the current set and the specified collection contain the same elements. public bool SetEquals(IEnumerable<int> other) Parameters other IEnumerable<int> The collection to compare to the current set. Returns bool true if the current set is equal to other; otherwise, false. Exceptions ArgumentNullException other is null. ToString() Returns a string that represents the current set. public override string ToString() Returns string A string that represents the current set."
  },
  "Automata.Core.NFA.html": {
    "href": "Automata.Core.NFA.html",
    "title": "Class NFA | AutomataDocs",
    "keywords": "Class NFA Namespace Automata.Core Assembly Automata.Core.dll Represents a nondeterministic finite automaton (NFA). public class NFA : IFsa Inheritance object NFA Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks States are represented simply as integers (int), which essentially are just unique IDs. NFAs are defined mainly by two sets of transitions (symbolic and epsilon), which are kept separate for performance In addition, there are two sets defining the initial states and final states respectively. NFAs (in contrast to DFAs) can have multiple initial states. Constructors NFA() Initializes a new instance of the NFA class with an empty alphabet. public NFA() NFA(Alphabet) Initializes a new instance of the NFA class with the specified alphabet. public NFA(Alphabet alphabet) Parameters alphabet Alphabet The alphabet used by the NFA. NFA(IEnumerable<IEnumerable<string>>) Initializes a new instance of a NFA class from a set of sequences. public NFA(IEnumerable<IEnumerable<string>> sequences) Parameters sequences IEnumerable<IEnumerable<string>> The sequences to add to the NFA. Properties Alphabet Gets the alphabet used by the NFA. public Alphabet Alphabet { get; } Property Value Alphabet EpsilonFree Gets a value indicating whether the NFA is epsilon-free. public bool EpsilonFree { get; } Property Value bool FinalStates Gets the final states of the NFA. public IReadOnlySet<int> FinalStates { get; } Property Value IReadOnlySet<int> InitialStates Gets the initial states of the NFA. public IReadOnlySet<int> InitialStates { get; } Property Value IReadOnlySet<int> Methods Add(EpsilonTransition) Adds an epsilon transition to the NFA. public void Add(EpsilonTransition transition) Parameters transition EpsilonTransition The transition to add. Add(SymbolicTransition) Adds a symbolic (= non-epsilon) transition to the NFA. public void Add(SymbolicTransition transition) Parameters transition SymbolicTransition The transition to add. Add(IEnumerable<string>) Adds a sequence of symbols to the NFA. public void Add(IEnumerable<string> sequence) Parameters sequence IEnumerable<string> The sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. AddAll(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. public void AddAll(IEnumerable<EpsilonTransition> transitions) Parameters transitions IEnumerable<EpsilonTransition> The transitions to add. AddAll(IEnumerable<SymbolicTransition>) Adds multiple symbolic transitions to the NFA. public void AddAll(IEnumerable<SymbolicTransition> transitions) Parameters transitions IEnumerable<SymbolicTransition> The transitions to add. AddAll(IEnumerable<IEnumerable<string>>) Adds a set of sequences to the NFA. public void AddAll(IEnumerable<IEnumerable<string>> sequences) Parameters sequences IEnumerable<IEnumerable<string>> The sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. GetMaxState() Returns the maximum state (state with the maximum value) in the NFA. public int GetMaxState() Returns int The maximum state in the NFA. IsFinal(int) Indicates whether the specified state is a final state. public bool IsFinal(int state) Parameters state int The state to check. Returns bool true if the specified state is a final state; otherwise, false. IsInitial(int) Indicates whether the specified state is an initial state. public bool IsInitial(int state) Parameters state int The state to check. Returns bool true if the specified state is an initial state; otherwise, false. SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. public void SetFinal(IEnumerable<int> states, bool final = true) Parameters states IEnumerable<int> The states to set or remove as final states. final bool If true, the states are added to the final states; otherwise, they are removed. SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. public void SetFinal(int state, bool final = true) Parameters state int The state to set or remove as a final state. final bool If true, the state is added to the final states; otherwise, it is removed. SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters states IEnumerable<int> The states to set or remove as initial states. initial bool If true, the states are added to the initial states; otherwise, they are removed. SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. public void SetInitial(int state, bool initial = true) Parameters state int The state to set or remove as an initial state. initial bool If true, the state is added to the initial states; otherwise, it is removed. ToDFA() Converts a NFA to a DFA. public DFA ToDFA() Returns DFA A DFA representing the NFA. Remarks Uses the Powerset Construction algorithm (a.k.a. Subset Construction algorithm). ToMinimizedDFA() Converts the NFA to a minimized DFA. public DFA ToMinimizedDFA() Returns DFA A minimized DFA representing the NFA."
  },
  "Automata.Core.SymbolicTransition.html": {
    "href": "Automata.Core.SymbolicTransition.html",
    "title": "Struct SymbolicTransition | AutomataDocs",
    "keywords": "Struct SymbolicTransition Namespace Automata.Core Assembly Automata.Core.dll Represents a symbolic transition in an automaton, defined by a starting state, a symbol, and an ending state. public readonly record struct SymbolicTransition : ITransition<SymbolicTransition>, IComparable<SymbolicTransition>, IEquatable<SymbolicTransition> Implements ITransition<SymbolicTransition> IComparable<SymbolicTransition> IEquatable<SymbolicTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Remarks A symbolic transition always has a non-epsilon symbol Constructors SymbolicTransition() Initializes a new instance of the SymbolicTransition struct with default values. public SymbolicTransition() SymbolicTransition(int, int, int) Represents a symbolic transition in an automaton, defined by a starting state, a symbol, and an ending state. public SymbolicTransition(int FromState, int Symbol, int ToState) Parameters FromState int The state from which the transition starts. Symbol int The symbol that triggers the transition. ToState int The state to which the transition goes. Remarks A symbolic transition always has a non-epsilon symbol Properties FromState The state from which the transition starts. public int FromState { get; init; } Property Value int Symbol The symbol that triggers the transition. public int Symbol { get; init; } Property Value int ToState The state to which the transition goes. public int ToState { get; init; } Property Value int Methods CompareByToState() Gets a comparer that compares transitions by their to states. public static Comparer<SymbolicTransition> CompareByToState() Returns Comparer<SymbolicTransition> A comparer that compares transitions by their to states. CompareTo(SymbolicTransition) Compares the current transition to another transition. public int CompareTo(SymbolicTransition other) Parameters other SymbolicTransition The other transition to compare to. Returns int An integer that indicates the relative order of the objects being compared. Reverse() Reverses the transition. public SymbolicTransition Reverse() Returns SymbolicTransition A new SymbolicTransition with the from and to states swapped."
  },
  "Automata.Core.SymbolicTransitionSet.html": {
    "href": "Automata.Core.SymbolicTransitionSet.html",
    "title": "Class SymbolicTransitionSet | AutomataDocs",
    "keywords": "Class SymbolicTransitionSet Namespace Automata.Core Assembly Automata.Core.dll Represents a set of symbolic transitions (non-epsilon transitions). public class SymbolicTransitionSet : TransitionSet<SymbolicTransition> Inheritance object TransitionSet<SymbolicTransition> SymbolicTransitionSet Inherited Members TransitionSet<SymbolicTransition>.orderDefault TransitionSet<SymbolicTransition>.orderByToState TransitionSet<SymbolicTransition>.Count TransitionSet<SymbolicTransition>.Add(SymbolicTransition) TransitionSet<SymbolicTransition>.AddAll(IEnumerable<SymbolicTransition>) TransitionSet<SymbolicTransition>.Remove(SymbolicTransition) TransitionSet<SymbolicTransition>.MinState TransitionSet<SymbolicTransition>.MaxState TransitionSet<SymbolicTransition>.Transitions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SymbolicTransitionSet(IEnumerable<SymbolicTransition>) public SymbolicTransitionSet(IEnumerable<SymbolicTransition> initialTransitions) Parameters initialTransitions IEnumerable<SymbolicTransition> Methods GetAvailableSymbols(IEnumerable<int>) Returns the set of symbols that can be used to transition directly from the given states. public IntSet GetAvailableSymbols(IEnumerable<int> fromStates) Parameters fromStates IEnumerable<int> The states from which to start. Returns IntSet The set of symbols that can be used to transition directly from the given states. ReachableStates(int, int) Returns the states reachable from the given state on the given symbol. public IEnumerable<int> ReachableStates(int fromState, int symbol) Parameters fromState int The state from which to start. symbol int The symbol to transition on. Returns IEnumerable<int> The states reachable from the given state on the given symbol."
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | AutomataDocs",
    "keywords": "Struct Transition Namespace Automata.Core Assembly Automata.Core.dll Represents a non-epsilon transition in an automaton, defined by a starting state, a symbol, and an ending state. public readonly record struct Transition : IComparable<Transition>, IEquatable<Transition> Implements IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Transition() Initializes a new instance of the Transition struct with default values. public Transition() Transition(int, int, int) Represents a non-epsilon transition in an automaton, defined by a starting state, a symbol, and an ending state. public Transition(int FromState, int Symbol, int ToState) Parameters FromState int The state from which the transition starts. Symbol int The symbol that triggers the transition. ToState int The state to which the transition goes. Properties FromState The state from which the transition starts. public int FromState { get; init; } Property Value int Symbol The symbol that triggers the transition. public int Symbol { get; init; } Property Value int ToState The state to which the transition goes. public int ToState { get; init; } Property Value int Methods CompareByToState() Gets a comparer that compares transitions by their to states. public static Comparer<Transition> CompareByToState() Returns Comparer<Transition> A comparer that compares transitions by their to states. CompareTo(Transition) Compares the current transition to another transition. public int CompareTo(Transition other) Parameters other Transition The other transition to compare to. Returns int An integer that indicates the relative order of the objects being compared. Reverse() Reverses the transition. public Transition Reverse() Returns Transition A new Transition with the from and to states swapped."
  },
  "Automata.Core.TransitionSet-1.html": {
    "href": "Automata.Core.TransitionSet-1.html",
    "title": "Class TransitionSet<T> | AutomataDocs",
    "keywords": "Class TransitionSet<T> Namespace Automata.Core Assembly Automata.Core.dll Denotes a mutable and generic set of transitions for fast lookup and retrieval. public class TransitionSet<T> where T : struct, ITransition<T> Type Parameters T The type of transition, either SymbolicTransition or EpsilonTransition. Inheritance object TransitionSet<T> Derived EpsilonTransitionSet SymbolicTransitionSet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks TransitionSet<T> maintains two ordered sets with the exact same set of transitions, but with different sort orders. One set is ordered so that all from-states are ordered are consecutive and increasing, and the other set is ordered where all to-states are consecutive and increasing. That enables fast retrieval of all transitions from or to a certain state, respectively. Constructors TransitionSet(IEnumerable<T>) Initializes a new instance of TransitionSet<T>. public TransitionSet(IEnumerable<T> initialTransitions) Parameters initialTransitions IEnumerable<T> The initial elements to populate the sets. Fields orderByToState protected readonly SortedSet<T> orderByToState Field Value SortedSet<T> orderDefault protected readonly SortedSet<T> orderDefault Field Value SortedSet<T> Properties Count Returns the number of transitions in the set. public int Count { get; } Property Value int MaxState Fast retrieval of the maximum state referenced by any transition in the set. public int MaxState { get; } Property Value int The maximum state referenced by any transition in the set, or InvalidState if the set was empty Remarks The maximum state is either a state that occurs as a FromState or ToState. Efficiently, we retrieve the maximum FromState from the set ordered by FromState, and retrieve the maximum ToState in the set ordered by ToState, and then take the max of these two. MinState Fast retrieval of the minimum state referenced by any transition in the set. public int MinState { get; } Property Value int The minimum state referenced by any transition in the set, or InvalidState if the set was empty Remarks The minimum state is either a state that occurs as a FromState or ToState. Efficiently, we retrieve the minimum FromState from the set ordered by FromState, and retrieve the minimum ToState in the set ordered by ToState, and then take the min of these two. Transitions public IReadOnlySet<T> Transitions { get; } Property Value IReadOnlySet<T> The set of transitions in default order. Methods Add(T) Adds a transition to the set. public void Add(T transition) Parameters transition T The element to add. AddAll(IEnumerable<T>) Adds multiple transitions to the set. public void AddAll(IEnumerable<T> transitions) Parameters transitions IEnumerable<T> The transitions to add. Remove(T) Removes a transition from the set. public void Remove(T transition) Parameters transition T The transition to remove. See Also ITransition<T> SymbolicTransition EpsilonTransition"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | AutomataDocs",
    "keywords": "Namespace Automata.Core Classes Alphabet Represents an alphabet used in a finite state automaton. Constants Class representing automata related constants DFA Represents a deterministic finite automaton (DFA). EpsilonTransitionSet Represents a set of epsilon transitions. IntSet Represents an immutable set of integers. NFA Represents a nondeterministic finite automaton (NFA). SymbolicTransitionSet Represents a set of symbolic transitions (non-epsilon transitions). TransitionSet<T> Denotes a mutable and generic set of transitions for fast lookup and retrieval. Structs EpsilonTransition Represents an epsilon transition in an automaton, defined by a starting state and an ending state. SymbolicTransition Represents a symbolic transition in an automaton, defined by a starting state, a symbol, and an ending state. Interfaces IFsa Represents a finite state automaton (FSA) interface. ITransition<T> Represents a generic transition with static support for obtaining a comparer."
  },
  "Automata.Visualization.ConsoleWindow.html": {
    "href": "Automata.Visualization.ConsoleWindow.html",
    "title": "Class ConsoleWindow | AutomataDocs",
    "keywords": "Class ConsoleWindow Namespace Automata.Visualization Assembly Automata.Visualization.dll A class that represents a console window for displaying text output with the option to display graphs in a separate window. The class encapsulates and hides boilerplate code for the user, such as synchronizing with the GUI-thread or managing the lifecycle of windows. public class ConsoleWindow : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ConsoleWindow Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Examples Full program that demonstrates how to create a graph from a collection of sequences and display it in a separate window. static void Main() { // Create the main console window. ConsoleWindow consoleWindow = ConsoleWindow.Create(); // Write some colored text output to the console window consoleWindow.WriteLine(\"Creating graph...\", System.Drawing.Color.Blue); //create some random sequences var sequences = Enumerable.Range(0, 10).Select(_ => Enumerable.Range(0, 8).Select(_ => Random.Shared.Next(4).ToString())); // Create a graph object to display using the sequences Graph graph = GraphFactory.CreateGraph(sequences, minimize: true); // Open a new non-modal interactive window that displays the graph in it. consoleWindow.ShowGraph(graph); // Write some more colored text output to the console window consoleWindow.WriteLine(\"Graph created.\", System.Drawing.Color.Green); } Properties IsAlive public bool IsAlive { get; } Property Value bool Methods ClearText() Clears all text from the console window. public void ClearText() Create() Creates a new ConsoleWindow on a separate thread and waits for it to be initialized. public static ConsoleWindow Create() Returns ConsoleWindow A new instance of ConsoleWindow. Dispose(bool) Releases the unmanaged resources used by the ConsoleWindow and optionally releases the managed resources. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. ShowGraph(Graph) Displays the specified graph in the graph view. public void ShowGraph(Graph graph) Parameters graph Graph The graph to display. Write(string, Color?) Writes text to the console window. public void Write(string text, Color? textColor = null) Parameters text string The text to write. textColor Color? The color of the text. If null, the default color is used. WriteLine(string, Color?) Writes a line of text to the console window. public void WriteLine(string text, Color? textColor = null) Parameters text string The text to write. textColor Color? The color of the text. If null, the default color is used."
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | AutomataDocs",
    "keywords": "Class GraphFactory Namespace Automata.Visualization Assembly Automata.Visualization.dll Static class for creating displayable graphs from finite state automata. public static class GraphFactory Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigNode(Node, bool, bool) Configures the appearance of a node in the graph. public static void ConfigNode(this Node node, bool isInitial, bool isFinal) Parameters node Node The node to configure. isInitial bool Indicates whether the node represents an initial state. isFinal bool Indicates whether the node represents a final state. CreateGraph(IFsa, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). public static Graph CreateGraph(IFsa fsa, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters fsa IFsa The finite state automaton to represent as a graph. layerDirection LayerDirection The layout direction of the graph (default: left-to-right). directed bool Indicates whether the graph is directed (default: true). Returns Graph A graph representing the finite state automaton. CreateGraph(IEnumerable<IEnumerable<string>>, bool) Helper method that creates a displayable graph from a collection of sequences. public static Graph CreateGraph(IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters sequences IEnumerable<IEnumerable<string>> The collection of sequences to create the graph from. minimize bool Indicates whether to minimize the DFA. Returns Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.GraphView.html": {
    "href": "Automata.Visualization.GraphView.html",
    "title": "Class GraphView | AutomataDocs",
    "keywords": "Class GraphView Namespace Automata.Visualization Assembly Automata.Visualization.dll A class for displaying finite-state automata as graphs in a separate window (and its own separate thread). public class GraphView : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GraphView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks You do not need to involve any GUI boilerplate code to display a graph in a separate window, like calling the blocking Application.Run(), setting STA thread environment or bother about the GUI messes with your threads. Simply just create and open a graph view by calling either OpenNew() or OpenNew(Graph). This class uses the MSAGL library for layout and rendering of graphs. Methods Dispose(bool) Disposes of the resources (other than memory) used by the Form. protected override void Dispose(bool disposing) Parameters disposing bool true to release both managed and unmanaged resources; false to release only unmanaged resources. Invoke(Action) Invokes the specified action on the UI thread. public void Invoke(Action action) Parameters action Action The action to invoke. OpenNew() Opens a new instance of the GraphView class in a new thread. public static GraphView OpenNew() Returns GraphView A new instance of the GraphView class. OpenNew(Graph) Opens a new instance of the GraphView class in a new thread and sets the specified graph. public static GraphView OpenNew(Graph graph) Parameters graph Graph The graph to display. Returns GraphView A new instance of the GraphView class with the specified graph set. SetGraph(Graph) Displays the specified graph in the graph view. public void SetGraph(Graph graph) Parameters graph Graph The graph to display."
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | AutomataDocs",
    "keywords": "Namespace Automata.Visualization Classes GraphFactory Static class for creating displayable graphs from finite state automata. GraphView A class for displaying finite-state automata as graphs in a separate window (and its own separate thread)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | AutomataDocs",
    "keywords": "API Documentation Welcome to the API documentation for Automata. Namespaces Automata.Core Automata.Visualization Click the links above to explore the namespaces. Automata repo at GitHub"
  }
}