{
  "ALANG.html": {
    "href": "ALANG.html",
    "title": "Alang (Automata Language) | Automata Docs",
    "keywords": "Alang (Automata Language) Alang is a formal language for defining finite-state automata using human-readable regular expressions. It supports many operations, such as union, intersection, complement and set difference, enabling expressions like \"(a (b | c)* - (b b))?\". Alang's syntax is defined by the Alang Grammar which is an LL(1) context-free grammar. The Alang parser is optimized for fast parsing of very large inputs. The parser validates syntactic correctness and generates detailed error messages for invalid inputs. Alang Grammar Specification Rule Expansion AlangExpr (root) Union \uD83D\uDD39Union Difference ('|' Difference)* \uD83D\uDD39Difference Intersection ('-' Intersection)* \uD83D\uDD39Intersection Concatenation ('&' Concatenation)* \uD83D\uDD39Concatenation UnaryExpr+ UnaryExpr PrimaryExpr (Option ┃ KleeneStar ┃ KleenePlus ┃ Complement)* \uD83D\uDD39Option PrimaryExpr '?' \uD83D\uDD39KleeneStar PrimaryExpr '*' \uD83D\uDD39KleenePlus PrimaryExpr '+' \uD83D\uDD39Complement Primary '~' PrimaryExpr '(' AlangExpr ')' ┃ Atom ┃ Wildcard ┃ EmptySet \uD83D\uDD39Atom AtomChar+ \uD83D\uDD39Wildcard '.' \uD83D\uDD39EmptySet '(' ')' AtomChar any character except operator characters and whitespace \uD83D\uDD39 Denotes a node-type that can be included in the resulting parse tree. The root rule AlangExpr must cover the entire input, with no residue. Operators Ordered by Precedence (Lowest-to-Highest) Precedence Operation Operator Character Position & Arity 1 Union x | x Infix Binary 2 Difference x - x Infix Binary 3 Intersection x & x Infix Binary 4 Concatenation x x Infix Implicit 5 Option x? Postfix Unary 5 Kleene Star x* Postfix Unary 5 Kleene Plus x+ Postfix Unary 5 Complement x~ Postfix Unary 6 Group ( x ) Enclosing Unary 7 Empty set () Empty parentheses 7 Wildcard . Atomic leaf 7 Atom string literal Atomic leaf Notes Operators with higher precedence levels bind more tightly than those with lower levels. Operators of the same precedence level are left-associative (left-to-right). Whitespace denotes any whitespace character (i.e. space, tab, newline, etc.) Atoms are user defined (alphabet symbols) and can contain any characters except for the operator characters and whitespace. Wildcard '.' matches exactly one “Atom” in the alphabet. Whitespace is allowed anywhere in the grammar, but it is never required unless to separate directly adjacent atoms."
  },
  "Automata.Core.Alang.AlangCursor.html": {
    "href": "Automata.Core.Alang.AlangCursor.html",
    "title": "Struct AlangCursor | Automata Docs",
    "keywords": "Struct AlangCursor Represents a cursor for parsing Alang expressions from an input string. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public ref struct AlangCursor Remarks A cursor is a lightweight struct that consumes characters from the left of a string input. The input string is never modified. Instead, the cursor maintains a lightweight span of the remaining input. The parser in the Automata.Core.Alang namespace only needs to create a single cursor instance that is passed along during the parse process. The contract of the AlangCursor is that it always points to a non-white-space character or EOI if the input is empty. Consequently: - All methods in AlangCursor that move the cursor must ensure on exit that leading whitespace is trimmed. - All methods in AlangCursor can assume on entry that the input is trimmed of leading whitespace. Constructors | Edit this page View Source AlangCursor(string) Represents a cursor for parsing Alang expressions from an input string. Declaration public AlangCursor(string input) Parameters Type Name Description string input The input string to parse. Remarks A cursor is a lightweight struct that consumes characters from the left of a string input. The input string is never modified. Instead, the cursor maintains a lightweight span of the remaining input. The parser in the Automata.Core.Alang namespace only needs to create a single cursor instance that is passed along during the parse process. The contract of the AlangCursor is that it always points to a non-white-space character or EOI if the input is empty. Consequently: - All methods in AlangCursor that move the cursor must ensure on exit that leading whitespace is trimmed. - All methods in AlangCursor can assume on entry that the input is trimmed of leading whitespace. Properties | Edit this page View Source CursorIndex Current position of the cursor in the original input string. Declaration public readonly int CursorIndex { get; } Property Value Type Description int | Edit this page View Source IsEmpty Indicates whether the cursor has reached the end of the input. Declaration public readonly bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsExpressionStart Indicates whether the current character indicates the start of an expression. false if the input is empty. Declaration public readonly bool IsExpressionStart { get; } Property Value Type Description bool | Edit this page View Source NextAsString String representation of the next character in the input, or \"End-Of-Input\" if at the end of the input. Declaration public readonly string NextAsString { get; } Property Value Type Description string Methods | Edit this page View Source ConsumeAtom() Consumes an Atom from the input. Declaration public Atom ConsumeAtom() Returns Type Description Atom The consumed Atom. Remarks This method will return an empty (invalid) Atom if no characters could be consumed. It is up to the calling code to handle this. | Edit this page View Source ConsumeRightParen() Consumes a right parenthesis (RightParen) from the input, advancing the cursor. Declaration public void ConsumeRightParen() Exceptions Type Condition AlangFormatException Thrown when the next character is not a right parenthesis. | Edit this page View Source Is(char) Indicates whether the first character in the remaining input is the specified character. Declaration public readonly bool Is(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool true iff the first character is the specified character. | Edit this page View Source ShouldBeRightParen() Validates that the current character is a right parenthesis. Declaration public readonly void ShouldBeRightParen() Exceptions Type Condition AlangFormatException Thrown when the current character is not a right parenthesis ')'. | Edit this page View Source ShouldNotBeEmpty() Validates that the cursor is not at the end of input. Declaration public readonly void ShouldNotBeEmpty() Remarks This method enforces the rule that empty input is not valid in Alang expressions. To represent an empty set, use parentheses '()' instead. Exceptions Type Condition AlangFormatException Thrown when the cursor is at the end of input. | Edit this page View Source ShouldNotBeOperator() Validates that the current character is not an operator. Declaration public readonly void ShouldNotBeOperator() Remarks This method ensures expressions do not start with an operator. Exceptions Type Condition AlangFormatException Thrown when the current character is an operator. | Edit this page View Source ShouldNotBeRightParen() Validates that the current character is not a right parenthesis. Declaration public readonly void ShouldNotBeRightParen() Exceptions Type Condition AlangFormatException Thrown when the current character is a right parenthesis ')'. | Edit this page View Source ToString() String representation of the remaining input. Declaration public override readonly string ToString() Returns Type Description string A string that represents the remaining input. Overrides ValueType.ToString() | Edit this page View Source TryConsume(char) Tries to consume the specified character from the input and advances the cursor if successful. Declaration public bool TryConsume(char c) Parameters Type Name Description char c The character to attempt to consume. Returns Type Description bool true iff the character was successfully consumed. | Edit this page View Source TryConsumeAny(params char[]) Tries to consume one of the specified characters from the input and advances the cursor if successful. Declaration public char TryConsumeAny(params char[] chars) Parameters Type Name Description char[] chars An array of characters to attempt to consume. Returns Type Description char The character that was consumed if successful; otherwise, Invalid. Remarks This method supports inclusion of EOI to also match against End-Of-Input. | Edit this page View Source TryConsumeDifferenceOperator() Tries to consume a difference operator (Difference) from the input and advances the cursor if successful. Declaration public bool TryConsumeDifferenceOperator() Returns Type Description bool true iff the difference operator was successfully consumed. | Edit this page View Source TryConsumeIntersectionOperator() Tries to consume an intersection operator (Intersection) from the input and advances the cursor if successful. Declaration public bool TryConsumeIntersectionOperator() Returns Type Description bool true iff the intersection operator was successfully consumed. | Edit this page View Source TryConsumeLeftParen() Tries to consume a left parenthesis (LeftParen) from the input and advances the cursor if successful. Declaration public bool TryConsumeLeftParen() Returns Type Description bool true iff the left parenthesis was successfully consumed. | Edit this page View Source TryConsumeUnionOperator() Tries to consume a union operator (Union) from the input and advances the cursor if successful. Declaration public bool TryConsumeUnionOperator() Returns Type Description bool true iff the union operator was successfully consumed."
  },
  "Automata.Core.Alang.AlangExpr.html": {
    "href": "Automata.Core.Alang.AlangExpr.html",
    "title": "Class AlangExpr | Automata Docs",
    "keywords": "Class AlangExpr Represents an expression in the Alang (Automata language) used for defining finite-state automata. Inheritance object AlangExpr Atom EmptySet InfixBinary UnaryExpr Wildcard Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class AlangExpr Remarks For more information about the Alang language, see the Alang Grammar Specification. Constructors | Edit this page View Source AlangExpr() Initializes a new instance of the AlangExpr class. Declaration protected AlangExpr() Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public abstract string AlangExpressionString { get; } Property Value Type Description string | Edit this page View Source IsEmptyString Indicates whether this expression is an empty string. An empty string is not a valid expression in Alang. Used internally by the Parser to handle empty strings. Declaration public bool IsEmptyString { get; } Property Value Type Description bool | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public abstract int Precedence { get; } Property Value Type Description int Methods | Edit this page View Source Param(AlangExpr, AlangExpr) Returns the expression string of the given expression, enclosed in parentheses only if necessary based on operator precedence. Declaration protected static string Param(AlangExpr expr, AlangExpr parent) Parameters Type Name Description AlangExpr expr The expression to get the string representation of. AlangExpr parent The parent expression of expr. Returns Type Description string The expression string, potentially enclosed in parentheses. Remarks Parentheses are added if the precedence of the given expression is lower than the precedence of the parent. | Edit this page View Source Parse(string) Parses the specified input string into an AlangExpr. Declaration public static AlangExpr Parse(string input) Parameters Type Name Description string input The input string to parse. Returns Type Description AlangExpr An AlangExpr representing the parsed expression. Exceptions Type Condition AlangFormatException Thrown when the input is invalid. | Edit this page View Source ToString() String that represents the current object. Declaration public override string ToString() Returns Type Description string The expression string of this expression. Overrides object.ToString()"
  },
  "Automata.Core.Alang.AlangFormatException.html": {
    "href": "Automata.Core.Alang.AlangFormatException.html",
    "title": "Class AlangFormatException | Automata Docs",
    "keywords": "Class AlangFormatException Represents an exception that is thrown when an error occurs during parsing of Alang expressions. Inheritance object Exception AlangFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax [Serializable] public class AlangFormatException : Exception, ISerializable Remarks Provides detailed information about the parsing error, including the index in the input where the error occurred and the specific type of error. Constructors | Edit this page View Source AlangFormatException(int, ParseErrorType, string) Initializes a new instance of the AlangFormatException class with the specified error index, error type, and message. Declaration public AlangFormatException(int index, ParseErrorType ErrorType, string message) Parameters Type Name Description int index Index in the input string where the parsing error occurred. ParseErrorType ErrorType Type of parsing error that occurred. string message Error message that explains the reason for the exception. Fields | Edit this page View Source ErrorType Type of parsing error that occurred. Declaration public readonly ParseErrorType ErrorType Field Value Type Description ParseErrorType | Edit this page View Source Index Index in the input string where the parsing error occurred. Declaration public readonly int Index Field Value Type Description int Implements ISerializable"
  },
  "Automata.Core.Alang.Atom.html": {
    "href": "Automata.Core.Alang.Atom.html",
    "title": "Class Atom | Automata Docs",
    "keywords": "Class Atom Atomic expression in the Alang language used for defining finite-state automata. Inheritance object AlangExpr Atom Inherited Members AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Atom : AlangExpr Remarks An atom is a basic unit in the Alang language, consisting of one or more characters that are not operators or whitespace. It serves as an atomic leaf node in the expression tree. Constructors | Edit this page View Source Atom(string) Initializes a new instance of the Atom class with the specified symbol. Declaration public Atom(string symbol) Parameters Type Name Description string symbol Symbol representing this atom. Properties | Edit this page View Source AlangExpressionString String representation of this atom. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence | Edit this page View Source Symbol Symbol representing this atom. Declaration public string Symbol { get; } Property Value Type Description string"
  },
  "Automata.Core.Alang.Chars.html": {
    "href": "Automata.Core.Alang.Chars.html",
    "title": "Class Chars | Automata Docs",
    "keywords": "Class Chars Character definitions and utility methods for Alang. Inheritance object Chars Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public static class Chars Fields | Edit this page View Source Complement Complement operator character. Declaration public const char Complement = '~' Field Value Type Description char | Edit this page View Source Difference Difference operator character. Declaration public const char Difference = '-' Field Value Type Description char | Edit this page View Source EOI End of input character. Declaration public const char EOI = '\\0' Field Value Type Description char | Edit this page View Source Intersection Intersection operator character. Declaration public const char Intersection = '&' Field Value Type Description char | Edit this page View Source Invalid Invalid character. Declaration public const char Invalid = '\\uffff' Field Value Type Description char | Edit this page View Source KleenePlus Kleene plus operator character. Declaration public const char KleenePlus = '+' Field Value Type Description char | Edit this page View Source KleeneStar Kleene star operator character. Declaration public const char KleeneStar = '*' Field Value Type Description char | Edit this page View Source LeftParen Left parenthesis character. Declaration public const char LeftParen = '(' Field Value Type Description char | Edit this page View Source Option Option operator character. Declaration public const char Option = '?' Field Value Type Description char | Edit this page View Source RightParen Right parenthesis character. Declaration public const char RightParen = ')' Field Value Type Description char | Edit this page View Source Union Union operator character. Declaration public const char Union = '|' Field Value Type Description char | Edit this page View Source Wildcard Wildcard token denoting any string in the alphabet. Declaration public const char Wildcard = '.' Field Value Type Description char Methods | Edit this page View Source IsAtomChar(char) Indicates if a character can be part of an atom. Declaration public static bool IsAtomChar(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character can be part of an atom. | Edit this page View Source IsExpressionStart(char) Indicates if a character can be the start of an expression. Declaration public static bool IsExpressionStart(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character can start an expression. | Edit this page View Source IsOperator(char) Indicates if a character is an operator. Declaration public static bool IsOperator(char c) Parameters Type Name Description char c Character to check. Returns Type Description bool true iff the character is an operator."
  },
  "Automata.Core.Alang.Complement.html": {
    "href": "Automata.Core.Alang.Complement.html",
    "title": "Class Complement | Automata Docs",
    "keywords": "Class Complement Represents a complement expression in the Alang language. Inheritance object AlangExpr UnaryExpr Complement Inherited Members UnaryExpr.Operand AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Complement : UnaryExpr Constructors | Edit this page View Source Complement(AlangExpr) Represents a complement expression in the Alang language. Declaration public Complement(AlangExpr operand) Parameters Type Name Description AlangExpr operand The operand of the complement expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.Concatenation.html": {
    "href": "Automata.Core.Alang.Concatenation.html",
    "title": "Class Concatenation | Automata Docs",
    "keywords": "Class Concatenation Represents a concatenation operation in the Alang grammar. Inheritance object AlangExpr InfixBinary Concatenation Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Concatenation : InfixBinary Constructors | Edit this page View Source Concatenation(AlangExpr, AlangExpr) Represents a concatenation operation in the Alang grammar. Declaration public Concatenation(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left The left operand of the concatenation. AlangExpr right The right operand of the concatenation. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Parses the rule Concatenation in the Alang grammar specification. Declaration public static AlangExpr Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor The cursor from which to parse the expression. Returns Type Description AlangExpr An AlangExpr representing the parsed expression. Exceptions Type Condition AlangFormatException Thrown when the input is invalid."
  },
  "Automata.Core.Alang.Difference.html": {
    "href": "Automata.Core.Alang.Difference.html",
    "title": "Class Difference | Automata Docs",
    "keywords": "Class Difference Represents a difference expression in the Alang grammar. Inheritance object AlangExpr InfixBinary Difference Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Difference : InfixBinary Constructors | Edit this page View Source Difference(AlangExpr, AlangExpr) Represents a difference expression in the Alang grammar. Declaration public Difference(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left The left-hand side expression of the difference. AlangExpr right The right-hand side expression of the difference. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.EmptySet.html": {
    "href": "Automata.Core.Alang.EmptySet.html",
    "title": "Class EmptySet | Automata Docs",
    "keywords": "Class EmptySet Represents an empty set expression in the Alang (Automata language). Inheritance object AlangExpr EmptySet Inherited Members AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class EmptySet : AlangExpr Remarks This class is used to define an empty set in finite-state automata expressions. Constructors | Edit this page View Source EmptySet() Initializes a new instance of the EmptySet class. Declaration public EmptySet() Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.InfixBinary.html": {
    "href": "Automata.Core.Alang.InfixBinary.html",
    "title": "Class InfixBinary | Automata Docs",
    "keywords": "Class InfixBinary Represents a binary infix expression in the Alang language. Inheritance object AlangExpr InfixBinary Concatenation Difference Intersection Union Inherited Members AlangExpr.Precedence AlangExpr.AlangExpressionString AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class InfixBinary : AlangExpr Remarks This is an abstract class that serves as a base for specific binary infix expressions. Constructors | Edit this page View Source InfixBinary(AlangExpr, AlangExpr) Initializes a new instance of the InfixBinary class with the specified left and right operands. Declaration public InfixBinary(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left The left operand of the binary infix expression. AlangExpr right The right operand of the binary infix expression. Properties | Edit this page View Source Left Left operand of the binary infix expression. Declaration public AlangExpr Left { get; } Property Value Type Description AlangExpr | Edit this page View Source Right Right operand of the binary infix expression. Declaration public AlangExpr Right { get; } Property Value Type Description AlangExpr"
  },
  "Automata.Core.Alang.Intersection.html": {
    "href": "Automata.Core.Alang.Intersection.html",
    "title": "Class Intersection | Automata Docs",
    "keywords": "Class Intersection Represents an intersection expression in the Alang grammar specification. Inheritance object AlangExpr InfixBinary Intersection Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Intersection : InfixBinary Constructors | Edit this page View Source Intersection(AlangExpr, AlangExpr) Represents an intersection expression in the Alang grammar specification. Declaration public Intersection(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left The left operand of the intersection expression. AlangExpr right The right operand of the intersection expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.KleenePlus.html": {
    "href": "Automata.Core.Alang.KleenePlus.html",
    "title": "Class KleenePlus | Automata Docs",
    "keywords": "Class KleenePlus Represents a Kleene plus unary expression in the Alang language. Inheritance object AlangExpr UnaryExpr KleenePlus Inherited Members UnaryExpr.Operand AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleenePlus : UnaryExpr Remarks The Kleene plus operation is a postfix unary operation that denotes one or more repetitions of the operand expression. Constructors | Edit this page View Source KleenePlus(AlangExpr) Represents a Kleene plus unary expression in the Alang language. Declaration public KleenePlus(AlangExpr operand) Parameters Type Name Description AlangExpr operand The operand of the Kleene plus expression. Remarks The Kleene plus operation is a postfix unary operation that denotes one or more repetitions of the operand expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.KleeneStar.html": {
    "href": "Automata.Core.Alang.KleeneStar.html",
    "title": "Class KleeneStar | Automata Docs",
    "keywords": "Class KleeneStar Represents a Kleene star operation in the Alang language. Inheritance object AlangExpr UnaryExpr KleeneStar Inherited Members UnaryExpr.Operand AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleeneStar : UnaryExpr Remarks The Kleene star operation is a unary postfix operator that denotes zero or more repetitions of the operand expression. Constructors | Edit this page View Source KleeneStar(AlangExpr) Represents a Kleene star operation in the Alang language. Declaration public KleeneStar(AlangExpr operand) Parameters Type Name Description AlangExpr operand The operand expression to which the Kleene star operation is applied. Remarks The Kleene star operation is a unary postfix operator that denotes zero or more repetitions of the operand expression. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.Option.html": {
    "href": "Automata.Core.Alang.Option.html",
    "title": "Class Option | Automata Docs",
    "keywords": "Class Option Represents an option expression in the Alang language. Inheritance object AlangExpr UnaryExpr Option Inherited Members UnaryExpr.Operand AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Option : UnaryExpr Remarks An option expression matches zero or one occurrence of its operand. Constructors | Edit this page View Source Option(AlangExpr) Represents an option expression in the Alang language. Declaration public Option(AlangExpr operand) Parameters Type Name Description AlangExpr operand The operand of the option expression. Remarks An option expression matches zero or one occurrence of its operand. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.ParseErrorType.html": {
    "href": "Automata.Core.Alang.ParseErrorType.html",
    "title": "Enum ParseErrorType | Automata Docs",
    "keywords": "Enum ParseErrorType Specifies the type of parsing error encountered in Alang expressions.\"/> Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public enum ParseErrorType Fields Name Description EmptyInput Indicates that the input was empty or white-space only. ExpectedBeginExpressionOrEOI Indicates that a new subexpression or end-of-input was expected but not found. MissingClosingParenthesis Indicates that a closing parenthesis was expected but not found. MissingRightOperand Indicates that a right operand was expected after a binary operator but was not found. UnexpectedClosingParenthesis Indicates that an unexpected closing parenthesis was encountered. UnexpectedOperator Indicates that an unexpected operator was encountered. See Also AlangFormatException"
  },
  "Automata.Core.Alang.UnaryExpr.html": {
    "href": "Automata.Core.Alang.UnaryExpr.html",
    "title": "Class UnaryExpr | Automata Docs",
    "keywords": "Class UnaryExpr Postfix unary expression in the Alang language. Inheritance object AlangExpr UnaryExpr Complement KleenePlus KleeneStar Option Inherited Members AlangExpr.Precedence AlangExpr.AlangExpressionString AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class UnaryExpr : AlangExpr Remarks Base class for all postfix unary operations in Alang expressions, such as option (?), Kleene star (*), Kleene plus (+), and complement (~). Constructors | Edit this page View Source UnaryExpr(AlangExpr) Postfix unary expression in the Alang language. Declaration protected UnaryExpr(AlangExpr operand) Parameters Type Name Description AlangExpr operand Operand of the postfix unary expression. Remarks Base class for all postfix unary operations in Alang expressions, such as option (?), Kleene star (*), Kleene plus (+), and complement (~). Properties | Edit this page View Source Operand Operand of the postfix unary expression. Declaration public AlangExpr Operand { get; } Property Value Type Description AlangExpr"
  },
  "Automata.Core.Alang.Union.html": {
    "href": "Automata.Core.Alang.Union.html",
    "title": "Class Union | Automata Docs",
    "keywords": "Class Union Inheritance object AlangExpr InfixBinary Union Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Union : InfixBinary Constructors | Edit this page View Source Union(AlangExpr, AlangExpr) Declaration public Union(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.Wildcard.html": {
    "href": "Automata.Core.Alang.Wildcard.html",
    "title": "Class Wildcard | Automata Docs",
    "keywords": "Class Wildcard Represents a wildcard expression in the Alang (Automata language). Inheritance object AlangExpr Wildcard Inherited Members AlangExpr.IsEmptyString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Wildcard : AlangExpr Remarks A wildcard that matches any atom in the Alphabet. Properties | Edit this page View Source AlangExpressionString String representation of this expression in valid Alang language syntax. Declaration public override string AlangExpressionString { get; } Property Value Type Description string Overrides AlangExpr.AlangExpressionString | Edit this page View Source Precedence Precedence level of this expression according to Alang grammar specification. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.html": {
    "href": "Automata.Core.Alang.html",
    "title": "Namespace Automata.Core.Alang | Automata Docs",
    "keywords": "Namespace Automata.Core.Alang Classes AlangExpr Represents an expression in the Alang (Automata language) used for defining finite-state automata. AlangFormatException Represents an exception that is thrown when an error occurs during parsing of Alang expressions. Atom Atomic expression in the Alang language used for defining finite-state automata. Chars Character definitions and utility methods for Alang. Complement Represents a complement expression in the Alang language. Concatenation Represents a concatenation operation in the Alang grammar. Difference Represents a difference expression in the Alang grammar. EmptySet Represents an empty set expression in the Alang (Automata language). InfixBinary Represents a binary infix expression in the Alang language. Intersection Represents an intersection expression in the Alang grammar specification. KleenePlus Represents a Kleene plus unary expression in the Alang language. KleeneStar Represents a Kleene star operation in the Alang language. Option Represents an option expression in the Alang language. UnaryExpr Postfix unary expression in the Alang language. Union Wildcard Represents a wildcard expression in the Alang (Automata language). Structs AlangCursor Represents a cursor for parsing Alang expressions from an input string. Enums ParseErrorType Specifies the type of parsing error encountered in Alang expressions.\"/>"
  },
  "Automata.Core.CanonicalAlphabet.html": {
    "href": "Automata.Core.CanonicalAlphabet.html",
    "title": "Class CanonicalAlphabet | Automata Docs",
    "keywords": "Class CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Inheritance object CanonicalAlphabet Implements IEquatable<CanonicalAlphabet> IAlphabet Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class CanonicalAlphabet : IEquatable<CanonicalAlphabet>, IAlphabet Remarks A CanonicalAlphabet is defined by the following properties: Immutable: Structural and behavioral invariance, ensuring thread safety and predictable behavior. Performance: Optimized for fast, read-only operations with minimal memory overhead. Ordering: Symbols are sorted according to CanonicalStringComparer. Indexing: Symbols are associated with contiguous, ordered integer indices [0..Count). Constructors | Edit this page View Source CanonicalAlphabet(IEnumerable<string>) Initializes a new instance of the CanonicalAlphabet class with the specified symbols. Declaration public CanonicalAlphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols Symbols to initialize the alphabet with. Fields | Edit this page View Source StringToIndexMap Declaration public readonly FrozenDictionary<string, int> StringToIndexMap Field Value Type Description FrozenDictionary<string, int> Properties | Edit this page View Source CanonicalStringComparer Canonical string comparer used by an alphabet, used to ensure canonical ordering of symbols, when required. Declaration public static StringComparer CanonicalStringComparer { get; } Property Value Type Description StringComparer | Edit this page View Source Count Number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Empty An empty CanonicalAlphabet without any symbols. Declaration public static CanonicalAlphabet Empty { get; } Property Value Type Description CanonicalAlphabet | Edit this page View Source this[int] Symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index Index of the symbol. Property Value Type Description string Symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol Symbol to get the index of. Property Value Type Description int Index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. | Edit this page View Source Symbols Read-only collection of symbols in the alphabet. Declaration public IReadOnlyCollection<string> Symbols { get; } Property Value Type Description IReadOnlyCollection<string> Methods | Edit this page View Source Contains(string) Indicates whether the alphabet contains the specified symbol. Declaration public bool Contains(string symbol) Parameters Type Name Description string symbol Symbol to check. Returns Type Description bool true iff the alphabet contains the symbol. | Edit this page View Source Equals(CanonicalAlphabet?) Indicates whether the current alphabet is equal (identical) to another alphabet. Declaration public bool Equals(CanonicalAlphabet? other) Parameters Type Name Description CanonicalAlphabet other Returns Type Description bool | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Hash code for the current alphabet. Declaration public override int GetHashCode() Returns Type Description int A hash code for the alphabet. Overrides object.GetHashCode() | Edit this page View Source ToString() String that represents the current alphabet, including its size. Declaration public override string ToString() Returns Type Description string A string representation of the alphabet. Overrides object.ToString() | Edit this page View Source ToStringExpanded() String with each symbol and its index, separated by a newline. Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Operators | Edit this page View Source operator ==(CanonicalAlphabet, CanonicalAlphabet) Indicates whether two specified instances of CanonicalAlphabet are equal. Declaration public static bool operator ==(CanonicalAlphabet left, CanonicalAlphabet right) Parameters Type Name Description CanonicalAlphabet left First alphabet to compare. CanonicalAlphabet right Second alphabet to compare. Returns Type Description bool true iff the two alphabets are equal. | Edit this page View Source operator !=(CanonicalAlphabet, CanonicalAlphabet) Indicates whether two specified instances of CanonicalAlphabet are not equal. Declaration public static bool operator !=(CanonicalAlphabet left, CanonicalAlphabet right) Parameters Type Name Description CanonicalAlphabet left First alphabet to compare. CanonicalAlphabet right Second alphabet to compare. Returns Type Description bool true iff the two alphabets are not equal. Implements IEquatable<T> IAlphabet See Also Cfa"
  },
  "Automata.Core.Cfa.html": {
    "href": "Automata.Core.Cfa.html",
    "title": "Class Cfa | Automata Docs",
    "keywords": "Class Cfa Canonical Finite-state Automaton (CFA). Inheritance object Cfa Implements IEquatable<Cfa> IEnumerable<Transition> IEnumerable IDfa IFsa Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Cfa : IEquatable<Cfa>, IEnumerable<Transition>, IEnumerable, IDfa, IFsa Remarks The Cfa is the most optimized automaton representation, characterized by: Deterministic and Minimal: The least possible states and transitions (Similarly to a minimized DFA). Canonical alphabet: Reduced, contiguous, and lexicographically ordered. Canonical states and transitions: contiguously indexed, optimized, and fully ordered. Immutable: Guarantees structural and behavioral invariance. Performance-optimized for efficient read-only operations. Minimal memory footprint. Key attribute for CFAs: For any language, there exists exactly one specific Cfa. Any two automata that accept the same language will, when converted, yield two Cfa that are precisely identical in all aspects. Constructors | Edit this page View Source Cfa(IFsa) Initializes a new instance of the Cfa class from an existing FSA. Declaration public Cfa(IFsa fsa) Parameters Type Name Description IFsa fsa Finite state automaton to convert. Fields | Edit this page View Source FinalStates Final states of the CFA. Declaration public readonly FrozenSet<int> FinalStates Field Value Type Description FrozenSet<int> | Edit this page View Source StateCount Number of states in the CFA. Declaration public readonly int StateCount Field Value Type Description int Properties | Edit this page View Source Alphabet Alphabet used by the CFA. Declaration public CanonicalAlphabet Alphabet { get; } Property Value Type Description CanonicalAlphabet | Edit this page View Source InitialState Initial state. Always 0 for a non-empty Cfa. For an empty Cfa, the initial state is InvalidState. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEmpty Indicates whether the CFA is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source TransitionCount Number of transitions in the automaton. Declaration public int TransitionCount { get; } Property Value Type Description int Methods | Edit this page View Source EpsilonTransitions() Gets an enumerable collection of the epsilon transitions, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> An empty enumerable collection of EpsilonTransition. | Edit this page View Source Equals(Cfa?) Indicates language equivalence between two CFAs. Declaration public bool Equals(Cfa? other) Parameters Type Name Description Cfa other Object to compare with this object. Returns Type Description bool true iff the current CFA is equal to other. Remarks Equality means both CFAs accept the same language, but will due to the canonical property, also be identical. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the transitions. Declaration public IEnumerator<Transition> GetEnumerator() Returns Type Description IEnumerator<Transition> An enumerator for the transitions. | Edit this page View Source GetHashCode() Hash code for the current alphabet. Declaration public override int GetHashCode() Returns Type Description int A hash code for the alphabet. Overrides object.GetHashCode() | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is the initial state. | Edit this page View Source State(int) Returns a StateView for the given state. Declaration public StateView State(int state) Parameters Type Name Description int state State. Returns Type Description StateView A StateView containing the transitions from the given state. | Edit this page View Source SymbolicTransitions() Gets an enumerable collection of the symbolic transitions. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> An enumerable collection of Transition(int, int). | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState Source state. int symbol Symbol of the transition. Returns Type Description Transition The transition from the given state with the given symbol, or Invalid if no such transition exists. Operators | Edit this page View Source operator ==(Cfa, Cfa) Indicates whether two specified instances of Cfa are equal. Declaration public static bool operator ==(Cfa left, Cfa right) Parameters Type Name Description Cfa left First Cfa to compare. Cfa right Second Cfa to compare. Returns Type Description bool true iff the two Cfa instances are equal. | Edit this page View Source operator !=(Cfa, Cfa) Indicates whether two specified instances of Cfa are not equal. Declaration public static bool operator !=(Cfa left, Cfa right) Parameters Type Name Description Cfa left First Cfa to compare. Cfa right Second Cfa to compare. Returns Type Description bool false iff the two Cfa instances are not equal. Implements IEquatable<T> IEnumerable<T> IEnumerable IDfa IFsa"
  },
  "Automata.Core.Constants.html": {
    "href": "Automata.Core.Constants.html",
    "title": "Class Constants | Automata Docs",
    "keywords": "Class Constants Class representing automata related constants. Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public static class Constants Fields | Edit this page View Source InvalidState Denotes an invalid state. Declaration public const int InvalidState = -1 Field Value Type Description int -1 indicating an invalid state. | Edit this page View Source InvalidSymbolIndex Denotes an invalid symbol. Declaration public const int InvalidSymbolIndex = -1 Field Value Type Description int -1 indicating an invalid symbol index."
  },
  "Automata.Core.Dfa.html": {
    "href": "Automata.Core.Dfa.html",
    "title": "Class Dfa | Automata Docs",
    "keywords": "Class Dfa Deterministic finite automaton (DFA). Inheritance object Dfa Implements IDfa IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Dfa : IDfa, IFsa Remarks A DFA is a finite state machine that accepts or rejects finite sequences of symbols. It is always deterministic and does not contain epsilon transitions. Constructors | Edit this page View Source Dfa() Initializes a new instance of the Dfa class with an empty alphabet. Declaration public Dfa() | Edit this page View Source Dfa(MutableAlphabet) Initializes a new instance of the Dfa class with the specified alphabet. Declaration public Dfa(MutableAlphabet alphabet) Parameters Type Name Description MutableAlphabet alphabet Alphabet used by the DFA. Properties | Edit this page View Source Alphabet Alphabet used by the DFA. Declaration public MutableAlphabet Alphabet { get; } Property Value Type Description MutableAlphabet | Edit this page View Source FinalStates Final states of the DFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialState Initial state of the DFA. Declaration public int InitialState { get; } Property Value Type Description int Remarks Returns InvalidState if the DFA has no initial state. | Edit this page View Source IsEmpty Indicates whether the DFA is empty. A DFA is considered empty if it has no initial state. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source MaxState Upper bound for the maximum state number in the DFA. Declaration public int MaxState { get; } Property Value Type Description int Remarks This value represents an upper limit for state numbers in the DFA. The actual maximum state number may be lower, as removed states are not tracked for performance reasons. Methods | Edit this page View Source Accepts(IEnumerable<string>) Indicates whether the DFA accepts the given sequence of symbols. Declaration public bool Accepts(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence Sequence of symbols to check. Returns Type Description bool true iff the DFA accepts the sequence. Remarks The DFA processes each symbol in the sequence, transitioning between states according to its transition function. If the DFA reaches a final state after processing all symbols, the sequence is accepted. | Edit this page View Source Add(Transition) Adds a transition to the DFA, ensuring it remains deterministic. Declaration public bool Add(Transition transition) Parameters Type Name Description Transition transition Transition to add. Returns Type Description bool true iff the transition was added. Remarks If adding the transition would introduce nondeterminism (i.e., a transition with the same from-state and symbol already exists), the new transition will not be added. | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the DFA, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> An empty enumerable collection of EpsilonTransition. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is the initial state. | Edit this page View Source Minimized() Minimizes the DFA using Brzozowski's algorithm. Declaration public Dfa Minimized() Returns Type Description Dfa A minimized DFA. Remarks This algorithm involves reversing the DFA, determinizing it, reversing it again, and determinizing it once more. | Edit this page View Source ReachableState(int, int) Returns the state reachable from the given state on the given symbol. Declaration public int ReachableState(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. | Edit this page View Source Reversed() Creates a new NFA that recognizes the reverse of the language accepted by this DFA. Declaration public Nfa Reversed() Returns Type Description Nfa An NFA representing the reversed DFA. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state State to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(int) Sets the initial state of the DFA, updating the maximum state number if necessary. Declaration public void SetInitial(int state) Parameters Type Name Description int state State to set as the initial state. | Edit this page View Source State(int) Returns a StateView of the given state. Declaration public StateView State(int fromState) Parameters Type Name Description int fromState From state. Returns Type Description StateView A StateView for the given state. Remarks This method provides a read-only view of the state transitions from the specified state. It is primarily for compatibility with contiguous memory representations like Cfa. When possible, use Transitions(int), which avoids memory allocation and has less overhead. | Edit this page View Source SymbolicTransitions() Gets the transitions of the DFA. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> An enumerable collection of transitions. | Edit this page View Source ToCFA() Converts the DFA to a canonical finite automaton (CFA). Declaration public Cfa ToCFA() Returns Type Description Cfa A CFA representing the DFA. | Edit this page View Source ToNFA() Converts the DFA to a nondeterministic finite automaton (NFA). Declaration public Nfa ToNFA() Returns Type Description Nfa An NFA representing the DFA. | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description Transition The transition from the given state on the given symbol, or Invalid if no such transition exists. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState State from which to start. Returns Type Description SortedSet<Transition> Set of transitions from the given state. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds all provided transitions that are currently not present in the set. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions Transitions to add. Implements IDfa IFsa"
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | Automata Docs",
    "keywords": "Struct EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. Implements IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct EpsilonTransition : IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Remarks An epsilon transition is a transition that lacks a symbol. Epsilon transitions can only exist in non-deterministic finite automata (NFA). Constructors | Edit this page View Source EpsilonTransition(int, int) An epsilon transition in an automaton, defined by a starting state and an ending state. Declaration public EpsilonTransition(int FromState, int ToState) Parameters Type Name Description int FromState The state origin of the transition. int ToState The destination state of the transition. Remarks An epsilon transition is a transition that lacks a symbol. Epsilon transitions can only exist in non-deterministic finite automata (NFA). Fields | Edit this page View Source Epsilon String representation for ε - the empty epsilon string. Epsilon is not part of any alphabet; the symbol is used solely for output purposes, never for computation. Declaration public const string Epsilon = \"ε\" Field Value Type Description string Properties | Edit this page View Source FromState The state origin of the transition. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source ToState The destination state of the transition. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. Declaration public int CompareTo(EpsilonTransition other) Parameters Type Name Description EpsilonTransition other Other epsilon transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source MaxTrans(int) Declaration public static EpsilonTransition MaxTrans(int fromState) Parameters Type Name Description int fromState Returns Type Description EpsilonTransition | Edit this page View Source MinTrans(int) Declaration public static EpsilonTransition MinTrans(int fromState) Parameters Type Name Description int fromState Returns Type Description EpsilonTransition | Edit this page View Source Reverse() Reverses the epsilon transition. Declaration public EpsilonTransition Reverse() Returns Type Description EpsilonTransition A new EpsilonTransition with the from and to states swapped. Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.IAlphabet.html": {
    "href": "Automata.Core.IAlphabet.html",
    "title": "Interface IAlphabet | Automata Docs",
    "keywords": "Interface IAlphabet Common interface for an alphabet associated with a finite state automaton. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IAlphabet Properties | Edit this page View Source Count Number of symbols in the alphabet. Declaration int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Symbol at the specified index. Declaration string this[int index] { get; } Parameters Type Name Description int index Index of the symbol. Property Value Type Description string Symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Index of the specified symbol. Declaration int this[string symbol] { get; } Parameters Type Name Description string symbol Symbol to get the index of. Property Value Type Description int Index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. | Edit this page View Source Symbols Read-only collection of symbols in the alphabet. Declaration IReadOnlyCollection<string> Symbols { get; } Property Value Type Description IReadOnlyCollection<string> Methods | Edit this page View Source Contains(string) Indicates whether the alphabet contains the specified symbol. Declaration bool Contains(string symbol) Parameters Type Name Description string symbol Symbol to check. Returns Type Description bool true iff the alphabet contains the symbol. | Edit this page View Source ToString() String representation of the current alphabet. Declaration string ToString() Returns Type Description string A string representation of the current alphabet. | Edit this page View Source ToStringExpanded() String with each symbol and its index, separated by a newline. Declaration string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline."
  },
  "Automata.Core.IDfa.html": {
    "href": "Automata.Core.IDfa.html",
    "title": "Interface IDfa | Automata Docs",
    "keywords": "Interface IDfa Common interface for deterministic finite automata, such as Dfa and Cfa. Inherited Members IFsa.Alphabet IFsa.IsEmpty IFsa.IsEpsilonFree IFsa.IsInitial(int) IFsa.IsFinal(int) IFsa.SymbolicTransitions() IFsa.EpsilonTransitions() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IDfa : IFsa Properties | Edit this page View Source InitialState Initial state of the deterministic automaton. Declaration int InitialState { get; } Property Value Type Description int Methods | Edit this page View Source State(int) Read-only view of the state from the specified state. Declaration StateView State(int fromState) Parameters Type Name Description int fromState State from which to get the state view. Returns Type Description StateView A StateView representing the state view from the specified state."
  },
  "Automata.Core.IFsa.html": {
    "href": "Automata.Core.IFsa.html",
    "title": "Interface IFsa | Automata Docs",
    "keywords": "Interface IFsa Finite state automaton (FSA) interface. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IFsa Properties | Edit this page View Source Alphabet Alphabet used by the FSA. Declaration IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source IsEmpty Indicates whether the FSA is empty, meaning it has no states or transitions. Declaration bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the FSA is epsilon-free. Declaration bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source EpsilonTransitions() Epsilon transitions of the FSA. Declaration IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is an initial state. | Edit this page View Source SymbolicTransitions() Transitions of the FSA. Declaration IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition>"
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | Automata Docs",
    "keywords": "Class IntSet Immutable set of integers. Inheritance object IntSet Implements IEquatable<IntSet> IReadOnlySet<int> IReadOnlyCollection<int> IEnumerable<int> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class IntSet : IEquatable<IntSet>, IReadOnlySet<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable Constructors | Edit this page View Source IntSet(HashSet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(HashSet<int> elements) Parameters Type Name Description HashSet<int> elements Elements to include in the set. | Edit this page View Source IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(IEnumerable<int> elements) Parameters Type Name Description IEnumerable<int> elements Elements to include in the set. | Edit this page View Source IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(ISet<int> elements) Parameters Type Name Description ISet<int> elements Elements to include in the set. Properties | Edit this page View Source Count Number of elements in the set. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Contains(int) Determines if the set contains a specific item. Declaration public bool Contains(int item) Parameters Type Name Description int item The item to check if the set contains. Returns Type Description bool true if found; otherwise false. | Edit this page View Source Equals(IntSet?) Indicates whether the current set is equal to another set. Declaration public bool Equals(IntSet? other) Parameters Type Name Description IntSet other Other set to compare to. Returns Type Description bool true iff the sets are equal. | Edit this page View Source Equals(object?) Indicates whether the current set is equal to another object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Object to compare to. Returns Type Description bool true iff the object is an IntSet and the sets are equal. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator<int> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Hash code for the current set. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current set. Overrides object.GetHashCode() | Edit this page View Source IsProperSubsetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsProperSupersetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the collection is a proper superset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSubsetOf(IEnumerable<int>) Determine whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSupersetOf(IEnumerable<int>) Determine whether the current set is a super set of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source Overlaps(IEnumerable<int>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool trueif the current set and other share at least one common element; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source SetEquals(IEnumerable<int>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source ToString() String that represents the current set. Declaration public override string ToString() Returns Type Description string A string that represents the current set. Overrides object.ToString() Implements IEquatable<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.MutableAlphabet.html": {
    "href": "Automata.Core.MutableAlphabet.html",
    "title": "Class MutableAlphabet | Automata Docs",
    "keywords": "Class MutableAlphabet Mutable alphabet associated with a finite state automaton. Inheritance object MutableAlphabet Implements IAlphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class MutableAlphabet : IAlphabet Constructors | Edit this page View Source MutableAlphabet() Initializes a new instance of the MutableAlphabet class. Declaration public MutableAlphabet() | Edit this page View Source MutableAlphabet(CanonicalAlphabet) Initializes a new instance of the MutableAlphabet class from an existing CanonicalAlphabet. Declaration public MutableAlphabet(CanonicalAlphabet alphabet) Parameters Type Name Description CanonicalAlphabet alphabet Canonical alphabet to initialize from. | Edit this page View Source MutableAlphabet(IEnumerable<string>) Initializes a new instance of the MutableAlphabet class with the specified symbols. Declaration public MutableAlphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols Symbols to initialize the alphabet with. Properties | Edit this page View Source Count Number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index Index of the symbol to get. Property Value Type Description string Symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol Symbol whose index to get. Property Value Type Description int Index of the specified symbol, or InvalidSymbolIndex if not found. | Edit this page View Source Symbols Read-only collection of symbols in the alphabet. Declaration public IReadOnlyCollection<string> Symbols { get; } Property Value Type Description IReadOnlyCollection<string> Methods | Edit this page View Source AddAll(IEnumerable<string>) Adds all the specified symbols to the alphabet that are not already present. Declaration public void AddAll(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols Symbols to add. | Edit this page View Source Contains(string) Indicates whether the alphabet contains the specified symbol. Declaration public bool Contains(string symbol) Parameters Type Name Description string symbol Symbol to locate in the alphabet. Returns Type Description bool true iff the symbol is found; otherwise, false. | Edit this page View Source GetOrAdd(string) Index of the specified symbol or adds it if it does not exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol Symbol to get or add. Returns Type Description int Index of the specified symbol. | Edit this page View Source ToString() String that represents the current alphabet, including its size. Declaration public override string ToString() Returns Type Description string A string representation of the alphabet. Overrides object.ToString() | Edit this page View Source ToStringExpanded() String with each symbol and its index, separated by a newline. Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Implements IAlphabet"
  },
  "Automata.Core.Nfa.html": {
    "href": "Automata.Core.Nfa.html",
    "title": "Class Nfa | Automata Docs",
    "keywords": "Class Nfa Nondeterministic finite automaton (NFA). Inheritance object Nfa Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Nfa : IFsa Remarks States are represented simply as integers (int), which essentially are just unique IDs. NFAs are defined mainly by two sets of transitions (symbolic and epsilon), which are kept separate for performance. In addition, there are two sets defining the initial states and final states respectively. NFAs (in contrast to DFAs) can have multiple initial states. Constructors | Edit this page View Source Nfa() Initializes a new instance of the Nfa class with an empty alphabet. Declaration public Nfa() | Edit this page View Source Nfa(MutableAlphabet) Initializes a new instance of the Nfa class with the specified alphabet. Declaration public Nfa(MutableAlphabet alphabet) Parameters Type Name Description MutableAlphabet alphabet Alphabet used by the NFA. | Edit this page View Source Nfa(IEnumerable<IEnumerable<string>>) Initializes a new instance of a Nfa class to accept a set of sequences. Declaration public Nfa(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Sequences to add to the NFA. Properties | Edit this page View Source Alphabet Alphabet used by the NFA. Declaration public MutableAlphabet Alphabet { get; } Property Value Type Description MutableAlphabet | Edit this page View Source FinalStates Final states of the NFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialStates Initial states of the NFA. Declaration public IReadOnlySet<int> InitialStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source IsEmpty Indicates whether the NFA is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the NFA is epsilon-free. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source MaxState Upper bound for the maximum state number in the NFA. Declaration public int MaxState { get; } Property Value Type Description int Remarks This values denotes an upper bound for the state numbers in the NFA. The actual maximum state number may be lower (but not higher), since we do not keep track of removed states for performance reasons. Methods | Edit this page View Source Add(EpsilonTransition) Adds an epsilon transition to the NFA. Declaration public void Add(EpsilonTransition transition) Parameters Type Name Description EpsilonTransition transition Transition to add. | Edit this page View Source Add(Transition) Adds a symbolic (non-epsilon) transition to the NFA. Declaration public void Add(Transition transition) Parameters Type Name Description Transition transition Transition to add. | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns the set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates States from which to start. Returns Type Description IntSet Set of symbols that can be used to transition directly from the given states. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state State to check. Returns Type Description bool true iff the specified state is an initial state; otherwise, false. | Edit this page View Source ReachableStates(IEnumerable<int>, int) Returns the states reachable from the given states on the given symbol, including epsilon closures. Declaration public IntSet ReachableStates(IEnumerable<int> fromStates, int symbol) Parameters Type Name Description IEnumerable<int> fromStates States from which to start. int symbol Symbol to transition on. Returns Type Description IntSet States reachable from the given states on the given symbol, including epsilon closures. | Edit this page View Source ReachableStatesOnEpsilonInPlace(HashSet<int>) Extends the provided set of states with their epsilon closure in place. Declaration public void ReachableStatesOnEpsilonInPlace(HashSet<int> fromStates) Parameters Type Name Description HashSet<int> fromStates Set of states to extend. Remarks Epsilon closure is all reachable states on epsilon transitions. | Edit this page View Source ReachableStatesOnSingleEpsilon(int) Returns the states reachable from the given state on a single epsilon transition. If the input state has an epsilon loop on itself, it will be included in the result. Declaration public IEnumerable<int> ReachableStatesOnSingleEpsilon(int fromState) Parameters Type Name Description int fromState State from which to start. Returns Type Description IEnumerable<int> States reachable from the given state on a single epsilon transition. | Edit this page View Source ReachableStatesOnSingleSymbol(int, int) Returns the states reachable from the given state with the given symbol. Declaration public IEnumerable<int> ReachableStatesOnSingleSymbol(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description IEnumerable<int> States reachable from the given state on the given symbol. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state State to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. Declaration public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters Type Name Description IEnumerable<int> states States to set or remove as initial states. bool initial If true, the states are added to the initial states; otherwise, they are removed. | Edit this page View Source SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. Declaration public void SetInitial(int state, bool initial = true) Parameters Type Name Description int state State to set or remove as an initial state. bool initial If true, the state is added to the initial states; otherwise, it is removed. | Edit this page View Source ToCfa() Converts the NFA to a CFA. Declaration public Cfa ToCfa() Returns Type Description Cfa A CFA representing the NFA. | Edit this page View Source ToDfa() Converts the NFA to a DFA. Declaration public Dfa ToDfa() Returns Type Description Dfa A DFA representing the NFA. | Edit this page View Source ToMinimizedDFA() Converts the NFA to a minimized DFA. Declaration public Dfa ToMinimizedDFA() Returns Type Description Dfa A minimized DFA representing the NFA. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState State from which to start. Returns Type Description SortedSet<Transition> Set of transitions from the given state. | Edit this page View Source Transitions(int, int) Returns the transitions from the given state with the given symbol. Declaration public SortedSet<Transition> Transitions(int fromState, int symbol) Parameters Type Name Description int fromState State from which to start. int symbol Symbol to transition on. Returns Type Description SortedSet<Transition> Transitions from the given state on the given symbol. | Edit this page View Source UnionWith(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. Declaration public void UnionWith(IEnumerable<EpsilonTransition> transitions) Parameters Type Name Description IEnumerable<EpsilonTransition> transitions Transitions to add. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds multiple symbolic transitions to the NFA. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions Transitions to add. | Edit this page View Source UnionWith(IEnumerable<IEnumerable<string>>) Adds a set of sequences to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source UnionWith(IEnumerable<string>) Adds a sequence of symbols to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence Sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. Implements IFsa"
  },
  "Automata.Core.Operations.Ops.html": {
    "href": "Automata.Core.Operations.Ops.html",
    "title": "Class Ops | Automata Docs",
    "keywords": "Class Ops Provides operations for finite automata. Inheritance object Ops Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Operations Assembly: Automata.Core.dll Syntax public static class Ops Methods | Edit this page View Source Complement(Cfa) Complement of a given canonical finite automaton (CFA). Declaration public static Dfa Complement(Cfa cfa) Parameters Type Name Description Cfa cfa The canonical finite automaton to complement. Returns Type Description Dfa A new deterministic finite automaton (DFA) representing the complement of the input CFA. | Edit this page View Source Difference(IDfa, Cfa) Computes the difference between two deterministic finite automata (DFAs). Declaration public static Dfa Difference(IDfa minuend, Cfa subtrahend) Parameters Type Name Description IDfa minuend The DFA from which to subtract. Cfa subtrahend The DFA whose language will be subtracted from the minuend. Returns Type Description Dfa A new Dfa representing the language of the minuend DFA minus the language of the subtrahend DFA. Remarks This operation effectively removes all strings recognized by the subtrahend DFA from the minuend DFA. | Edit this page View Source Intersection(IDfa, IDfa) Computes the intersection of two deterministic finite automata (IDFAs). The resulting automaton accepts only the strings that are accepted by both input automata. Declaration public static Dfa Intersection(IDfa a, IDfa b) Parameters Type Name Description IDfa a The first finite automaton. IDfa b The second finite automaton. Returns Type Description Dfa A deterministic finite automaton representing the intersection of the two input automata. | Edit this page View Source ToDfa(Nfa) Determinization of an NFA representation to a DFA. Declaration public static Dfa ToDfa(Nfa nfa) Parameters Type Name Description Nfa nfa The input nondeterministic finite automaton. Returns Type Description Dfa A new DFA equivalent to the NFA. Remarks Uses the Powerset Construction algorithm (a.k.a. Subset Construction algorithm)."
  },
  "Automata.Core.Operations.html": {
    "href": "Automata.Core.Operations.html",
    "title": "Namespace Automata.Core.Operations | Automata Docs",
    "keywords": "Namespace Automata.Core.Operations Classes Ops Provides operations for finite automata."
  },
  "Automata.Core.StateView.html": {
    "href": "Automata.Core.StateView.html",
    "title": "Struct StateView | Automata Docs",
    "keywords": "Struct StateView Read-only view of a state in an automaton, providing access to transitions from the state. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly ref struct StateView Remarks This struct uses a ReadOnlySpan which is only a view on a contiguous memory sequence of Transition(int). Constructors | Edit this page View Source StateView(int, Transition[]) Initializes a new instance of the StateView struct with a specified state and unfiltered transitions. Declaration public StateView(int fromState, Transition[] transitions) Parameters Type Name Description int fromState State from which the transitions originate. Transition[] transitions Filtered transitions from the specified state. | Edit this page View Source StateView(int, ReadOnlySpan<Transition>) Initializes a new instance of the StateView struct with a specified state and unfiltered transitions. Declaration public StateView(int fromState, ReadOnlySpan<Transition> transitions) Parameters Type Name Description int fromState State from which the transitions originate. ReadOnlySpan<Transition> transitions Filtered transitions from the specified state. Fields | Edit this page View Source Transitions Transitions from the current state. Declaration public readonly ReadOnlySpan<Transition> Transitions Field Value Type Description ReadOnlySpan<Transition> Properties | Edit this page View Source State State from which the transitions originate. Declaration public int State { get; } Property Value Type Description int Methods | Edit this page View Source Transition(int) Gets the transition for the specified symbol. Declaration public Transition Transition(int symbol) Parameters Type Name Description int symbol Symbol for which to get the transition. Returns Type Description Transition Transition for the specified symbol, or Invalid if no such transition exists."
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | Automata Docs",
    "keywords": "Struct Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Implements IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct Transition : IComparable<Transition>, IEquatable<Transition> Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Constructors | Edit this page View Source Transition() Initializes a new instance of the Transition struct that is equivalent to Invalid. Declaration public Transition() | Edit this page View Source Transition(int, int, int) Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Declaration public Transition(int FromState, int Symbol, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int Symbol The symbol that triggers the transition. int ToState The state to which the transition goes. Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source Invalid Invalid transition. Declaration public static Transition Invalid { get; } Property Value Type Description Transition | Edit this page View Source IsInvalid Indicates whether the transition is invalid. Declaration public bool IsInvalid { get; } Property Value Type Description bool | Edit this page View Source Symbol The symbol that triggers the transition. Declaration public int Symbol { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareTo(Transition) Compares the current transition to another transition. Declaration public int CompareTo(Transition other) Parameters Type Name Description Transition other Other transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source MaxTrans(int, int) Creates a maximum transition for the given state and symbol. Declaration public static Transition MaxTrans(int fromState, int symbol = 2147483647) Parameters Type Name Description int fromState From state. int symbol Symbol for the transition (default is MaxValue). Returns Type Description Transition A Transition representing the maximum transition. | Edit this page View Source MinTrans(int, int) Creates a minimum transition for the given state and symbol. Declaration public static Transition MinTrans(int fromState, int symbol = -2147483648) Parameters Type Name Description int fromState From state. int symbol Symbol for the transition (default is MinValue). Returns Type Description Transition A Transition representing the minimum transition. | Edit this page View Source Reverse() Reverses the transition. Declaration public Transition Reverse() Returns Type Description Transition A new Transition with the from and to states swapped. | Edit this page View Source ToString() String that represents the current transition. Declaration public override string ToString() Returns Type Description string A string that represents the current transition. Overrides ValueType.ToString() Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | Automata Docs",
    "keywords": "Namespace Automata.Core Classes CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Cfa Canonical Finite-state Automaton (CFA). Constants Class representing automata related constants. Dfa Deterministic finite automaton (DFA). IntSet Immutable set of integers. MutableAlphabet Mutable alphabet associated with a finite state automaton. Nfa Nondeterministic finite automaton (NFA). Structs EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. StateView Read-only view of a state in an automaton, providing access to transitions from the state. Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Interfaces IAlphabet Common interface for an alphabet associated with a finite state automaton. IDfa Common interface for deterministic finite automata, such as Dfa and Cfa. IFsa Finite state automaton (FSA) interface."
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | Automata Docs",
    "keywords": "Class GraphFactory Static class for creating displayable graphs from finite state automata. Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public static class GraphFactory Methods | Edit this page View Source CreateGraph(IFsa, bool, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). Declaration public static Graph CreateGraph(this IFsa fsa, bool displayStateIDs = false, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters Type Name Description IFsa fsa Finite state automaton to represent as a graph. bool displayStateIDs Indicates whether to display state IDs. LayerDirection layerDirection Layout direction of the graph (default: left-to-right). bool directed Indicates whether the graph is directed (default: true). Returns Type Description Graph A graph representing the finite state automaton. | Edit this page View Source CreateGraph(IEnumerable<IEnumerable<string>>, bool) Creates a displayable graph from a collection of sequences. Declaration public static Graph CreateGraph(this IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences Collection of sequences to create the graph from. bool minimize Indicates whether to minimize the DFA. Returns Type Description Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.GraphView.html": {
    "href": "Automata.Visualization.GraphView.html",
    "title": "Class GraphView | Automata Docs",
    "keywords": "Class GraphView Class for displaying finite-state automata as graphs in a separate window (and its own separate thread). Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GraphView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public class GraphView : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Remarks You do not need to involve any GUI boilerplate code to display a graph in a separate window, like calling the blocking Application.Run(), setting STA thread environment or bother about the GUI messes with your threads. Simply just create and open a graph view by calling either OpenNew() or OpenNew(Graph). This class uses the MSAGL library for layout and rendering of graphs. Methods | Edit this page View Source Dispose(bool) Disposes of the resources (other than memory) used by the Form. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Form.Dispose(bool) | Edit this page View Source Invoke(Action) Invokes the specified action on the UI thread. Declaration public void Invoke(Action action) Parameters Type Name Description Action action Action to invoke. | Edit this page View Source OpenNew() Opens a new instance of the GraphView class in a new thread. Declaration public static GraphView OpenNew() Returns Type Description GraphView A new instance of the GraphView class. | Edit this page View Source OpenNew(Graph) Opens a new instance of the GraphView class in a new thread and sets the specified graph. Declaration public static GraphView OpenNew(Graph graph) Parameters Type Name Description Graph graph Graph to display. Returns Type Description GraphView A new instance of the GraphView class with the specified graph set. | Edit this page View Source SetGraph(Graph) Displays the specified graph in the graph view. Declaration public void SetGraph(Graph graph) Parameters Type Name Description Graph graph Graph to display. Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | Automata Docs",
    "keywords": "Namespace Automata.Visualization Classes GraphFactory Static class for creating displayable graphs from finite state automata. GraphView Class for displaying finite-state automata as graphs in a separate window (and its own separate thread)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | Automata Docs",
    "keywords": "Automata documentation Welcome to the documentation for Automata. API Documentation Automata.Core Automata.Core.Alang Automata.Core.Operations Automata.Visualization Automata source code repo at GitHub ALANG - A language for definining finite-state automata. Alang grammar specification"
  }
}