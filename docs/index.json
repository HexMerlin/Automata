{
  "Automata.Core.Alphabet.html": {
    "href": "Automata.Core.Alphabet.html",
    "title": "Class Alphabet | AutomataDocs",
    "keywords": "Class Alphabet Represents an alphabet used in a finite state automaton. Inheritance object Alphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Alphabet Constructors | Edit this page View Source Alphabet() Initializes a new instance of the Alphabet class. Declaration public Alphabet() Fields | Edit this page View Source InvalidIndex Represents an invalid index. Declaration public const int InvalidIndex = -1 Field Value Type Description int Properties | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidIndex if the symbol does not exist. Methods | Edit this page View Source GetOrAdd(string) Gets the index of the specified symbol, adding it to the alphabet if it does not already exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol The symbol to get or add. Returns Type Description int The index of the specified symbol."
  },
  "Automata.Core.DFA.html": {
    "href": "Automata.Core.DFA.html",
    "title": "Class DFA | AutomataDocs",
    "keywords": "Class DFA Represents a deterministic finite automaton (DFA). Inheritance object DFA Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class DFA : IFsa Constructors | Edit this page View Source DFA() Initializes a new instance of the DFA class with an empty alphabet. Declaration public DFA() | Edit this page View Source DFA(Alphabet) Initializes a new instance of the DFA class with the specified alphabet. Declaration public DFA(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet The alphabet used by the DFA. | Edit this page View Source DFA(Alphabet, IEnumerable<Transition>, int, IEnumerable<int>) Initializes a new instance of the DFA class with the specified alphabet, transitions, initial state, and final states. Declaration public DFA(Alphabet alphabet, IEnumerable<Transition> transitions, int initialState, IEnumerable<int> finalStates) Parameters Type Name Description Alphabet alphabet The alphabet used by the DFA. IEnumerable<Transition> transitions The transitions of the DFA. int initialState The initial state of the DFA. IEnumerable<int> finalStates The final states of the DFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the DFA. Declaration public Alphabet Alphabet { get; } Property Value Type Description Alphabet | Edit this page View Source EpsilonFree Gets a value indicating whether the DFA is epsilon-free. Declaration public bool EpsilonFree { get; } Property Value Type Description bool | Edit this page View Source EpsilonTransitions Gets the epsilon transitions of the DFA, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions { get; } Property Value Type Description IEnumerable<EpsilonTransition> | Edit this page View Source FinalStates Gets the final states of the DFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialState Gets or sets the initial state of the DFA. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source Transitions Gets the transitions of the DFA. Declaration public IEnumerable<Transition> Transitions { get; } Property Value Type Description IEnumerable<Transition> Methods | Edit this page View Source AddTransition(Transition) Adds a transition to the DFA. Declaration public void AddTransition(Transition transition) Parameters Type Name Description Transition transition The transition to add. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is the initial state; otherwise, false. | Edit this page View Source Minimized() Minimizes the DFA. Declaration public DFA Minimized() Returns Type Description DFA A minimized DFA. | Edit this page View Source Reversed() Reverses the DFA. Declaration public NFA Reversed() Returns Type Description NFA An NFA representing the reversed DFA. | Edit this page View Source ToNFA() Converts the DFA to an NFA. Declaration public NFA ToNFA() Returns Type Description NFA An NFA representing the DFA. Implements IFsa"
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | AutomataDocs",
    "keywords": "Struct EpsilonTransition Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Implements IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct EpsilonTransition : IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Constructors | Edit this page View Source EpsilonTransition(int, int) Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Declaration public EpsilonTransition(int FromState, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int ToState The state to which the transition goes. Fields | Edit this page View Source Epsilon Denotes the string representation for ε - the empty epsilon string. Epsilon is not part of any alphabet, the symbol is used solely for output purposes, never for computation. Declaration public const string Epsilon = \"ε\" Field Value Type Description string Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareByToState() Gets a comparer that compares epsilon transitions by their to states. Declaration public static Comparer<EpsilonTransition> CompareByToState() Returns Type Description Comparer<EpsilonTransition> A comparer that compares epsilon transitions by their to states. | Edit this page View Source CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. Declaration public int CompareTo(EpsilonTransition other) Parameters Type Name Description EpsilonTransition other The other epsilon transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the epsilon transition. Declaration public EpsilonTransition Reverse() Returns Type Description EpsilonTransition A new EpsilonTransition with the from and to states swapped. Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.IFsa.html": {
    "href": "Automata.Core.IFsa.html",
    "title": "Interface IFsa | AutomataDocs",
    "keywords": "Interface IFsa Represents a finite state automaton (FSA) interface. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IFsa Properties | Edit this page View Source Alphabet Gets the alphabet used by the FSA. Declaration Alphabet Alphabet { get; } Property Value Type Description Alphabet | Edit this page View Source EpsilonFree Gets a value indicating whether the FSA is epsilon-free. Declaration bool EpsilonFree { get; } Property Value Type Description bool | Edit this page View Source EpsilonTransitions Gets the epsilon transitions of the FSA. Declaration IEnumerable<EpsilonTransition> EpsilonTransitions { get; } Property Value Type Description IEnumerable<EpsilonTransition> | Edit this page View Source Transitions Gets the transitions of the FSA. Declaration IEnumerable<Transition> Transitions { get; } Property Value Type Description IEnumerable<Transition> Methods | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false."
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | AutomataDocs",
    "keywords": "Class IntSet Represents an immutable set of integers. Inheritance object IntSet Implements IEquatable<IntSet> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class IntSet : IEquatable<IntSet> Constructors | Edit this page View Source IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(IEnumerable<int> elements) Parameters Type Name Description IEnumerable<int> elements The elements to include in the set. | Edit this page View Source IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(ISet<int> elements) Parameters Type Name Description ISet<int> elements The elements to include in the set. Properties | Edit this page View Source Count Gets the number of elements in the set. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Members Gets the members of the set. Declaration public FrozenSet<int> Members { get; } Property Value Type Description FrozenSet<int> Methods | Edit this page View Source Equals(IntSet?) Indicates whether the current set is equal to another set. Declaration public bool Equals(IntSet? other) Parameters Type Name Description IntSet other The other set to compare to. Returns Type Description bool true if the sets are equal; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether the current set is equal to another object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare to. Returns Type Description bool true if the object is an IntSet and the sets are equal; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Gets the hash code for the current set. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current set. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current set. Declaration public override string ToString() Returns Type Description string A string that represents the current set. Overrides object.ToString() Implements IEquatable<T>"
  },
  "Automata.Core.NFA.html": {
    "href": "Automata.Core.NFA.html",
    "title": "Class NFA | AutomataDocs",
    "keywords": "Class NFA Represents a nondeterministic finite automaton (NFA). Inheritance object NFA Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class NFA : IFsa Constructors | Edit this page View Source NFA() Initializes a new instance of the NFA class with an empty alphabet. Declaration public NFA() | Edit this page View Source NFA(Alphabet) Initializes a new instance of the NFA class with the specified alphabet. Declaration public NFA(Alphabet alphabet) Parameters Type Name Description Alphabet alphabet The alphabet used by the NFA. | Edit this page View Source NFA(IEnumerable<IEnumerable<string>>) Initializes a new instance of a NFA class from a set of sequences. Declaration public NFA(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the NFA. Declaration public Alphabet Alphabet { get; } Property Value Type Description Alphabet | Edit this page View Source EpsilonFree Gets a value indicating whether the NFA is epsilon-free. Declaration public bool EpsilonFree { get; } Property Value Type Description bool | Edit this page View Source EpsilonTransitions Gets the epsilon transitions of the NFA. Declaration public IReadOnlySet<EpsilonTransition> EpsilonTransitions { get; } Property Value Type Description IReadOnlySet<EpsilonTransition> | Edit this page View Source FinalStates Gets the final states of the NFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialStates Gets the initial states of the NFA. Declaration public IReadOnlySet<int> InitialStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source Transitions Gets the non-epsilon transitions of the NFA. Declaration public IReadOnlySet<Transition> Transitions { get; } Property Value Type Description IReadOnlySet<Transition> Methods | Edit this page View Source Add(EpsilonTransition) Adds an epsilon transition to the NFA. Declaration public void Add(EpsilonTransition transition) Parameters Type Name Description EpsilonTransition transition The transition to add. | Edit this page View Source Add(Transition) Adds a non-epsilon transition to the NFA. Declaration public void Add(Transition transition) Parameters Type Name Description Transition transition The transition to add. | Edit this page View Source Add(IEnumerable<string>) Adds a sequence of symbols to the NFA. Declaration public void Add(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence The sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source AddAll(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. Declaration public void AddAll(IEnumerable<EpsilonTransition> transitions) Parameters Type Name Description IEnumerable<EpsilonTransition> transitions The transitions to add. | Edit this page View Source AddAll(IEnumerable<Transition>) Adds multiple non-epsilon transitions to the NFA. Declaration public void AddAll(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The transitions to add. | Edit this page View Source AddAll(IEnumerable<IEnumerable<string>>) Adds a set of sequences to the NFA. Declaration public void AddAll(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source FindMaxState() Finds the maximum state in the NFA. Declaration public int FindMaxState() Returns Type Description int The maximum state in the NFA. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state The state to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. Declaration public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as initial states. bool initial If true, the states are added to the initial states; otherwise, they are removed. | Edit this page View Source SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. Declaration public void SetInitial(int state, bool initial = true) Parameters Type Name Description int state The state to set or remove as an initial state. bool initial If true, the state is added to the initial states; otherwise, it is removed. | Edit this page View Source ToDFA() Converts this NFA to a DFA. Declaration public DFA ToDFA() Returns Type Description DFA A DFA representing the NFA. | Edit this page View Source ToMinimizedDFA() Converts the NFA to a minimized DFA. Declaration public DFA ToMinimizedDFA() Returns Type Description DFA A minimized DFA representing the NFA. Implements IFsa"
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | AutomataDocs",
    "keywords": "Struct Transition Represents a non-epsilon transition in an automaton, defined by a starting state, a symbol, and an ending state. Implements IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct Transition : IComparable<Transition>, IEquatable<Transition> Constructors | Edit this page View Source Transition() Initializes a new instance of the Transition struct with default values. Declaration public Transition() | Edit this page View Source Transition(int, int, int) Represents a non-epsilon transition in an automaton, defined by a starting state, a symbol, and an ending state. Declaration public Transition(int FromState, int Symbol, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int Symbol The symbol that triggers the transition. int ToState The state to which the transition goes. Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source Symbol The symbol that triggers the transition. Declaration public int Symbol { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareByToState() Gets a comparer that compares transitions by their to states. Declaration public static Comparer<Transition> CompareByToState() Returns Type Description Comparer<Transition> A comparer that compares transitions by their to states. | Edit this page View Source CompareTo(Transition) Compares the current transition to another transition. Declaration public int CompareTo(Transition other) Parameters Type Name Description Transition other The other transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the transition. Declaration public Transition Reverse() Returns Type Description Transition A new Transition with the from and to states swapped. Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | AutomataDocs",
    "keywords": "Namespace Automata.Core Classes Alphabet Represents an alphabet used in a finite state automaton. DFA Represents a deterministic finite automaton (DFA). IntSet Represents an immutable set of integers. NFA Represents a nondeterministic finite automaton (NFA). Structs EpsilonTransition Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Transition Represents a non-epsilon transition in an automaton, defined by a starting state, a symbol, and an ending state. Interfaces IFsa Represents a finite state automaton (FSA) interface."
  },
  "Automata.Visualization.ConsoleWindow.html": {
    "href": "Automata.Visualization.ConsoleWindow.html",
    "title": "Class ConsoleWindow | AutomataDocs",
    "keywords": "Class ConsoleWindow A class that represents a console window for displaying text output with the option to display graphs in a separate window. The class encapsulates and hides boilerplate code for the user, such as synchronizing with the GUI-thread or managing the lifecycle of windows. Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form ConsoleWindow Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public class ConsoleWindow : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Examples Full program that demonstrates how to create a graph from a collection of sequences and display it in a separate window. static void Main() { // Create the main console window. ConsoleWindow consoleWindow = ConsoleWindow.Create(); // Write some colored text output to the console window consoleWindow.WriteLine(\"Creating graph...\", System.Drawing.Color.Blue); //create some random sequences var sequences = Enumerable.Range(0, 10).Select(_ => Enumerable.Range(0, 8).Select(_ => Random.Shared.Next(4).ToString())); // Create a graph object to display using the sequences Graph graph = GraphFactory.CreateGraph(sequences, minimize: true); // Open a new non-modal interactive window that displays the graph in it. consoleWindow.ShowGraph(graph); // Write some more colored text output to the console window consoleWindow.WriteLine(\"Graph created.\", System.Drawing.Color.Green); } Properties | Edit this page View Source IsAlive Declaration public bool IsAlive { get; } Property Value Type Description bool Methods | Edit this page View Source ClearText() Clears all text from the console window. Declaration public void ClearText() | Edit this page View Source Create() Creates a new ConsoleWindow on a separate thread and waits for it to be initialized. Declaration public static ConsoleWindow Create() Returns Type Description ConsoleWindow A new instance of ConsoleWindow. | Edit this page View Source Dispose(bool) Releases the unmanaged resources used by the ConsoleWindow and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Form.Dispose(bool) | Edit this page View Source ShowGraph(Graph) Displays the specified graph in the graph view. Declaration public void ShowGraph(Graph graph) Parameters Type Name Description Graph graph The graph to display. | Edit this page View Source Write(string, Color?) Writes text to the console window. Declaration public void Write(string text, Color? textColor = null) Parameters Type Name Description string text The text to write. Color? textColor The color of the text. If null, the default color is used. | Edit this page View Source WriteLine(string, Color?) Writes a line of text to the console window. Declaration public void WriteLine(string text, Color? textColor = null) Parameters Type Name Description string text The text to write. Color? textColor The color of the text. If null, the default color is used. Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | AutomataDocs",
    "keywords": "Class GraphFactory Static class for creating displayable graph from finite state automata. Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public static class GraphFactory Methods | Edit this page View Source ConfigNode(Node, bool, bool) Configures the appearance of a node in the graph. Declaration public static void ConfigNode(this Node node, bool isInitial, bool isFinal) Parameters Type Name Description Node node The node to configure. bool isInitial Indicates whether the node represents an initial state. bool isFinal Indicates whether the node represents a final state. | Edit this page View Source CreateGraph(IFsa, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). Declaration public static Graph CreateGraph(IFsa fsa, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters Type Name Description IFsa fsa The finite state automaton to represent as a graph. LayerDirection layerDirection The layout direction of the graph (default: left-to-right). bool directed Indicates whether the graph is directed (default: true). Returns Type Description Graph A graph representing the finite state automaton. | Edit this page View Source CreateGraph(IEnumerable<IEnumerable<string>>, bool) Helper method that creates a displayable graph from a collection of sequences. Declaration public static Graph CreateGraph(IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The collection of sequences to create the graph from. bool minimize Indicates whether to minimize the DFA. Returns Type Description Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | AutomataDocs",
    "keywords": "Namespace Automata.Visualization Classes ConsoleWindow A class that represents a console window for displaying text output with the option to display graphs in a separate window. The class encapsulates and hides boilerplate code for the user, such as synchronizing with the GUI-thread or managing the lifecycle of windows. GraphFactory Static class for creating displayable graph from finite state automata."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | AutomataDocs",
    "keywords": "API Documentation Welcome to the API documentation for Automata. Namespaces Automata.Core Automata.Visualization Click the links above to explore the namespaces."
  }
}