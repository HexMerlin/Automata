{
  "Automata.Core.Alphabets.Alphabet.html": {
    "href": "Automata.Core.Alphabets.Alphabet.html",
    "title": "Class Alphabet | Automata Docs",
    "keywords": "Class Alphabet Represents an alphabet used in a finite state automaton. Inheritance object Alphabet Implements IAlphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alphabets Assembly: Automata.Core.dll Syntax public class Alphabet : IAlphabet Constructors | Edit this page View Source Alphabet() Initializes a new instance of the Alphabet class. Declaration public Alphabet() | Edit this page View Source Alphabet(IEnumerable<string>) Initializes a new instance of the Alphabet class with the specified symbols. Declaration public Alphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to initialize the alphabet with. Properties | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods | Edit this page View Source AddAll(IEnumerable<string>) Adds all the specified symbols to the alphabet, that are not already present. Declaration public void AddAll(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to add. | Edit this page View Source GetOrAdd(string) Gets the index of the specified symbol or adds it if it does not exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol The symbol to get or add. Returns Type Description int The index of the specified symbol. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string A string that represents the current alphabet, including its size. Overrides object.ToString() | Edit this page View Source ToStringExpanded() Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Implements IAlphabet"
  },
  "Automata.Core.Alphabets.CanonicalAlphabet.html": {
    "href": "Automata.Core.Alphabets.CanonicalAlphabet.html",
    "title": "Class CanonicalAlphabet | Automata Docs",
    "keywords": "Class CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Inheritance object CanonicalAlphabet Implements IAlphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alphabets Assembly: Automata.Core.dll Syntax public class CanonicalAlphabet : IAlphabet Remarks A CanonicalAlphabet is defined by the following properties: Immutable: Structural and behavioral invariance, ensuring thread safety and predictable behavior. Performance: Optimized for fast, read-only operations with minimal memory overhead. Ordering: Symbols are sorted according to CanonicalStringComparer. Indexing: Symbols are associated with contiguous, ordered integer indices [0..Count). Constructors | Edit this page View Source CanonicalAlphabet(IEnumerable<string>) Initializes a new instance of the CanonicalAlphabet class with the specified symbols. Declaration public CanonicalAlphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to initialize the alphabet with. Properties | Edit this page View Source CanonicalStringComparer Canonical string comparer used by an alphabet, used to ensure canonical ordering of symbols, when required. Declaration public static StringComparer CanonicalStringComparer { get; } Property Value Type Description StringComparer | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Empty An empty CanonicalAlphabet without any symbols. Declaration public static CanonicalAlphabet Empty { get; } Property Value Type Description CanonicalAlphabet | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods | Edit this page View Source GetOrAdd(string) Gets the index of the specified symbol or adds it if it does not exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol The symbol to get or add. Returns Type Description int The index of the specified symbol. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string A string that represents the current alphabet, including its size. Overrides object.ToString() | Edit this page View Source ToStringExpanded() Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Implements IAlphabet See Also Cfa"
  },
  "Automata.Core.Alphabets.IAlphabet.html": {
    "href": "Automata.Core.Alphabets.IAlphabet.html",
    "title": "Interface IAlphabet | Automata Docs",
    "keywords": "Interface IAlphabet Namespace: Automata.Core.Alphabets Assembly: Automata.Core.dll Syntax public interface IAlphabet Properties | Edit this page View Source Count Declaration int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Declaration string this[int index] { get; } Parameters Type Name Description int index Property Value Type Description string | Edit this page View Source this[string] Declaration int this[string symbol] { get; } Parameters Type Name Description string symbol Property Value Type Description int Methods | Edit this page View Source GetOrAdd(string) Gets the index of the specified symbol or adds it if it does not exist. Declaration int GetOrAdd(string symbol) Parameters Type Name Description string symbol The symbol to get or add. Returns Type Description int The index of the specified symbol. | Edit this page View Source ToString() Declaration string ToString() Returns Type Description string | Edit this page View Source ToStringExpanded() Declaration string ToStringExpanded() Returns Type Description string"
  },
  "Automata.Core.Alphabets.html": {
    "href": "Automata.Core.Alphabets.html",
    "title": "Namespace Automata.Core.Alphabets | Automata Docs",
    "keywords": "Namespace Automata.Core.Alphabets Classes Alphabet Represents an alphabet used in a finite state automaton. CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Interfaces IAlphabet"
  },
  "Automata.Core.Cfa.html": {
    "href": "Automata.Core.Cfa.html",
    "title": "Class Cfa | Automata Docs",
    "keywords": "Class Cfa Canonical Finite-state Automaton (CFA). Inheritance object ImmutableTransitions Cfa Implements IEnumerable<Transition> IEnumerable IFsa Inherited Members ImmutableTransitions.StateCount ImmutableTransitions.TransitionCount ImmutableTransitions.Transition(int, int) ImmutableTransitions.Transitions(int) ImmutableTransitions.ReachableState(int, int) ImmutableTransitions.AvailableSymbols(int) ImmutableTransitions.AvailableSymbols(IEnumerable<int>) ImmutableTransitions.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Cfa : ImmutableTransitions, IEnumerable<Transition>, IEnumerable, IFsa Remarks The Cfa is the most optimized automaton representation, characterized by: Deterministic and Minimal: The least possible states and transitions (Similarly to a minimized DFA). Canonical alphabet: Reduced, contiguous, and lexicographically ordered. Canonical states and transitions: contiguously indexed, optimized, and fully ordered. Immutable: Guarantees structural and behavioral invariance. Performance-optimized for efficient read-only operations. For any language, the Cfa is unique, embodying its minimal deterministic automaton in canonical form. Any two Cfa instances accepting the same language are identical. Constructors | Edit this page View Source Cfa(IFsa) Initializes a new instance of the Cfa class from an existing FSA. Declaration public Cfa(IFsa fsa) Parameters Type Name Description IFsa fsa The finite state automaton to convert. Fields | Edit this page View Source FinalStates Gets the final states of the CFA. Declaration public readonly FrozenSet<int> FinalStates Field Value Type Description FrozenSet<int> Properties | Edit this page View Source Alphabet Gets the alphabet used by the CFA. Declaration public IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source InitialState The initial state. Always 0 for a non-empty Cfa. For an empty Cfa, the initial state is InvalidState. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEmpty Indicates whether the FSA is empty, meaning it has no states or transitions. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the DFA, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> | Edit this page View Source Intersection(Cfa, Cfa) Declaration public static Dfa Intersection(Cfa a, Cfa b) Parameters Type Name Description Cfa a Cfa b Returns Type Description Dfa | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is the initial state; otherwise, false. | Edit this page View Source SymbolicTransitions() Gets the transitions of the DFA. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> Implements IEnumerable<T> IEnumerable IFsa"
  },
  "Automata.Core.Constants.html": {
    "href": "Automata.Core.Constants.html",
    "title": "Class Constants | Automata Docs",
    "keywords": "Class Constants Class representing automata related constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public static class Constants Fields | Edit this page View Source InvalidState Denotes an invalid state. Declaration public const int InvalidState = -1 Field Value Type Description int | Edit this page View Source InvalidSymbolIndex Denotes an invalid symbol. Declaration public const int InvalidSymbolIndex = -1 Field Value Type Description int"
  },
  "Automata.Core.Dfa.html": {
    "href": "Automata.Core.Dfa.html",
    "title": "Class Dfa | Automata Docs",
    "keywords": "Class Dfa Represents a deterministic finite automaton (DFA). Inheritance object MutableTransitions<Transition> DeterministicTransitions Dfa Implements IReadOnlyCollection<Transition> IEnumerable<Transition> IEnumerable IFsa Inherited Members DeterministicTransitions.Add(Transition) DeterministicTransitions.UnionWith(IEnumerable<Transition>) DeterministicTransitions.Transition(int, int) DeterministicTransitions.Transitions(int) DeterministicTransitions.ReachableState(int, int) DeterministicTransitions.AvailableSymbols(int) DeterministicTransitions.AvailableSymbols(IEnumerable<int>) MutableTransitions<Transition>.orderByFromState MutableTransitions<Transition>.orderByToState MutableTransitions<Transition>.Count MutableTransitions<Transition>.Remove(Transition) MutableTransitions<Transition>.ExceptWith(IEnumerable<Transition>) MutableTransitions<Transition>.MinState MutableTransitions<Transition>.MaxState MutableTransitions<Transition>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Dfa : DeterministicTransitions, IReadOnlyCollection<Transition>, IEnumerable<Transition>, IEnumerable, IFsa Remarks A DFA is always deterministic and epsilon free. Constructors | Edit this page View Source Dfa() Initializes a new instance of the Dfa class with an empty alphabet. Declaration public Dfa() | Edit this page View Source Dfa(IAlphabet) Initializes a new instance of the Dfa class with the specified alphabet. Declaration public Dfa(IAlphabet alphabet) Parameters Type Name Description IAlphabet alphabet The alphabet used by the DFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the DFA. Declaration public IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source FinalStates Gets the final states of the DFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialState Gets or sets the initial state of the DFA. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEmpty Indicates whether the FSA is empty, meaning it has no states or transitions. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source Accepts(IEnumerable<string>) Indicates whether the DFA accepts the given sequence of symbols. Declaration public bool Accepts(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence The sequence of symbols to check. Returns Type Description bool true iff the DFA accepts the sequence. Remarks The DFA processes each symbol in the sequence, transitioning between states according to its transition function. If the DFA reaches a final state after processing all symbols, the sequence is accepted. | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the DFA, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is the initial state; otherwise, false. | Edit this page View Source Minimized() Minimizes the DFA. Declaration public Dfa Minimized() Returns Type Description Dfa A minimized DFA. Remarks Uses Brzozowski's algorithm | Edit this page View Source Reversed() Reverses the DFA. Declaration public Nfa Reversed() Returns Type Description Nfa An NFA representing the reversed DFA. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state The state to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(int) Sets the initial state of the DFA. Declaration public void SetInitial(int state) Parameters Type Name Description int state The state to set as the initial state. | Edit this page View Source SymbolicTransitions() Gets the transitions of the DFA. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> | Edit this page View Source ToCFA() Converts the DFA to a CFA. Declaration public Cfa ToCFA() Returns Type Description Cfa A CFA representing the DFA. | Edit this page View Source ToNFA() Converts the DFA to an NFA. Declaration public Nfa ToNFA() Returns Type Description Nfa An NFA representing the DFA. Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable IFsa"
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | Automata Docs",
    "keywords": "Struct EpsilonTransition Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Implements ITransition<EpsilonTransition> IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct EpsilonTransition : ITransition<EpsilonTransition>, IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Remarks An epsilon transition is a transition that lacks a symbol Constructors | Edit this page View Source EpsilonTransition(int, int) Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Declaration public EpsilonTransition(int FromState, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int ToState The state to which the transition goes. Remarks An epsilon transition is a transition that lacks a symbol Fields | Edit this page View Source Epsilon Denotes the string representation for ε - the empty epsilon string. Epsilon is not part of any alphabet, the symbol is used solely for output purposes, never for computation. Declaration public const string Epsilon = \"ε\" Field Value Type Description string Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareByToState() Gets a comparer that compares epsilon transitions by their to states. Declaration public static Comparer<EpsilonTransition> CompareByToState() Returns Type Description Comparer<EpsilonTransition> A comparer that compares epsilon transitions by their to states. | Edit this page View Source CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. Declaration public int CompareTo(EpsilonTransition other) Parameters Type Name Description EpsilonTransition other The other epsilon transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the epsilon transition. Declaration public EpsilonTransition Reverse() Returns Type Description EpsilonTransition A new EpsilonTransition with the from and to states swapped. Implements ITransition<T> IComparable<T> IEquatable<T>"
  },
  "Automata.Core.IFsa.html": {
    "href": "Automata.Core.IFsa.html",
    "title": "Interface IFsa | Automata Docs",
    "keywords": "Interface IFsa Represents a finite state automaton (FSA) interface. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IFsa Properties | Edit this page View Source Alphabet Gets the alphabet used by the FSA. Declaration IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source IsEmpty Indicates whether the FSA is empty, meaning it has no states or transitions. Declaration bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the FSA is epsilon-free. Declaration bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the FSA. Declaration IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false. | Edit this page View Source SymbolicTransitions() Gets the transitions of the FSA. Declaration IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition>"
  },
  "Automata.Core.ITransition-1.html": {
    "href": "Automata.Core.ITransition-1.html",
    "title": "Interface ITransition<T> | Automata Docs",
    "keywords": "Interface ITransition<T> Represents a generic transition with static support for obtaining a comparer. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface ITransition<T> where T : struct Type Parameters Name Description T The type of transition. Properties | Edit this page View Source FromState The state from which the transition starts. Declaration int FromState { get; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration int ToState { get; } Property Value Type Description int Methods | Edit this page View Source CompareByToState() Gets the comparer for ordering by \"to state\". Declaration public static abstract Comparer<T> CompareByToState() Returns Type Description Comparer<T>"
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | Automata Docs",
    "keywords": "Class IntSet Represents an immutable set of integers. Inheritance object IntSet Implements IEquatable<IntSet> IReadOnlySet<int> IReadOnlyCollection<int> IEnumerable<int> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class IntSet : IEquatable<IntSet>, IReadOnlySet<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable Constructors | Edit this page View Source IntSet(HashSet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(HashSet<int> elements) Parameters Type Name Description HashSet<int> elements The elements to include in the set. | Edit this page View Source IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(IEnumerable<int> elements) Parameters Type Name Description IEnumerable<int> elements The elements to include in the set. | Edit this page View Source IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(ISet<int> elements) Parameters Type Name Description ISet<int> elements The elements to include in the set. Properties | Edit this page View Source Count Gets the number of elements in the set. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Contains(int) Determines if the set contains a specific item. Declaration public bool Contains(int item) Parameters Type Name Description int item The item to check if the set contains. Returns Type Description bool true if found; otherwise false. | Edit this page View Source Equals(IntSet?) Indicates whether the current set is equal to another set. Declaration public bool Equals(IntSet? other) Parameters Type Name Description IntSet other The other set to compare to. Returns Type Description bool true if the sets are equal; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether the current set is equal to another object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare to. Returns Type Description bool true if the object is an IntSet and the sets are equal; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator<int> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Gets the hash code for the current set. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current set. Overrides object.GetHashCode() | Edit this page View Source IsProperSubsetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsProperSupersetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the collection is a proper superset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSubsetOf(IEnumerable<int>) Determine whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSupersetOf(IEnumerable<int>) Determine whether the current set is a super set of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source Overlaps(IEnumerable<int>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool trueif the current set and other share at least one common element; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source SetEquals(IEnumerable<int>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source ToString() Returns a string that represents the current set. Declaration public override string ToString() Returns Type Description string A string that represents the current set. Overrides object.ToString() Implements IEquatable<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.Nfa.html": {
    "href": "Automata.Core.Nfa.html",
    "title": "Class Nfa | Automata Docs",
    "keywords": "Class Nfa Represents a nondeterministic finite automaton (NFA). Inheritance object Nfa Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Nfa : IFsa Remarks States are represented simply as integers (int), which essentially are just unique IDs. NFAs are defined mainly by two sets of transitions (symbolic and epsilon), which are kept separate for performance In addition, there are two sets defining the initial states and final states respectively. NFAs (in contrast to DFAs) can have multiple initial states. Constructors | Edit this page View Source Nfa() Initializes a new instance of the Nfa class with an empty alphabet. Declaration public Nfa() | Edit this page View Source Nfa(IAlphabet) Initializes a new instance of the Nfa class with the specified alphabet. Declaration public Nfa(IAlphabet alphabet) Parameters Type Name Description IAlphabet alphabet The alphabet used by the NFA. | Edit this page View Source Nfa(IEnumerable<IEnumerable<string>>) Initializes a new instance of a Nfa class to accept a set of sequences. Declaration public Nfa(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the NFA. Declaration public IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source FinalStates Gets the final states of the NFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialStates Gets the initial states of the NFA. Declaration public IReadOnlySet<int> InitialStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source IsEmpty Indicates whether the NFA is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the NFA is epsilon-free. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source MaxState O(1) retrieval of the maximum state (state with the maximum value) in the NFA. Declaration public int MaxState { get; } Property Value Type Description int The maximum state in the NFA. Remarks If the set is empty, InvalidState is returned | Edit this page View Source MinState O(1) retrieval of the minimal state (state with the minimal value) in the NFA. Declaration public int MinState { get; } Property Value Type Description int The minimal state in the NFA. Remarks If the set is empty, InvalidState is returned Methods | Edit this page View Source Add(EpsilonTransition) Adds an epsilon transition to the NFA. Declaration public void Add(EpsilonTransition transition) Parameters Type Name Description EpsilonTransition transition The transition to add. | Edit this page View Source Add(Transition) Adds a symbolic (= non-epsilon) transition to the NFA. Declaration public void Add(Transition transition) Parameters Type Name Description Transition transition The transition to add. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state The state to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. Declaration public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as initial states. bool initial If true, the states are added to the initial states; otherwise, they are removed. | Edit this page View Source SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. Declaration public void SetInitial(int state, bool initial = true) Parameters Type Name Description int state The state to set or remove as an initial state. bool initial If true, the state is added to the initial states; otherwise, it is removed. | Edit this page View Source ToDfa() Converts a NFA to a DFA. Declaration public Dfa ToDfa() Returns Type Description Dfa A DFA representing the NFA. Remarks Uses the Powerset Construction algorithm (a.k.a. Subset Construction algorithm). | Edit this page View Source ToMinimizedDFA() Converts the NFA to a minimized DFA. Declaration public Dfa ToMinimizedDFA() Returns Type Description Dfa A minimized DFA representing the NFA. | Edit this page View Source UnionWith(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. Declaration public void UnionWith(IEnumerable<EpsilonTransition> transitions) Parameters Type Name Description IEnumerable<EpsilonTransition> transitions The transitions to add. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds multiple symbolic transitions to the NFA. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The transitions to add. | Edit this page View Source UnionWith(IEnumerable<IEnumerable<string>>) Adds a set of sequences to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source UnionWith(IEnumerable<string>) Adds a sequence of symbols to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence The sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. Implements IFsa"
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | Automata Docs",
    "keywords": "Struct Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Implements ITransition<Transition> IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct Transition : ITransition<Transition>, IComparable<Transition>, IEquatable<Transition> Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Constructors | Edit this page View Source Transition() Initializes a new instance of the Transition struct with default values. Declaration public Transition() | Edit this page View Source Transition(int, int, int) Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Declaration public Transition(int FromState, int Symbol, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int Symbol The symbol that triggers the transition. int ToState The state to which the transition goes. Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source Invalid Gets an invalid transition. Declaration public static Transition Invalid { get; } Property Value Type Description Transition | Edit this page View Source IsInvalid Indicates whether the transition is invalid. Declaration public bool IsInvalid { get; } Property Value Type Description bool | Edit this page View Source Symbol The symbol that triggers the transition. Declaration public int Symbol { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareByToState() Gets a comparer that compares transitions by their to states. Declaration public static Comparer<Transition> CompareByToState() Returns Type Description Comparer<Transition> A comparer that compares transitions by their to states. | Edit this page View Source CompareTo(Transition) Compares the current transition to another transition. Declaration public int CompareTo(Transition other) Parameters Type Name Description Transition other The other transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source Reverse() Reverses the transition. Declaration public Transition Reverse() Returns Type Description Transition A new Transition with the from and to states swapped. | Edit this page View Source ToString() Returns a string that represents the current transition. Declaration public override string ToString() Returns Type Description string A string that represents the current transition. Overrides ValueType.ToString() Implements ITransition<T> IComparable<T> IEquatable<T>"
  },
  "Automata.Core.TransitionSets.DeterministicTransitions.html": {
    "href": "Automata.Core.TransitionSets.DeterministicTransitions.html",
    "title": "Class DeterministicTransitions | Automata Docs",
    "keywords": "Class DeterministicTransitions Represents a mutable set of Transition for fast lookup and retrieval. This class enforces deterministic transitions, and allows no non-deterministic, duplicate or epsilon transitions. Inheritance object MutableTransitions<Transition> DeterministicTransitions Dfa Implements IReadOnlyCollection<Transition> IEnumerable<Transition> IEnumerable Inherited Members MutableTransitions<Transition>.orderByFromState MutableTransitions<Transition>.orderByToState MutableTransitions<Transition>.Count MutableTransitions<Transition>.Remove(Transition) MutableTransitions<Transition>.ExceptWith(IEnumerable<Transition>) MutableTransitions<Transition>.MinState MutableTransitions<Transition>.MaxState MutableTransitions<Transition>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public class DeterministicTransitions : MutableTransitions<Transition>, IReadOnlyCollection<Transition>, IEnumerable<Transition>, IEnumerable Remarks Internally, this class maintains two ordered sets with the exact same set of transitions, but with different sort orders. One set is ordered so that all from-states are ordered are consecutive and increasing, and the other set is ordered where all to-states are consecutive and increasing. That enables fast retrieval of transitions either from or to a certain state, respectively. Constructors | Edit this page View Source DeterministicTransitions() Initializes a new empty set. Declaration public DeterministicTransitions() | Edit this page View Source DeterministicTransitions(IEnumerable<Transition>) Initializes a new set with an initial set of transitions. Declaration public DeterministicTransitions(IEnumerable<Transition> initialTransitions) Parameters Type Name Description IEnumerable<Transition> initialTransitions Initial transitions to populate with. Methods | Edit this page View Source Add(Transition) Adds a transition to the DFA. Declaration public override void Add(Transition transition) Parameters Type Name Description Transition transition The transition to add. Overrides MutableTransitions<Transition>.Add(Transition) Remarks If a transition with the same from-state and the same symbol already exists, that transition will be replaced. | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns a set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates The states from which to start. Returns Type Description IntSet The set of symbols that can be used to transition directly from the given states. | Edit this page View Source AvailableSymbols(int) Returns the set of symbols that can be used to transition directly from the given state. Declaration public IEnumerable<int> AvailableSymbols(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description IEnumerable<int> The set of symbols that can be used to transition directly from the given state. Remarks Since the underlying set is deterministic, the returned symbols is a set, meaning every symbol can occur only once. | Edit this page View Source ReachableState(int, int) Returns the state reachable from the given state on the given symbol. Declaration public int ReachableState(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description Transition The transition from the given state on the given symbol, or Invalid if no such transition exists. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description SortedSet<Transition> The set of transitions from the given state. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds all provided transitions that are currently not present in set. Declaration public override void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The transitions to add. Overrides MutableTransitions<Transition>.UnionWith(IEnumerable<Transition>) Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.TransitionSets.EpsilonTransitions.html": {
    "href": "Automata.Core.TransitionSets.EpsilonTransitions.html",
    "title": "Class EpsilonTransitions | Automata Docs",
    "keywords": "Class EpsilonTransitions Represents a mutable set of EpsilonTransition for fast lookup and retrieval. Inheritance object MutableTransitions<EpsilonTransition> EpsilonTransitions Implements IReadOnlyCollection<EpsilonTransition> IEnumerable<EpsilonTransition> IEnumerable Inherited Members MutableTransitions<EpsilonTransition>.orderByFromState MutableTransitions<EpsilonTransition>.orderByToState MutableTransitions<EpsilonTransition>.Count MutableTransitions<EpsilonTransition>.Add(EpsilonTransition) MutableTransitions<EpsilonTransition>.Remove(EpsilonTransition) MutableTransitions<EpsilonTransition>.UnionWith(IEnumerable<EpsilonTransition>) MutableTransitions<EpsilonTransition>.ExceptWith(IEnumerable<EpsilonTransition>) MutableTransitions<EpsilonTransition>.MinState MutableTransitions<EpsilonTransition>.MaxState MutableTransitions<EpsilonTransition>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public class EpsilonTransitions : MutableTransitions<EpsilonTransition>, IReadOnlyCollection<EpsilonTransition>, IEnumerable<EpsilonTransition>, IEnumerable Remarks Internally, this class maintains two ordered sets with the exact same set of transitions, but with different sort orders. One set is ordered so that all from-states are ordered are consecutive and increasing, and the other set is ordered where all to-states are consecutive and increasing. That enables fast retrieval of transitions either from or to a certain state, respectively. Constructors | Edit this page View Source EpsilonTransitions() Initializes a new empty set. Declaration public EpsilonTransitions() | Edit this page View Source EpsilonTransitions(IEnumerable<EpsilonTransition>) Initializes a new set with an initial set of transitions. Declaration public EpsilonTransitions(IEnumerable<EpsilonTransition> initialTransitions) Parameters Type Name Description IEnumerable<EpsilonTransition> initialTransitions Initial transitions to populate with. Methods | Edit this page View Source ReachableStatesOnEpsilonInPlace(HashSet<int>) Extends the set of states with their epsilon closure in place. Declaration public void ReachableStatesOnEpsilonInPlace(HashSet<int> fromStates) Parameters Type Name Description HashSet<int> fromStates The set of states to extend. Remarks Epsilon closure is all reachable states on epsilon transitions | Edit this page View Source ReachableStatesOnSingleEpsilon(int) Returns the states reachable from the given state on a single epsilon transition. If the input state has an epsilon loop on itself, it will be included in the result. Declaration public IEnumerable<int> ReachableStatesOnSingleEpsilon(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description IEnumerable<int> The states reachable from the given state on a single epsilon transition. Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.TransitionSets.ImmutableTransitions.html": {
    "href": "Automata.Core.TransitionSets.ImmutableTransitions.html",
    "title": "Class ImmutableTransitions | Automata Docs",
    "keywords": "Class ImmutableTransitions A highly optimized immutable set of deterministic transitions. Inheritance object ImmutableTransitions Cfa Implements IEnumerable<Transition> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public class ImmutableTransitions : IEnumerable<Transition>, IEnumerable Remarks ImmutableTransitions is characterized by: Immutable: Structural and behavioral invariance, ensuring thread safety and predictable behavior. Performance: Optimized for fast, read-only operations with minimal memory overhead. Ordering: Transitions are sorted according to the default order of Transition. Deterministic: The set cannot contain more than one transition with a specific (FromState, Symbol) pair. Constructors | Edit this page View Source ImmutableTransitions(IEnumerable<Transition>) Initializes a new instance of the ImmutableTransitions class, ensuring the input is sorted and deterministic. Declaration public ImmutableTransitions(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The input set of transitions. Exceptions Type Condition ArgumentException Thrown if the transitions are not deterministic. Fields | Edit this page View Source StateCount Declaration public readonly int StateCount Field Value Type Description int Properties | Edit this page View Source TransitionCount Declaration public int TransitionCount { get; } Property Value Type Description int The number of transitions in the set. Methods | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns a set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates The states from which to start. Returns Type Description IntSet The set of symbols that can be used to transition directly from the given states. | Edit this page View Source AvailableSymbols(int) Returns the set of symbols that can be used to transition directly from the given state. Declaration public int[] AvailableSymbols(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description int[] The set of symbols that can be used to transition directly from the given state. Remarks Since the underlying set is deterministic, the returned symbols is a proper set, meaning every symbol can occur only once. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<Transition> GetEnumerator() Returns Type Description IEnumerator<Transition> An enumerator that can be used to iterate through the collection. | Edit this page View Source ReachableState(int, int) Returns the state reachable from the given state on the given symbol. Declaration public int ReachableState(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState The source state. int symbol The symbol of the transition. Returns Type Description Transition The transition from the given state with the given symbol, or Invalid if no such transition exists. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public ReadOnlySpan<Transition> Transitions(int fromState) Parameters Type Name Description int fromState The source state. Returns Type Description ReadOnlySpan<Transition> A ReadOnlySpan<T> containing the transitions from the given state. Implements IEnumerable<T> IEnumerable"
  },
  "Automata.Core.TransitionSets.MutableTransitions-1.html": {
    "href": "Automata.Core.TransitionSets.MutableTransitions-1.html",
    "title": "Class MutableTransitions<T> | Automata Docs",
    "keywords": "Class MutableTransitions<T> Represents a generic mutable set of transitions for fast lookup and retrieval. Inheritance object MutableTransitions<T> DeterministicTransitions EpsilonTransitions NonDeterministicTransitions Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public class MutableTransitions<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable where T : struct, ITransition<T> Type Parameters Name Description T The type of transition, either Transition or EpsilonTransition. Remarks This class maintains two ordered sets with the exact same set of transitions, but with different sort orders. One set is ordered so that all from-states are ordered are consecutive and increasing, and the other set is ordered where all to-states are consecutive and increasing. That enables fast retrieval of all transitions from or to a certain state, respectively. Constructors | Edit this page View Source MutableTransitions() Initializes a new empty set. Declaration public MutableTransitions() | Edit this page View Source MutableTransitions(IEnumerable<T>) Initializes a new set with an initial set of transitions. Declaration public MutableTransitions(IEnumerable<T> initialTransitions) Parameters Type Name Description IEnumerable<T> initialTransitions Initial transitions to populate with. Fields | Edit this page View Source orderByFromState Declaration protected readonly SortedSet<T> orderByFromState Field Value Type Description SortedSet<T> | Edit this page View Source orderByToState Declaration protected readonly SortedSet<T> orderByToState Field Value Type Description SortedSet<T> Properties | Edit this page View Source Count Returns the number of transitions in the set. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source MaxState O(1) retrieval of the maximum state referenced by any transition in the set. Declaration public int MaxState { get; } Property Value Type Description int The maximum state referenced by any transition in the set, or InvalidState if the set was empty Remarks The maximum state is either a state that occurs as a FromState or ToState. Efficiently, we retrieve the maximum FromState from the set ordered by FromState, and retrieve the maximum ToState in the set ordered by ToState, and then take the max of these two. | Edit this page View Source MinState O(1) retrieval of the minimum state referenced by any transition in the set. Declaration public int MinState { get; } Property Value Type Description int The minimum state referenced by any transition in the set, or InvalidState if the set was empty Remarks The minimum state is either a state that occurs as a FromState or ToState. Efficiently, we retrieve the minimum FromState from the set ordered by FromState, and retrieve the minimum ToState in the set ordered by ToState, and then take the min of these two. Methods | Edit this page View Source Add(T) Adds a transition to the set. Declaration public virtual void Add(T transition) Parameters Type Name Description T transition The element to add. | Edit this page View Source ExceptWith(IEnumerable<T>) Removes all of the provided transitions that are currently in the set. Declaration public void ExceptWith(IEnumerable<T> transitions) Parameters Type Name Description IEnumerable<T> transitions The transitions to remove. | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator<T> An enumerator that can be used to iterate through the collection. | Edit this page View Source Remove(T) Removes a transition from the set. Declaration public void Remove(T transition) Parameters Type Name Description T transition The transition to remove. | Edit this page View Source UnionWith(IEnumerable<T>) Adds all provided transitions that are currently not present in set. Declaration public virtual void UnionWith(IEnumerable<T> transitions) Parameters Type Name Description IEnumerable<T> transitions The transitions to add. Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable See Also ITransition<T> Transition EpsilonTransition"
  },
  "Automata.Core.TransitionSets.NonDeterministicTransitions.html": {
    "href": "Automata.Core.TransitionSets.NonDeterministicTransitions.html",
    "title": "Class NonDeterministicTransitions | Automata Docs",
    "keywords": "Class NonDeterministicTransitions Represents a mutable set of Transition for fast lookup and retrieval. This set allows non-deterministic transitions, but no duplicate transitions or epsilon transitions. Inheritance object MutableTransitions<Transition> NonDeterministicTransitions Implements IReadOnlyCollection<Transition> IEnumerable<Transition> IEnumerable Inherited Members MutableTransitions<Transition>.orderByFromState MutableTransitions<Transition>.orderByToState MutableTransitions<Transition>.Count MutableTransitions<Transition>.Add(Transition) MutableTransitions<Transition>.Remove(Transition) MutableTransitions<Transition>.UnionWith(IEnumerable<Transition>) MutableTransitions<Transition>.ExceptWith(IEnumerable<Transition>) MutableTransitions<Transition>.MinState MutableTransitions<Transition>.MaxState MutableTransitions<Transition>.GetEnumerator() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public class NonDeterministicTransitions : MutableTransitions<Transition>, IReadOnlyCollection<Transition>, IEnumerable<Transition>, IEnumerable Remarks Internally, this class maintains two ordered sets with the exact same set of transitions, but with different sort orders. One set is ordered so that all from-states are ordered are consecutive and increasing, and the other set is ordered where all to-states are consecutive and increasing. That enables fast retrieval of transitions either from or to a certain state, respectively. Constructors | Edit this page View Source NonDeterministicTransitions() Initializes a new empty set. Declaration public NonDeterministicTransitions() | Edit this page View Source NonDeterministicTransitions(IEnumerable<Transition>) Initializes a new set with an initial set of transitions. Declaration public NonDeterministicTransitions(IEnumerable<Transition> initialTransitions) Parameters Type Name Description IEnumerable<Transition> initialTransitions Initial transitions to populate with. Methods | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns the set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates The states from which to start. Returns Type Description IntSet The set of symbols that can be used to transition directly from the given states. | Edit this page View Source ReachableStates(int, int) Returns the states reachable from the given state with the given symbol. Declaration public IEnumerable<int> ReachableStates(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description IEnumerable<int> The states reachable from the given state on the given symbol. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description SortedSet<Transition> The set of transitions from the given state. | Edit this page View Source Transitions(int, int) Returns the transitions from the given state with the given symbol. Declaration public SortedSet<Transition> Transitions(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description SortedSet<Transition> The transitions from the given state on the given symbol, or Invalid if no such transition exists. Implements IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.TransitionSets.TransitionsExtensions.html": {
    "href": "Automata.Core.TransitionSets.TransitionsExtensions.html",
    "title": "Class TransitionsExtensions | Automata Docs",
    "keywords": "Class TransitionsExtensions This class provides extension methods for SortedSet<T>. These provide fast extraction of subsets from various transition sets, such as ImmutableTransitions, DeterministicTransitions and NonDeterministicTransitions. Such subsets are either of type ReadOnlySpan<T> or SortedSet<T>, enabling applying these extensions methods for search or refined filtering on the subsets Inheritance object TransitionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.TransitionSets Assembly: Automata.Core.dll Syntax public static class TransitionsExtensions Methods | Edit this page View Source AvailableSymbols(SortedSet<Transition>, int) Enumerates all symbols that can be used to transition directly from the given state. Declaration public static IEnumerable<int> AvailableSymbols(this SortedSet<Transition> transitions, int fromState) Parameters Type Name Description SortedSet<Transition> transitions The set of transitions to search. int fromState The from state. Returns Type Description IEnumerable<int> The collection of symbols that can be used to transition directly from the given state. Remarks This enumerates over the symbols which is fast. If transitions are deterministic, the result will be a proper set (no duplicated symbols) If transitions are non-deterministic, the result can contain duplicated symbols. | Edit this page View Source AvailableSymbols(ReadOnlySpan<Transition>, int) Enumerates all symbols that can be used to transition directly from the given state. Declaration public static int[] AvailableSymbols(this ReadOnlySpan<Transition> transitions, int fromState) Parameters Type Name Description ReadOnlySpan<Transition> transitions The set of transitions to search. int fromState The state from which to start. Returns Type Description int[] The collection of symbols that can be used to transition directly from the given state. Remarks If transitions are deterministic, the result will be a proper set (no duplicated symbols) If transitions are non-deterministic, the result can contain duplicated symbols. | Edit this page View Source Transition(SortedSet<Transition>, int, int) Returns the transition from the given state with the given symbol. Declaration public static Transition Transition(this SortedSet<Transition> transitions, int fromState, int symbol) Parameters Type Name Description SortedSet<Transition> transitions The set of transitions to search. int fromState The from state. int symbol The symbol to transition on. Returns Type Description Transition The transition from the given state on the given symbol, or Invalid if no such transition exists. Remarks transitions must be deterministic and sorted with the default Transition comparer. Otherwise, result is undefined. | Edit this page View Source Transition(ReadOnlySpan<Transition>, int, int) Returns the transition from the given state with the given symbol. Declaration public static Transition Transition(this ReadOnlySpan<Transition> transitions, int fromState, int symbol) Parameters Type Name Description ReadOnlySpan<Transition> transitions The span of transitions to search. int fromState The from state. int symbol The symbol to transition on. Returns Type Description Transition The transition from the given state on the given symbol, or Invalid if no such transition exists. Remarks transitions must be deterministic and sorted with the default Transition comparer. Otherwise, result is undefined. | Edit this page View Source Transitions(SortedSet<Transition>, int) Returns the set of transitions from the given state. Declaration public static SortedSet<Transition> Transitions(this SortedSet<Transition> transitions, int fromState) Parameters Type Name Description SortedSet<Transition> transitions The set of transitions to search. int fromState The from state. Returns Type Description SortedSet<Transition> The set of transitions from the given state. Remarks transitions must be deterministic and sorted with the default Transition comparer. Otherwise, result is undefined. | Edit this page View Source Transitions(ReadOnlySpan<Transition>, int) Returns the set of transitions from the given state. Declaration public static ReadOnlySpan<Transition> Transitions(this ReadOnlySpan<Transition> transitions, int fromState) Parameters Type Name Description ReadOnlySpan<Transition> transitions The set of transitions to search. int fromState The from state. Returns Type Description ReadOnlySpan<Transition> A ReadOnlySpan<T> containing the transitions from the given state. Remarks transitions must be deterministic and sorted with the default Transition comparer. Otherwise, result is undefined. | Edit this page View Source TransitionsNonDeterministic(SortedSet<Transition>, int, int) Returns the transitions from the given state with the given symbol. Declaration public static SortedSet<Transition> TransitionsNonDeterministic(this SortedSet<Transition> transitions, int fromState, int symbol) Parameters Type Name Description SortedSet<Transition> transitions The set of transitions to search. Can be deterministic. int fromState The from state. int symbol The symbol to transition on. Returns Type Description SortedSet<Transition> The transitions from the given state on the given symbol, or Invalid if no such transition exists. Remarks For this method: transitions are allowed to be non-deterministic. Hence, more than one Transition can be returned. transitions must be sorted with the default Transition comparer. Otherwise, result is undefined."
  },
  "Automata.Core.TransitionSets.html": {
    "href": "Automata.Core.TransitionSets.html",
    "title": "Namespace Automata.Core.TransitionSets | Automata Docs",
    "keywords": "Namespace Automata.Core.TransitionSets Classes DeterministicTransitions Represents a mutable set of Transition for fast lookup and retrieval. This class enforces deterministic transitions, and allows no non-deterministic, duplicate or epsilon transitions. EpsilonTransitions Represents a mutable set of EpsilonTransition for fast lookup and retrieval. ImmutableTransitions A highly optimized immutable set of deterministic transitions. MutableTransitions<T> Represents a generic mutable set of transitions for fast lookup and retrieval. NonDeterministicTransitions Represents a mutable set of Transition for fast lookup and retrieval. This set allows non-deterministic transitions, but no duplicate transitions or epsilon transitions. TransitionsExtensions This class provides extension methods for SortedSet<T>. These provide fast extraction of subsets from various transition sets, such as ImmutableTransitions, DeterministicTransitions and NonDeterministicTransitions. Such subsets are either of type ReadOnlySpan<T> or SortedSet<T>, enabling applying these extensions methods for search or refined filtering on the subsets"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | Automata Docs",
    "keywords": "Namespace Automata.Core Classes Cfa Canonical Finite-state Automaton (CFA). Constants Class representing automata related constants Dfa Represents a deterministic finite automaton (DFA). IntSet Represents an immutable set of integers. Nfa Represents a nondeterministic finite automaton (NFA). Structs EpsilonTransition Represents an epsilon transition in an automaton, defined by a starting state and an ending state. Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Interfaces IFsa Represents a finite state automaton (FSA) interface. ITransition<T> Represents a generic transition with static support for obtaining a comparer."
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | Automata Docs",
    "keywords": "Class GraphFactory Static class for creating displayable graphs from finite state automata. Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public static class GraphFactory Methods | Edit this page View Source CreateGraph(IFsa, bool, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). Declaration public static Graph CreateGraph(this IFsa fsa, bool displayStateIDs = false, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters Type Name Description IFsa fsa The finite state automaton to represent as a graph. bool displayStateIDs LayerDirection layerDirection The layout direction of the graph (default: left-to-right). bool directed Indicates whether the graph is directed (default: true). Returns Type Description Graph A graph representing the finite state automaton. | Edit this page View Source CreateGraph(IEnumerable<IEnumerable<string>>, bool) Helper method that creates a displayable graph from a collection of sequences. Declaration public static Graph CreateGraph(this IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The collection of sequences to create the graph from. bool minimize Indicates whether to minimize the DFA. Returns Type Description Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.GraphView.html": {
    "href": "Automata.Visualization.GraphView.html",
    "title": "Class GraphView | Automata Docs",
    "keywords": "Class GraphView A class for displaying finite-state automata as graphs in a separate window (and its own separate thread). Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GraphView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public class GraphView : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Remarks You do not need to involve any GUI boilerplate code to display a graph in a separate window, like calling the blocking Application.Run(), setting STA thread environment or bother about the GUI messes with your threads. Simply just create and open a graph view by calling either OpenNew() or OpenNew(Graph). This class uses the MSAGL library for layout and rendering of graphs. Methods | Edit this page View Source Dispose(bool) Disposes of the resources (other than memory) used by the Form. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Form.Dispose(bool) | Edit this page View Source Invoke(Action) Invokes the specified action on the UI thread. Declaration public void Invoke(Action action) Parameters Type Name Description Action action The action to invoke. | Edit this page View Source OpenNew() Opens a new instance of the GraphView class in a new thread. Declaration public static GraphView OpenNew() Returns Type Description GraphView A new instance of the GraphView class. | Edit this page View Source OpenNew(Graph) Opens a new instance of the GraphView class in a new thread and sets the specified graph. Declaration public static GraphView OpenNew(Graph graph) Parameters Type Name Description Graph graph The graph to display. Returns Type Description GraphView A new instance of the GraphView class with the specified graph set. | Edit this page View Source SetGraph(Graph) Displays the specified graph in the graph view. Declaration public void SetGraph(Graph graph) Parameters Type Name Description Graph graph The graph to display. Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | Automata Docs",
    "keywords": "Namespace Automata.Visualization Classes GraphFactory Static class for creating displayable graphs from finite state automata. GraphView A class for displaying finite-state automata as graphs in a separate window (and its own separate thread)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | Automata Docs",
    "keywords": "API Documentation Welcome to the API documentation for Automata. Namespaces Automata.Core Automata.Visualization Click the links above to explore the namespaces. Automata repo at GitHub"
  }
}