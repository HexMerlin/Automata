{
  "ALANG.html": {
    "href": "ALANG.html",
    "title": "Alang (Automata Language) | Automata Docs",
    "keywords": "Alang (Automata Language) Alang is a language for defining finite-state automata. Alang Grammar Specification AlangExpr ::= UnionExpr UnionExpr ::= DifferenceExpr ('|' DifferenceExpr)* DifferenceExpr ::= IntersectionExpr ('-' IntersectionExpr)* IntersectionExpr ::= ConcatenationExpr ('&' ConcatenationExpr)* ConcatenationExpr ::= PostfixExpr PostfixExpr* PostfixExpr ::= PrimaryExpr PostfixOp* PrimaryExpr ::= '(' [AlangExpr] ')' | Atom Atom ::= AtomChar+ PostfixOp ::= '?' | '*' | '+' | '~' AtomChar ::= ^('|' | '&' | '-' | '?' | '*' | '+' | '~' | '(' | ')' | '\\ws') Operators Ordered by Precedence (Lowest-to-Highest) Precedence Operation Operator Character Position & Arity 1 Union | Infix binary 2 Difference - Infix binary 3 Intersection & Infix binary 4 Concatenation (implicit) Juxtaposition 5 Option ? Postfix unary 5 Kleene Star * Postfix unary 5 Kleene Plus + Postfix unary 5 Complement ~ Postfix unary 6 Group ( ) Enclosing unary Atom string literal Atomic leaf Notes Operators with higher precedence levels bind more tightly than those with lower levels. Operators of the same precedence level are left-associative. Whitespace is allowed anywhere in the grammar, but it is never required unless to separate directly adjacent atoms."
  },
  "Automata.Core.Alang.AlangCursor.html": {
    "href": "Automata.Core.Alang.AlangCursor.html",
    "title": "Struct AlangCursor | Automata Docs",
    "keywords": "Struct AlangCursor A cursor for parsing Alang expressions from an input string. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public ref struct AlangCursor Constructors | Edit this page View Source AlangCursor(string) Initializes a new instance of the AlangCursor struct with the specified input string. Declaration public AlangCursor(string input) Parameters Type Name Description string input The input string to parse. Properties | Edit this page View Source First Gets the first character in the remaining input, or EOI if the input is empty. Declaration public readonly char First { get; } Property Value Type Description char | Edit this page View Source IsEmpty Gets a value indicating whether the cursor has reached the end of the input. Declaration public readonly bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsExpressionStart Gets a value indicating whether the current character indicates the start of an expression. Declaration public readonly bool IsExpressionStart { get; } Property Value Type Description bool Methods | Edit this page View Source ConsumeAtom() Consumes an atom from the input. Declaration public Atom ConsumeAtom() Returns Type Description Atom An Atom representing the consumed atom. Exceptions Type Condition FormatException Thrown when the current character is not a valid start of an atom. | Edit this page View Source ToString() Returns a string representation of the remaining input. Declaration public override readonly string ToString() Returns Type Description string A string that represents the remaining input. Overrides ValueType.ToString() | Edit this page View Source TryConsume(char) Tries to consume the specified character from the input and advances the cursor if successful. Declaration public bool TryConsume(char c) Parameters Type Name Description char c The character to attempt to consume. Returns Type Description bool true if the character was successfully consumed; otherwise, false. | Edit this page View Source TryConsumeAny(params char[]) Tries to consume one of the specified characters from the input and advances the cursor if successful. Declaration public char TryConsumeAny(params char[] chars) Parameters Type Name Description char[] chars An array of characters to attempt to consume. Returns Type Description char The character that was consumed if successful; otherwise, Invalid. Remarks This method supports inclusion of EOI to also match against End-Of-Input."
  },
  "Automata.Core.Alang.AlangExpr.html": {
    "href": "Automata.Core.Alang.AlangExpr.html",
    "title": "Class AlangExpr | Automata Docs",
    "keywords": "Class AlangExpr Represents an expression in the Alang (Automata language) used for defining finite-state automata. Inheritance object AlangExpr Atom InfixBinary PostfixUnary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class AlangExpr Remarks The Alang grammar specification: AlangExpr ::= UnionExpr UnionExpr ::= DifferenceExpr ('|' DifferenceExpr)* DifferenceExpr ::= IntersectionExpr ('-' IntersectionExpr)* IntersectionExpr ::= ConcatenationExpr ('&' ConcatenationExpr)* ConcatenationExpr ::= PostfixExpr PostfixExpr* PostfixExpr ::= PrimaryExpr PostfixOp* PrimaryExpr ::= '(' [AlangExpr] ')' | Atom Atom ::= AtomChar+ PostfixOp::= '?' | '*' | '+' | '~' AtomChar::= ^('|' | '&' | '-' | '?' | '*' | '+' | '~' | '(' | ')' | '\\ws') Alang operators ordered by precedence (lowest-to-highest). Precedence Operation Operator character Position & Arity 1 Union | Infix binary 2 Difference - Infix binary 3 Intersection & Infix binary 4 Concatenation (implicit) Juxtaposition 5 Option ? Postfix unary 5 Kleene Star * Postfix unary 5 Kleene Plus + Postfix unary 5 Complement ~ Postfix unary 6 Group ( ) Enclosing unary Atom string literal Atomic leaf Operators with higher precedence levels bind more tightly than those with lower levels. Same level precedence are left-associative. Whitespace is allowed anywhere in the grammar, but it is never required unless to separate directly adjacent atoms. Constructors | Edit this page View Source AlangExpr() Initializes a new instance of the AlangExpr class. Declaration protected AlangExpr() Properties | Edit this page View Source Empty Gets an instance of Atom representing the empty expression. Declaration public static AlangExpr Empty { get; } Property Value Type Description AlangExpr | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public abstract string ExpressionString { get; } Property Value Type Description string | Edit this page View Source IsEmpty Gets a value indicating whether this expression is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public abstract int Precedence { get; } Property Value Type Description int Methods | Edit this page View Source Param(AlangExpr, AlangExpr) Returns the expression string of the given expression, enclosed in parentheses only if necessary based on operator precedence. Declaration protected static string Param(AlangExpr expr, AlangExpr parent) Parameters Type Name Description AlangExpr expr The expression to get the string representation of. AlangExpr parent The parent expression of expr. Returns Type Description string The expression string, potentially enclosed in parentheses. Remarks Parentheses are added if the precedence of the given expression is lower than the precedence of the parent. | Edit this page View Source Parse(string) Parses the specified input string into an AlangExpr. Declaration public static AlangExpr Parse(string input) Parameters Type Name Description string input The input string to parse. Returns Type Description AlangExpr An AlangExpr representing the parsed expression. Exceptions Type Condition FormatException Thrown when the input contains unexpected tokens. | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string The expression string of this expression. Overrides object.ToString()"
  },
  "Automata.Core.Alang.Atom.html": {
    "href": "Automata.Core.Alang.Atom.html",
    "title": "Class Atom | Automata Docs",
    "keywords": "Class Atom Represents an atomic expression in the Alang language used for defining finite-state automata. Inheritance object AlangExpr Atom Inherited Members AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Atom : AlangExpr Remarks An atom is a basic unit in the Alang language, consisting of one or more characters that are not operators or whitespace. It serves as an atomic leaf node in the expression tree. Constructors | Edit this page View Source Atom(string) Initializes a new instance of the Atom class with the specified symbol. Declaration public Atom(string symbol) Parameters Type Name Description string symbol The symbol representing this atom. Properties | Edit this page View Source ExpressionString Gets the string representation of this atom. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this atom. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Remarks The precedence level for an atom is set to 10, indicating it binds most tightly in expressions. | Edit this page View Source Symbol Gets the symbol representing this atom. Declaration public string Symbol { get; } Property Value Type Description string"
  },
  "Automata.Core.Alang.Chars.html": {
    "href": "Automata.Core.Alang.Chars.html",
    "title": "Class Chars | Automata Docs",
    "keywords": "Class Chars Provides character definitions and utility methods Alang. Inheritance object Chars Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public static class Chars Fields | Edit this page View Source Complement Complement operator character. Declaration public const char Complement = '~' Field Value Type Description char | Edit this page View Source Difference Difference operator character. Declaration public const char Difference = '-' Field Value Type Description char | Edit this page View Source EOI End of input character. Declaration public const char EOI = '\\0' Field Value Type Description char | Edit this page View Source Intersection Intersection operator character. Declaration public const char Intersection = '&' Field Value Type Description char | Edit this page View Source Invalid Invalid character. Declaration public const char Invalid = '\\uffff' Field Value Type Description char | Edit this page View Source KleenePlus Kleene plus operator character. Declaration public const char KleenePlus = '+' Field Value Type Description char | Edit this page View Source KleeneStar Kleene star operator character. Declaration public const char KleeneStar = '*' Field Value Type Description char | Edit this page View Source LeftParen Left parenthesis character. Declaration public const char LeftParen = '(' Field Value Type Description char | Edit this page View Source Option Option operator character. Declaration public const char Option = '?' Field Value Type Description char | Edit this page View Source RightParen Right parenthesis character. Declaration public const char RightParen = ')' Field Value Type Description char | Edit this page View Source Union Union operator character. Declaration public const char Union = '|' Field Value Type Description char Methods | Edit this page View Source IsAtomChar(char) Determines if a character can be part of an atom. Declaration public static bool IsAtomChar(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool True if the character can be part of an atom; otherwise, false. | Edit this page View Source IsExpressionStart(char) Determines if a character can be the start of an expression. Declaration public static bool IsExpressionStart(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool True if the character can start an expression; otherwise, false. | Edit this page View Source IsPostfixOp(char) Determines if a character is a postfix operator. Declaration public static bool IsPostfixOp(char c) Parameters Type Name Description char c The character to check. Returns Type Description bool True if the character is a postfix operator; otherwise, false."
  },
  "Automata.Core.Alang.Complement.html": {
    "href": "Automata.Core.Alang.Complement.html",
    "title": "Class Complement | Automata Docs",
    "keywords": "Class Complement Inheritance object AlangExpr PostfixUnary Complement Inherited Members PostfixUnary.Operand PostfixUnary.ParsePostfix(ref AlangCursor) AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Complement : PostfixUnary Constructors | Edit this page View Source Complement(AlangExpr) Declaration public Complement(AlangExpr operand) Parameters Type Name Description AlangExpr operand Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.Concatenation.html": {
    "href": "Automata.Core.Alang.Concatenation.html",
    "title": "Class Concatenation | Automata Docs",
    "keywords": "Class Concatenation Inheritance object AlangExpr InfixBinary Concatenation Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Concatenation : InfixBinary Constructors | Edit this page View Source Concatenation(AlangExpr, AlangExpr) Declaration public Concatenation(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Declaration public static AlangExpr Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor Returns Type Description AlangExpr"
  },
  "Automata.Core.Alang.Difference.html": {
    "href": "Automata.Core.Alang.Difference.html",
    "title": "Class Difference | Automata Docs",
    "keywords": "Class Difference Inheritance object AlangExpr InfixBinary Difference Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Difference : InfixBinary Constructors | Edit this page View Source Difference(AlangExpr, AlangExpr) Declaration public Difference(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Declaration public static AlangExpr Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor Returns Type Description AlangExpr"
  },
  "Automata.Core.Alang.InfixBinary.html": {
    "href": "Automata.Core.Alang.InfixBinary.html",
    "title": "Class InfixBinary | Automata Docs",
    "keywords": "Class InfixBinary Inheritance object AlangExpr InfixBinary Concatenation Difference Intersection Union Inherited Members AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Precedence AlangExpr.ExpressionString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class InfixBinary : AlangExpr Constructors | Edit this page View Source InfixBinary(AlangExpr, AlangExpr) Declaration public InfixBinary(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source Left Declaration public AlangExpr Left { get; } Property Value Type Description AlangExpr | Edit this page View Source Right Declaration public AlangExpr Right { get; } Property Value Type Description AlangExpr"
  },
  "Automata.Core.Alang.Intersection.html": {
    "href": "Automata.Core.Alang.Intersection.html",
    "title": "Class Intersection | Automata Docs",
    "keywords": "Class Intersection Inheritance object AlangExpr InfixBinary Intersection Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Intersection : InfixBinary Constructors | Edit this page View Source Intersection(AlangExpr, AlangExpr) Declaration public Intersection(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Declaration public static AlangExpr Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor Returns Type Description AlangExpr"
  },
  "Automata.Core.Alang.KleenePlus.html": {
    "href": "Automata.Core.Alang.KleenePlus.html",
    "title": "Class KleenePlus | Automata Docs",
    "keywords": "Class KleenePlus Inheritance object AlangExpr PostfixUnary KleenePlus Inherited Members PostfixUnary.Operand PostfixUnary.ParsePostfix(ref AlangCursor) AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleenePlus : PostfixUnary Constructors | Edit this page View Source KleenePlus(AlangExpr) Declaration public KleenePlus(AlangExpr operand) Parameters Type Name Description AlangExpr operand Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.KleeneStar.html": {
    "href": "Automata.Core.Alang.KleeneStar.html",
    "title": "Class KleeneStar | Automata Docs",
    "keywords": "Class KleeneStar Inheritance object AlangExpr PostfixUnary KleeneStar Inherited Members PostfixUnary.Operand PostfixUnary.ParsePostfix(ref AlangCursor) AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class KleeneStar : PostfixUnary Constructors | Edit this page View Source KleeneStar(AlangExpr) Declaration public KleeneStar(AlangExpr operand) Parameters Type Name Description AlangExpr operand Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.Option.html": {
    "href": "Automata.Core.Alang.Option.html",
    "title": "Class Option | Automata Docs",
    "keywords": "Class Option Inheritance object AlangExpr PostfixUnary Option Inherited Members PostfixUnary.Operand PostfixUnary.ParsePostfix(ref AlangCursor) AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Option : PostfixUnary Constructors | Edit this page View Source Option(AlangExpr) Declaration public Option(AlangExpr operand) Parameters Type Name Description AlangExpr operand Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence"
  },
  "Automata.Core.Alang.PostfixUnary.html": {
    "href": "Automata.Core.Alang.PostfixUnary.html",
    "title": "Class PostfixUnary | Automata Docs",
    "keywords": "Class PostfixUnary Inheritance object AlangExpr PostfixUnary Complement KleenePlus KleeneStar Option Inherited Members AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Precedence AlangExpr.ExpressionString AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public abstract class PostfixUnary : AlangExpr Constructors | Edit this page View Source PostfixUnary(AlangExpr) Declaration public PostfixUnary(AlangExpr operand) Parameters Type Name Description AlangExpr operand Properties | Edit this page View Source Operand Declaration public AlangExpr Operand { get; } Property Value Type Description AlangExpr Methods | Edit this page View Source ParsePostfix(ref AlangCursor) Declaration public static AlangExpr ParsePostfix(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor Returns Type Description AlangExpr"
  },
  "Automata.Core.Alang.Union.html": {
    "href": "Automata.Core.Alang.Union.html",
    "title": "Class Union | Automata Docs",
    "keywords": "Class Union Inheritance object AlangExpr InfixBinary Union Inherited Members InfixBinary.Left InfixBinary.Right AlangExpr.Empty AlangExpr.IsEmpty AlangExpr.Parse(string) AlangExpr.Param(AlangExpr, AlangExpr) AlangExpr.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core.Alang Assembly: Automata.Core.dll Syntax public class Union : InfixBinary Constructors | Edit this page View Source Union(AlangExpr, AlangExpr) Declaration public Union(AlangExpr left, AlangExpr right) Parameters Type Name Description AlangExpr left AlangExpr right Properties | Edit this page View Source ExpressionString Gets the string representation of this expression. Declaration public override string ExpressionString { get; } Property Value Type Description string Overrides AlangExpr.ExpressionString | Edit this page View Source Precedence Gets the precedence level of this expression. Declaration public override int Precedence { get; } Property Value Type Description int Overrides AlangExpr.Precedence Methods | Edit this page View Source Parse(ref AlangCursor) Declaration public static AlangExpr Parse(ref AlangCursor cursor) Parameters Type Name Description AlangCursor cursor Returns Type Description AlangExpr"
  },
  "Automata.Core.Alang.html": {
    "href": "Automata.Core.Alang.html",
    "title": "Namespace Automata.Core.Alang | Automata Docs",
    "keywords": "Namespace Automata.Core.Alang Classes AlangExpr Represents an expression in the Alang (Automata language) used for defining finite-state automata. Atom Represents an atomic expression in the Alang language used for defining finite-state automata. Chars Provides character definitions and utility methods Alang. Complement Concatenation Difference InfixBinary Intersection KleenePlus KleeneStar Option PostfixUnary Union Structs AlangCursor A cursor for parsing Alang expressions from an input string."
  },
  "Automata.Core.CanonicalAlphabet.html": {
    "href": "Automata.Core.CanonicalAlphabet.html",
    "title": "Class CanonicalAlphabet | Automata Docs",
    "keywords": "Class CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Inheritance object CanonicalAlphabet Implements IEquatable<CanonicalAlphabet> IAlphabet Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class CanonicalAlphabet : IEquatable<CanonicalAlphabet>, IAlphabet Remarks A CanonicalAlphabet is defined by the following properties: Immutable: Structural and behavioral invariance, ensuring thread safety and predictable behavior. Performance: Optimized for fast, read-only operations with minimal memory overhead. Ordering: Symbols are sorted according to CanonicalStringComparer. Indexing: Symbols are associated with contiguous, ordered integer indices [0..Count). Constructors | Edit this page View Source CanonicalAlphabet(IEnumerable<string>) Initializes a new instance of the CanonicalAlphabet class with the specified symbols. Declaration public CanonicalAlphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to initialize the alphabet with. Properties | Edit this page View Source CanonicalStringComparer Canonical string comparer used by an alphabet, used to ensure canonical ordering of symbols, when required. Declaration public static StringComparer CanonicalStringComparer { get; } Property Value Type Description StringComparer | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source Empty An empty CanonicalAlphabet without any symbols. Declaration public static CanonicalAlphabet Empty { get; } Property Value Type Description CanonicalAlphabet | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods | Edit this page View Source Equals(CanonicalAlphabet?) Indicates whether the current alphabet is equal (identical) to another alphabet. Declaration public bool Equals(CanonicalAlphabet? other) Parameters Type Name Description CanonicalAlphabet other Returns Type Description bool | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code for the current alphabet. Declaration public override int GetHashCode() Returns Type Description int A hash code for the alphabet. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string that represents the current alphabet, including its size. Declaration public override string ToString() Returns Type Description string A string representation of the alphabet. Overrides object.ToString() | Edit this page View Source ToStringExpanded() Returns a string with each symbol and its index, separated by a newline. Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Operators | Edit this page View Source operator ==(CanonicalAlphabet, CanonicalAlphabet) Indicates whether two specified instances of CanonicalAlphabet are equal. Declaration public static bool operator ==(CanonicalAlphabet left, CanonicalAlphabet right) Parameters Type Name Description CanonicalAlphabet left The first alphabet to compare. CanonicalAlphabet right The second alphabet to compare. Returns Type Description bool true if the two alphabets are equal; otherwise, false. | Edit this page View Source operator !=(CanonicalAlphabet, CanonicalAlphabet) Indicates whether two specified instances of CanonicalAlphabet are not equal. Declaration public static bool operator !=(CanonicalAlphabet left, CanonicalAlphabet right) Parameters Type Name Description CanonicalAlphabet left The first alphabet to compare. CanonicalAlphabet right The second alphabet to compare. Returns Type Description bool true if the two alphabets are not equal; otherwise, false. Implements IEquatable<T> IAlphabet See Also Cfa"
  },
  "Automata.Core.Cfa.html": {
    "href": "Automata.Core.Cfa.html",
    "title": "Class Cfa | Automata Docs",
    "keywords": "Class Cfa Canonical Finite-state Automaton (CFA). Inheritance object Cfa Implements IEquatable<Cfa> IEnumerable<Transition> IEnumerable IDfa IFsa Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Cfa : IEquatable<Cfa>, IEnumerable<Transition>, IEnumerable, IDfa, IFsa Remarks The Cfa is the most optimized automaton representation, characterized by: Deterministic and Minimal: The least possible states and transitions (Similarly to a minimized DFA). Canonical alphabet: Reduced, contiguous, and lexicographically ordered. Canonical states and transitions: contiguously indexed, optimized, and fully ordered. Immutable: Guarantees structural and behavioral invariance. Performance-optimized for efficient read-only operations. For any language, the Cfa is unique, embodying its minimal deterministic automaton in canonical form. Any two Cfa instances accepting the same language are identical. Constructors | Edit this page View Source Cfa(IFsa) Initializes a new instance of the Cfa class from an existing FSA. Declaration public Cfa(IFsa fsa) Parameters Type Name Description IFsa fsa The finite state automaton to convert. Fields | Edit this page View Source FinalStates Gets the final states of the CFA. Declaration public readonly FrozenSet<int> FinalStates Field Value Type Description FrozenSet<int> | Edit this page View Source StateCount Gets the number of states in the CFA. Declaration public readonly int StateCount Field Value Type Description int Properties | Edit this page View Source Alphabet Gets the alphabet used by the CFA. Declaration public CanonicalAlphabet Alphabet { get; } Property Value Type Description CanonicalAlphabet | Edit this page View Source InitialState Gets the initial state. Always 0 for a non-empty Cfa. For an empty Cfa, the initial state is InvalidState. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEmpty Gets a value indicating whether the CFA is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source TransitionCount Gets the number of transitions in the automaton. Declaration public int TransitionCount { get; } Property Value Type Description int Methods | Edit this page View Source EpsilonTransitions() Gets an enumerable collection of the epsilon transitions, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> An empty enumerable collection of EpsilonTransition. | Edit this page View Source Equals(Cfa?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Cfa? other) Parameters Type Name Description Cfa other An object to compare with this object. Returns Type Description bool true if the current object is equal to other; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the transitions. Declaration public IEnumerator<Transition> GetEnumerator() Returns Type Description IEnumerator<Transition> An enumerator for the transitions. | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is the initial state; otherwise, false. | Edit this page View Source State(int) Returns a StateView for the given state. Declaration public StateView State(int state) Parameters Type Name Description int state The state. Returns Type Description StateView A StateView containing the transitions from the given state. | Edit this page View Source SymbolicTransitions() Gets an enumerable collection of the symbolic transitions. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> An enumerable collection of Transition(int, int). | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState The source state. int symbol The symbol of the transition. Returns Type Description Transition The transition from the given state with the given symbol, or Invalid if no such transition exists. Operators | Edit this page View Source operator ==(Cfa, Cfa) Indicates whether two specified instances of Cfa are equal. Declaration public static bool operator ==(Cfa left, Cfa right) Parameters Type Name Description Cfa left The first Cfa to compare. Cfa right The second Cfa to compare. Returns Type Description bool true iff the two Cfa instances are equal. | Edit this page View Source operator !=(Cfa, Cfa) Indicates whether two specified instances of Cfa are not equal. Declaration public static bool operator !=(Cfa left, Cfa right) Parameters Type Name Description Cfa left The first Cfa to compare. Cfa right The second Cfa to compare. Returns Type Description bool false iff the two Cfa instances are not equal. Implements IEquatable<T> IEnumerable<T> IEnumerable IDfa IFsa"
  },
  "Automata.Core.Constants.html": {
    "href": "Automata.Core.Constants.html",
    "title": "Class Constants | Automata Docs",
    "keywords": "Class Constants Class representing automata related constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public static class Constants Fields | Edit this page View Source InvalidState Denotes an invalid state. Declaration public const int InvalidState = -1 Field Value Type Description int | Edit this page View Source InvalidSymbolIndex Denotes an invalid symbol. Declaration public const int InvalidSymbolIndex = -1 Field Value Type Description int"
  },
  "Automata.Core.Dfa.html": {
    "href": "Automata.Core.Dfa.html",
    "title": "Class Dfa | Automata Docs",
    "keywords": "Class Dfa A deterministic finite automaton (DFA). Inheritance object Dfa Implements IDfa IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Dfa : IDfa, IFsa Remarks A DFA is always deterministic and epsilon-free. Constructors | Edit this page View Source Dfa() Initializes a new instance of the Dfa class with an empty alphabet. Declaration public Dfa() | Edit this page View Source Dfa(MutableAlphabet) Initializes a new instance of the Dfa class with the specified alphabet. Declaration public Dfa(MutableAlphabet alphabet) Parameters Type Name Description MutableAlphabet alphabet The alphabet used by the DFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the DFA. Declaration public MutableAlphabet Alphabet { get; } Property Value Type Description MutableAlphabet | Edit this page View Source FinalStates Gets the final states of the DFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialState Gets the initial state of the DFA. Declaration public int InitialState { get; } Property Value Type Description int | Edit this page View Source IsEmpty Gets a value indicating whether the DFA is empty. A DFA is considered empty if it has no initial state. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the DFA is epsilon-free. Always returns true. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source MaxState Gets an upper bound for the maximum state number in the DFA. Declaration public int MaxState { get; } Property Value Type Description int Remarks This value denotes an upper bound for the state numbers in the DFA. The actual maximum state number may be lower (but not higher), since we do not keep track of removed states for performance reasons. Methods | Edit this page View Source Accepts(IEnumerable<string>) Indicates whether the DFA accepts the given sequence of symbols. Declaration public bool Accepts(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence The sequence of symbols to check. Returns Type Description bool true if the DFA accepts the sequence; otherwise, false. Remarks The DFA processes each symbol in the sequence, transitioning between states according to its transition function. If the DFA reaches a final state after processing all symbols, the sequence is accepted. | Edit this page View Source Add(Transition) Adds a transition to the DFA. Declaration public bool Add(Transition transition) Parameters Type Name Description Transition transition The transition to add. Returns Type Description bool true if the transition was added; otherwise, false. Remarks If a transition with the same from-state and the same symbol already exists, that transition will be replaced. | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the DFA, which is always empty. Declaration public IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> An empty enumerable collection. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is the initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is the initial state; otherwise, false. | Edit this page View Source Minimized() Minimizes the DFA using Brzozowski's algorithm. Declaration public Dfa Minimized() Returns Type Description Dfa A minimized DFA. | Edit this page View Source ReachableState(int, int) Returns the state reachable from the given state on the given symbol. Declaration public int ReachableState(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description int The state reachable from the given state on the given symbol. If no such transition exists, InvalidState is returned. | Edit this page View Source Reversed() Reverses the DFA. Declaration public Nfa Reversed() Returns Type Description Nfa An NFA representing the reversed DFA. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state The state to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(int) Sets the initial state of the DFA. Declaration public void SetInitial(int state) Parameters Type Name Description int state The state to set as the initial state. | Edit this page View Source State(int) Returns a StateView of the given state. Declaration public StateView State(int fromState) Parameters Type Name Description int fromState The from state. Returns Type Description StateView A StateView for the given state. Remarks This method provides compatibility with contiguous memory representations like Cfa. When possible, prefer using Transitions(int) which avoids a memory allocation and therefore has slightly less overhead. | Edit this page View Source SymbolicTransitions() Gets the transitions of the DFA. Declaration public IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition> An enumerable collection of transitions. | Edit this page View Source ToCFA() Converts the DFA to a canonical finite automaton (CFA). Declaration public Cfa ToCFA() Returns Type Description Cfa A CFA representing the DFA. | Edit this page View Source ToNFA() Converts the DFA to a nondeterministic finite automaton (NFA). Declaration public Nfa ToNFA() Returns Type Description Nfa An NFA representing the DFA. | Edit this page View Source Transition(int, int) Returns the transition from the given state with the given symbol. Declaration public Transition Transition(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description Transition The transition from the given state on the given symbol, or Invalid if no such transition exists. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description SortedSet<Transition> The set of transitions from the given state. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds all provided transitions that are currently not present in the set. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The transitions to add. Implements IDfa IFsa"
  },
  "Automata.Core.EpsilonTransition.html": {
    "href": "Automata.Core.EpsilonTransition.html",
    "title": "Struct EpsilonTransition | Automata Docs",
    "keywords": "Struct EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. Implements IComparable<EpsilonTransition> IEquatable<EpsilonTransition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct EpsilonTransition : IComparable<EpsilonTransition>, IEquatable<EpsilonTransition> Remarks An epsilon transition is a transition that lacks a symbol Constructors | Edit this page View Source EpsilonTransition(int, int) An epsilon transition in an automaton, defined by a starting state and an ending state. Declaration public EpsilonTransition(int FromState, int ToState) Parameters Type Name Description int FromState The state origin of the transition. int ToState The destination state of the transition. Remarks An epsilon transition is a transition that lacks a symbol Fields | Edit this page View Source Epsilon Denotes the string representation for ε - the empty epsilon string. Epsilon is not part of any alphabet, the symbol is used solely for output purposes, never for computation. Declaration public const string Epsilon = \"ε\" Field Value Type Description string Properties | Edit this page View Source FromState The state origin of the transition. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source ToState The destination state of the transition. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareTo(EpsilonTransition) Compares the current epsilon transition to another epsilon transition. Declaration public int CompareTo(EpsilonTransition other) Parameters Type Name Description EpsilonTransition other The other epsilon transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source MaxTrans(int) Declaration public static EpsilonTransition MaxTrans(int fromState) Parameters Type Name Description int fromState Returns Type Description EpsilonTransition | Edit this page View Source MinTrans(int) Declaration public static EpsilonTransition MinTrans(int fromState) Parameters Type Name Description int fromState Returns Type Description EpsilonTransition | Edit this page View Source Reverse() Reverses the epsilon transition. Declaration public EpsilonTransition Reverse() Returns Type Description EpsilonTransition A new EpsilonTransition with the from and to states swapped. Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.IAlphabet.html": {
    "href": "Automata.Core.IAlphabet.html",
    "title": "Interface IAlphabet | Automata Docs",
    "keywords": "Interface IAlphabet Common interface for an alphabet associated with a finite state automaton. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IAlphabet Properties | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods | Edit this page View Source ToString() Returns a string representation of the current alphabet,. Declaration string ToString() Returns Type Description string | Edit this page View Source ToStringExpanded() Returns a string with each symbol and its index, separated by a newline. Declaration string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline."
  },
  "Automata.Core.IDfa.html": {
    "href": "Automata.Core.IDfa.html",
    "title": "Interface IDfa | Automata Docs",
    "keywords": "Interface IDfa A common interface for deterministic finite automata, such as Dfa and Cfa. Inherited Members IFsa.Alphabet IFsa.IsEmpty IFsa.IsEpsilonFree IFsa.IsInitial(int) IFsa.IsFinal(int) IFsa.SymbolicTransitions() IFsa.EpsilonTransitions() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IDfa : IFsa Properties | Edit this page View Source InitialState Gets the initial state of the deterministic automaton. Declaration int InitialState { get; } Property Value Type Description int Methods | Edit this page View Source State(int) Gets a read-only view of the state from the specified state. Declaration StateView State(int fromState) Parameters Type Name Description int fromState The state from which to get the state view. Returns Type Description StateView A StateView representing the state view from the specified state."
  },
  "Automata.Core.IFsa.html": {
    "href": "Automata.Core.IFsa.html",
    "title": "Interface IFsa | Automata Docs",
    "keywords": "Interface IFsa Represents a finite state automaton (FSA) interface. Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public interface IFsa Properties | Edit this page View Source Alphabet Gets the alphabet used by the FSA. Declaration IAlphabet Alphabet { get; } Property Value Type Description IAlphabet | Edit this page View Source IsEmpty Indicates whether the FSA is empty, meaning it has no states or transitions. Declaration bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the FSA is epsilon-free. Declaration bool IsEpsilonFree { get; } Property Value Type Description bool Methods | Edit this page View Source EpsilonTransitions() Gets the epsilon transitions of the FSA. Declaration IEnumerable<EpsilonTransition> EpsilonTransitions() Returns Type Description IEnumerable<EpsilonTransition> | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false. | Edit this page View Source SymbolicTransitions() Gets the transitions of the FSA. Declaration IEnumerable<Transition> SymbolicTransitions() Returns Type Description IEnumerable<Transition>"
  },
  "Automata.Core.IntSet.html": {
    "href": "Automata.Core.IntSet.html",
    "title": "Class IntSet | Automata Docs",
    "keywords": "Class IntSet Represents an immutable set of integers. Inheritance object IntSet Implements IEquatable<IntSet> IReadOnlySet<int> IReadOnlyCollection<int> IEnumerable<int> IEnumerable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class IntSet : IEquatable<IntSet>, IReadOnlySet<int>, IReadOnlyCollection<int>, IEnumerable<int>, IEnumerable Constructors | Edit this page View Source IntSet(HashSet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(HashSet<int> elements) Parameters Type Name Description HashSet<int> elements The elements to include in the set. | Edit this page View Source IntSet(IEnumerable<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(IEnumerable<int> elements) Parameters Type Name Description IEnumerable<int> elements The elements to include in the set. | Edit this page View Source IntSet(ISet<int>) Initializes a new instance of the IntSet class with the specified elements. Declaration public IntSet(ISet<int> elements) Parameters Type Name Description ISet<int> elements The elements to include in the set. Properties | Edit this page View Source Count Gets the number of elements in the set. Declaration public int Count { get; } Property Value Type Description int Methods | Edit this page View Source Contains(int) Determines if the set contains a specific item. Declaration public bool Contains(int item) Parameters Type Name Description int item The item to check if the set contains. Returns Type Description bool true if found; otherwise false. | Edit this page View Source Equals(IntSet?) Indicates whether the current set is equal to another set. Declaration public bool Equals(IntSet? other) Parameters Type Name Description IntSet other The other set to compare to. Returns Type Description bool true if the sets are equal; otherwise, false. | Edit this page View Source Equals(object?) Indicates whether the current set is equal to another object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare to. Returns Type Description bool true if the object is an IntSet and the sets are equal; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<int> GetEnumerator() Returns Type Description IEnumerator<int> An enumerator that can be used to iterate through the collection. | Edit this page View Source GetHashCode() Gets the hash code for the current set. Declaration public override int GetHashCode() Returns Type Description int The hash code for the current set. Overrides object.GetHashCode() | Edit this page View Source IsProperSubsetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) subset of a specified collection. Declaration public bool IsProperSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a proper subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsProperSupersetOf(IEnumerable<int>) Determines whether the current set is a proper (strict) superset of a specified collection. Declaration public bool IsProperSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the collection is a proper superset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSubsetOf(IEnumerable<int>) Determine whether the current set is a subset of a specified collection. Declaration public bool IsSubsetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source IsSupersetOf(IEnumerable<int>) Determine whether the current set is a super set of a specified collection. Declaration public bool IsSupersetOf(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is a subset of other; otherwise false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source Overlaps(IEnumerable<int>) Determines whether the current set overlaps with the specified collection. Declaration public bool Overlaps(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool trueif the current set and other share at least one common element; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source SetEquals(IEnumerable<int>) Determines whether the current set and the specified collection contain the same elements. Declaration public bool SetEquals(IEnumerable<int> other) Parameters Type Name Description IEnumerable<int> other The collection to compare to the current set. Returns Type Description bool true if the current set is equal to other; otherwise, false. Exceptions Type Condition ArgumentNullException other is null. | Edit this page View Source ToString() Returns a string that represents the current set. Declaration public override string ToString() Returns Type Description string A string that represents the current set. Overrides object.ToString() Implements IEquatable<T> IReadOnlySet<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable"
  },
  "Automata.Core.MutableAlphabet.html": {
    "href": "Automata.Core.MutableAlphabet.html",
    "title": "Class MutableAlphabet | Automata Docs",
    "keywords": "Class MutableAlphabet Represents a mutable alphabet associated with a finite state automaton. Inheritance object MutableAlphabet Implements IAlphabet Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class MutableAlphabet : IAlphabet Constructors | Edit this page View Source MutableAlphabet() Initializes a new instance of the MutableAlphabet class. Declaration public MutableAlphabet() | Edit this page View Source MutableAlphabet(IEnumerable<string>) Initializes a new instance of the MutableAlphabet class with the specified symbols. Declaration public MutableAlphabet(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to initialize the alphabet with. Properties | Edit this page View Source Count Gets the number of symbols in the alphabet. Declaration public int Count { get; } Property Value Type Description int | Edit this page View Source this[int] Gets the symbol at the specified index. Declaration public string this[int index] { get; } Parameters Type Name Description int index The index of the symbol. Property Value Type Description string The symbol at the specified index. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the index is out of range. | Edit this page View Source this[string] Gets the index of the specified symbol. Declaration public int this[string symbol] { get; } Parameters Type Name Description string symbol The symbol to get the index of. Property Value Type Description int The index of the specified symbol, or InvalidSymbolIndex if the symbol does not exist. Methods | Edit this page View Source AddAll(IEnumerable<string>) Adds all the specified symbols to the alphabet, that are not already present. Declaration public void AddAll(IEnumerable<string> symbols) Parameters Type Name Description IEnumerable<string> symbols The symbols to add. | Edit this page View Source GetOrAdd(string) Gets the index of the specified symbol or adds it if it does not exist. Declaration public int GetOrAdd(string symbol) Parameters Type Name Description string symbol The symbol to get or add. Returns Type Description int The index of the specified symbol. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string A string that represents the current alphabet, including its size. Overrides object.ToString() | Edit this page View Source ToStringExpanded() Declaration public string ToStringExpanded() Returns Type Description string A string with each symbol and its index, separated by a newline. Implements IAlphabet"
  },
  "Automata.Core.Nfa.html": {
    "href": "Automata.Core.Nfa.html",
    "title": "Class Nfa | Automata Docs",
    "keywords": "Class Nfa Represents a nondeterministic finite automaton (NFA). Inheritance object Nfa Implements IFsa Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public class Nfa : IFsa Remarks States are represented simply as integers (int), which essentially are just unique IDs. NFAs are defined mainly by two sets of transitions (symbolic and epsilon), which are kept separate for performance. In addition, there are two sets defining the initial states and final states respectively. NFAs (in contrast to DFAs) can have multiple initial states. Constructors | Edit this page View Source Nfa() Initializes a new instance of the Nfa class with an empty alphabet. Declaration public Nfa() | Edit this page View Source Nfa(MutableAlphabet) Initializes a new instance of the Nfa class with the specified alphabet. Declaration public Nfa(MutableAlphabet alphabet) Parameters Type Name Description MutableAlphabet alphabet The alphabet used by the NFA. | Edit this page View Source Nfa(IEnumerable<IEnumerable<string>>) Initializes a new instance of a Nfa class to accept a set of sequences. Declaration public Nfa(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Properties | Edit this page View Source Alphabet Gets the alphabet used by the NFA. Declaration public MutableAlphabet Alphabet { get; } Property Value Type Description MutableAlphabet | Edit this page View Source FinalStates Gets the final states of the NFA. Declaration public IReadOnlySet<int> FinalStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source InitialStates Gets the initial states of the NFA. Declaration public IReadOnlySet<int> InitialStates { get; } Property Value Type Description IReadOnlySet<int> | Edit this page View Source IsEmpty Indicates whether the NFA is empty. Declaration public bool IsEmpty { get; } Property Value Type Description bool | Edit this page View Source IsEpsilonFree Indicates whether the NFA is epsilon-free. Declaration public bool IsEpsilonFree { get; } Property Value Type Description bool | Edit this page View Source MaxState Gets a upper bound for the maximum state number in the NFA. Declaration public int MaxState { get; } Property Value Type Description int Remarks This values denotes an upper bound for the state numbers in the NFA. The actual maximum state number may be lower (but not higher), since we do not keep track of removed states for performance reasons. Methods | Edit this page View Source Add(EpsilonTransition) Adds an epsilon transition to the NFA. Declaration public void Add(EpsilonTransition transition) Parameters Type Name Description EpsilonTransition transition The transition to add. | Edit this page View Source Add(Transition) Adds a symbolic (non-epsilon) transition to the NFA. Declaration public void Add(Transition transition) Parameters Type Name Description Transition transition The transition to add. | Edit this page View Source AvailableSymbols(IEnumerable<int>) Returns the set of symbols that can be used to transition directly from the given states. Declaration public IntSet AvailableSymbols(IEnumerable<int> fromStates) Parameters Type Name Description IEnumerable<int> fromStates The states from which to start. Returns Type Description IntSet The set of symbols that can be used to transition directly from the given states. | Edit this page View Source IsFinal(int) Indicates whether the specified state is a final state. Declaration public bool IsFinal(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is a final state; otherwise, false. | Edit this page View Source IsInitial(int) Indicates whether the specified state is an initial state. Declaration public bool IsInitial(int state) Parameters Type Name Description int state The state to check. Returns Type Description bool true if the specified state is an initial state; otherwise, false. | Edit this page View Source ReachableStates(IEnumerable<int>, int) Returns the states reachable from the given states on the given symbol, including epsilon closures. Declaration public IntSet ReachableStates(IEnumerable<int> fromStates, int symbol) Parameters Type Name Description IEnumerable<int> fromStates The states from which to start. int symbol The symbol to transition on. Returns Type Description IntSet The states reachable from the given states on the given symbol, including epsilon closures. | Edit this page View Source ReachableStatesOnEpsilonInPlace(HashSet<int>) Extends the provided set of states with their epsilon closure in place. Declaration public void ReachableStatesOnEpsilonInPlace(HashSet<int> fromStates) Parameters Type Name Description HashSet<int> fromStates The set of states to extend. Remarks Epsilon closure is all reachable states on epsilon transitions. | Edit this page View Source ReachableStatesOnSingleEpsilon(int) Returns the states reachable from the given state on a single epsilon transition. If the input state has an epsilon loop on itself, it will be included in the result. Declaration public IEnumerable<int> ReachableStatesOnSingleEpsilon(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description IEnumerable<int> The states reachable from the given state on a single epsilon transition. | Edit this page View Source ReachableStatesOnSingleSymbol(int, int) Returns the states reachable from the given state with the given symbol. Declaration public IEnumerable<int> ReachableStatesOnSingleSymbol(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description IEnumerable<int> The states reachable from the given state on the given symbol. | Edit this page View Source SetFinal(IEnumerable<int>, bool) Sets the specified states as final states or removes them from the final states. Declaration public void SetFinal(IEnumerable<int> states, bool final = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as final states. bool final If true, the states are added to the final states; otherwise, they are removed. | Edit this page View Source SetFinal(int, bool) Sets the specified state as a final state or removes it from the final states. Declaration public void SetFinal(int state, bool final = true) Parameters Type Name Description int state The state to set or remove as a final state. bool final If true, the state is added to the final states; otherwise, it is removed. | Edit this page View Source SetInitial(IEnumerable<int>, bool) Sets the specified states as initial states or removes them from the initial states. Declaration public void SetInitial(IEnumerable<int> states, bool initial = true) Parameters Type Name Description IEnumerable<int> states The states to set or remove as initial states. bool initial If true, the states are added to the initial states; otherwise, they are removed. | Edit this page View Source SetInitial(int, bool) Sets the specified state as an initial state or removes it from the initial states. Declaration public void SetInitial(int state, bool initial = true) Parameters Type Name Description int state The state to set or remove as an initial state. bool initial If true, the state is added to the initial states; otherwise, it is removed. | Edit this page View Source ToCfa() Converts the NFA to a CFA. Declaration public Cfa ToCfa() Returns Type Description Cfa A CFA representing the NFA. | Edit this page View Source ToDfa() Converts the NFA to a DFA. Declaration public Dfa ToDfa() Returns Type Description Dfa A DFA representing the NFA. | Edit this page View Source ToMinimizedDFA() Converts the NFA to a minimized DFA. Declaration public Dfa ToMinimizedDFA() Returns Type Description Dfa A minimized DFA representing the NFA. | Edit this page View Source Transitions(int) Returns the set of transitions from the given state. Declaration public SortedSet<Transition> Transitions(int fromState) Parameters Type Name Description int fromState The state from which to start. Returns Type Description SortedSet<Transition> The set of transitions from the given state. | Edit this page View Source Transitions(int, int) Returns the transitions from the given state with the given symbol. Declaration public SortedSet<Transition> Transitions(int fromState, int symbol) Parameters Type Name Description int fromState The state from which to start. int symbol The symbol to transition on. Returns Type Description SortedSet<Transition> The transitions from the given state on the given symbol. | Edit this page View Source UnionWith(IEnumerable<EpsilonTransition>) Adds multiple epsilon transitions to the NFA. Declaration public void UnionWith(IEnumerable<EpsilonTransition> transitions) Parameters Type Name Description IEnumerable<EpsilonTransition> transitions The transitions to add. | Edit this page View Source UnionWith(IEnumerable<Transition>) Adds multiple symbolic transitions to the NFA. Declaration public void UnionWith(IEnumerable<Transition> transitions) Parameters Type Name Description IEnumerable<Transition> transitions The transitions to add. | Edit this page View Source UnionWith(IEnumerable<IEnumerable<string>>) Adds a set of sequences to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<IEnumerable<string>> sequences) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The sequences to add to the NFA. Remarks Any missing symbols in the alphabet will be added to the alphabet. | Edit this page View Source UnionWith(IEnumerable<string>) Adds a sequence of symbols to be accepted by the NFA. Declaration public void UnionWith(IEnumerable<string> sequence) Parameters Type Name Description IEnumerable<string> sequence The sequence of symbols to add. Remarks Any missing symbols in the alphabet will be added to the alphabet. Implements IFsa"
  },
  "Automata.Core.Operations.Determinize.html": {
    "href": "Automata.Core.Operations.Determinize.html",
    "title": "Class Determinize | Automata Docs",
    "keywords": "Class Determinize Inheritance object Determinize Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Operations Assembly: Automata.Core.dll Syntax public static class Determinize Methods | Edit this page View Source ToDfa(Nfa) Determinization of an NFA representation to a DFA. Declaration public static Dfa ToDfa(Nfa nfa) Parameters Type Name Description Nfa nfa Returns Type Description Dfa A DFA representing the NFA. Remarks Uses the Powerset Construction algorithm (a.k.a. Subset Construction algorithm)."
  },
  "Automata.Core.Operations.Intersect.html": {
    "href": "Automata.Core.Operations.Intersect.html",
    "title": "Class Intersect | Automata Docs",
    "keywords": "Class Intersect Provides static methods for performing operations on finite automata, such as computing the intersection of two automata. Inheritance object Intersect Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Core.Operations Assembly: Automata.Core.dll Syntax public static class Intersect Methods | Edit this page View Source Intersection(IDfa, IDfa) Computes the intersection of two deterministic finite automata (IDFAs). The resulting automaton accepts only the strings that are accepted by both input automata. Declaration public static Dfa Intersection(IDfa a, IDfa b) Parameters Type Name Description IDfa a The first finite automaton. IDfa b The second finite automaton. Returns Type Description Dfa A deterministic finite automaton representing the intersection of the two input automata."
  },
  "Automata.Core.Operations.html": {
    "href": "Automata.Core.Operations.html",
    "title": "Namespace Automata.Core.Operations | Automata Docs",
    "keywords": "Namespace Automata.Core.Operations Classes Determinize Intersect Provides static methods for performing operations on finite automata, such as computing the intersection of two automata."
  },
  "Automata.Core.StateView.html": {
    "href": "Automata.Core.StateView.html",
    "title": "Struct StateView | Automata Docs",
    "keywords": "Struct StateView Represents a read-only view of a state in an automaton, providing access to transitions from the state. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly ref struct StateView Remarks This struct uses a ReadOnlySpan which is only a view on a contiguous memory sequence of Transition(int). Constructors | Edit this page View Source StateView(int, Transition[]) Initializes a new instance of the StateView struct with an specified state and unfiltered transitions. Declaration public StateView(int fromState, Transition[] transitions) Parameters Type Name Description int fromState The state from which the transitions originate. Transition[] transitions The filtered transitions from the specified state. | Edit this page View Source StateView(int, ReadOnlySpan<Transition>) Initializes a new instance of the StateView struct with an specified state and unfiltered transitions. Declaration public StateView(int fromState, ReadOnlySpan<Transition> transitions) Parameters Type Name Description int fromState The state from which the transitions originate. ReadOnlySpan<Transition> transitions The filtered transitions from the specified state. Fields | Edit this page View Source Transitions Gets the transitions from the current state. Declaration public readonly ReadOnlySpan<Transition> Transitions Field Value Type Description ReadOnlySpan<Transition> Properties | Edit this page View Source State Gets the state from which the transitions originate. Declaration public int State { get; } Property Value Type Description int Methods | Edit this page View Source Transition(int) Gets the transition for the specified symbol. Declaration public Transition Transition(int symbol) Parameters Type Name Description int symbol The symbol for which to get the transition. Returns Type Description Transition The transition for the specified symbol, or Invalid if no such transition exists."
  },
  "Automata.Core.Transition.html": {
    "href": "Automata.Core.Transition.html",
    "title": "Struct Transition | Automata Docs",
    "keywords": "Struct Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Implements IComparable<Transition> IEquatable<Transition> Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: Automata.Core Assembly: Automata.Core.dll Syntax public readonly record struct Transition : IComparable<Transition>, IEquatable<Transition> Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Constructors | Edit this page View Source Transition() Initializes a new instance of the Transition struct that is equivalent to Invalid. Declaration public Transition() | Edit this page View Source Transition(int, int, int) Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Declaration public Transition(int FromState, int Symbol, int ToState) Parameters Type Name Description int FromState The state from which the transition starts. int Symbol The symbol that triggers the transition. int ToState The state to which the transition goes. Remarks A Transition always has a (non-epsilon) symbol and cannot represent an epsilon transition Properties | Edit this page View Source FromState The state from which the transition starts. Declaration public int FromState { get; init; } Property Value Type Description int | Edit this page View Source Invalid Gets an invalid transition. Declaration public static Transition Invalid { get; } Property Value Type Description Transition | Edit this page View Source IsInvalid Indicates whether the transition is invalid. Declaration public bool IsInvalid { get; } Property Value Type Description bool | Edit this page View Source Symbol The symbol that triggers the transition. Declaration public int Symbol { get; init; } Property Value Type Description int | Edit this page View Source ToState The state to which the transition goes. Declaration public int ToState { get; init; } Property Value Type Description int Methods | Edit this page View Source CompareTo(Transition) Compares the current transition to another transition. Declaration public int CompareTo(Transition other) Parameters Type Name Description Transition other The other transition to compare to. Returns Type Description int An integer that indicates the relative order of the objects being compared. | Edit this page View Source MaxTrans(int, int) Creates a maximum transition for the given state and symbol. Declaration public static Transition MaxTrans(int fromState, int symbol = 2147483647) Parameters Type Name Description int fromState The from state. int symbol The symbol for the transition (default is MaxValue). Returns Type Description Transition A Transition representing the maximum transition. | Edit this page View Source MinTrans(int, int) Creates a minimum transition for the given state and symbol. Declaration public static Transition MinTrans(int fromState, int symbol = -2147483648) Parameters Type Name Description int fromState The from state. int symbol The symbol for the transition (default is MinValue). Returns Type Description Transition A Transition representing the minimum transition. | Edit this page View Source Reverse() Reverses the transition. Declaration public Transition Reverse() Returns Type Description Transition A new Transition with the from and to states swapped. | Edit this page View Source ToString() Returns a string that represents the current transition. Declaration public override string ToString() Returns Type Description string A string that represents the current transition. Overrides ValueType.ToString() Implements IComparable<T> IEquatable<T>"
  },
  "Automata.Core.html": {
    "href": "Automata.Core.html",
    "title": "Namespace Automata.Core | Automata Docs",
    "keywords": "Namespace Automata.Core Classes CanonicalAlphabet Immutable and optimized representation of an alphabet with contiguous, ordered symbols. Cfa Canonical Finite-state Automaton (CFA). Constants Class representing automata related constants Dfa A deterministic finite automaton (DFA). IntSet Represents an immutable set of integers. MutableAlphabet Represents a mutable alphabet associated with a finite state automaton. Nfa Represents a nondeterministic finite automaton (NFA). Structs EpsilonTransition An epsilon transition in an automaton, defined by a starting state and an ending state. StateView Represents a read-only view of a state in an automaton, providing access to transitions from the state. Transition Represents a (symbolic) transition in an automaton, defined by a starting state, a symbol, and an ending state. Interfaces IAlphabet Common interface for an alphabet associated with a finite state automaton. IDfa A common interface for deterministic finite automata, such as Dfa and Cfa. IFsa Represents a finite state automaton (FSA) interface."
  },
  "Automata.Visualization.GraphFactory.html": {
    "href": "Automata.Visualization.GraphFactory.html",
    "title": "Class GraphFactory | Automata Docs",
    "keywords": "Class GraphFactory Static class for creating displayable graphs from finite state automata. Inheritance object GraphFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public static class GraphFactory Methods | Edit this page View Source CreateGraph(IFsa, bool, LayerDirection, bool) Creates a displayable graph from a finite state automaton (FSA). Declaration public static Graph CreateGraph(this IFsa fsa, bool displayStateIDs = false, LayerDirection layerDirection = LayerDirection.LR, bool directed = true) Parameters Type Name Description IFsa fsa The finite state automaton to represent as a graph. bool displayStateIDs LayerDirection layerDirection The layout direction of the graph (default: left-to-right). bool directed Indicates whether the graph is directed (default: true). Returns Type Description Graph A graph representing the finite state automaton. | Edit this page View Source CreateGraph(IEnumerable<IEnumerable<string>>, bool) Helper method that creates a displayable graph from a collection of sequences. Declaration public static Graph CreateGraph(this IEnumerable<IEnumerable<string>> sequences, bool minimize = true) Parameters Type Name Description IEnumerable<IEnumerable<string>> sequences The collection of sequences to create the graph from. bool minimize Indicates whether to minimize the DFA. Returns Type Description Graph A graph representing the finite state automaton."
  },
  "Automata.Visualization.GraphView.html": {
    "href": "Automata.Visualization.GraphView.html",
    "title": "Class GraphView | Automata Docs",
    "keywords": "Class GraphView A class for displaying finite-state automata as graphs in a separate window (and its own separate thread). Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form GraphView Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.OnFormCornerPreferenceChanged(EventArgs) Form.OnFormBorderColorChanged(EventArgs) Form.OnFormCaptionBackColorChanged(EventArgs) Form.OnFormCaptionTextColorChanged(EventArgs) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowAsync(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ShowDialogAsync() Form.ShowDialogAsync(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.FormCornerPreference Form.FormBorderColor Form.FormCaptionBackColor Form.FormCaptionTextColor Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormBorderColorChanged Form.FormCaptionBackColorChanged Form.FormCaptionTextColorChanged Form.FormCornerPreferenceChanged Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.InvokeAsync(Action, CancellationToken) Control.InvokeAsync<T>(Func<T>, CancellationToken) Control.InvokeAsync(Func<CancellationToken, ValueTask>, CancellationToken) Control.InvokeAsync<T>(Func<CancellationToken, ValueTask<T>>, CancellationToken) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: Automata.Visualization Assembly: Automata.Visualization.dll Syntax public class GraphView : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Remarks You do not need to involve any GUI boilerplate code to display a graph in a separate window, like calling the blocking Application.Run(), setting STA thread environment or bother about the GUI messes with your threads. Simply just create and open a graph view by calling either OpenNew() or OpenNew(Graph). This class uses the MSAGL library for layout and rendering of graphs. Methods | Edit this page View Source Dispose(bool) Disposes of the resources (other than memory) used by the Form. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Form.Dispose(bool) | Edit this page View Source Invoke(Action) Invokes the specified action on the UI thread. Declaration public void Invoke(Action action) Parameters Type Name Description Action action The action to invoke. | Edit this page View Source OpenNew() Opens a new instance of the GraphView class in a new thread. Declaration public static GraphView OpenNew() Returns Type Description GraphView A new instance of the GraphView class. | Edit this page View Source OpenNew(Graph) Opens a new instance of the GraphView class in a new thread and sets the specified graph. Declaration public static GraphView OpenNew(Graph graph) Parameters Type Name Description Graph graph The graph to display. Returns Type Description GraphView A new instance of the GraphView class with the specified graph set. | Edit this page View Source SetGraph(Graph) Displays the specified graph in the graph view. Declaration public void SetGraph(Graph graph) Parameters Type Name Description Graph graph The graph to display. Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl"
  },
  "Automata.Visualization.html": {
    "href": "Automata.Visualization.html",
    "title": "Namespace Automata.Visualization | Automata Docs",
    "keywords": "Namespace Automata.Visualization Classes GraphFactory Static class for creating displayable graphs from finite state automata. GraphView A class for displaying finite-state automata as graphs in a separate window (and its own separate thread)."
  },
  "index.html": {
    "href": "index.html",
    "title": "Automata API Documentation | Automata Docs",
    "keywords": "Automata documentation Welcome to the documentation for Automata. API Documentation Automata.Core Automata.Core.Alang Automata.Core.Operations Automata.Visualization Automata source code repo at GitHub ALANG - A language for definining finite-state automata. Alang grammar specification"
  }
}